<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Guides</title>
    <link>https://jenkins-x.io/v3/admin/guides/</link>
    <description>Recent content in Guides on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/admin/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: TLS and DNS</title>
      <link>https://jenkins-x.io/v3/admin/guides/tls_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/tls_dns/</guid>
      <description>
        
        
        &lt;p&gt;This section will describe how to enable automated TLS and DNS for your Jenkins X installation.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;The following demo walks you through how to setup TLS and DNS:&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OqsSqZqF0gY&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;To achieve this we will use a couple of open source projects to help enable automated DNS for your applications.&lt;/p&gt;
&lt;p&gt;For this guide we are going to assume you own a domain called &lt;code&gt;foo.io&lt;/code&gt; which is managed by Google Cloud DNS, if it is not see &lt;a href=&#34;https://jenkins-x.io/v3/guides/infra/google_cloud_dns&#34;&gt;configure cloud dns to manage a domain&lt;/a&gt;. A similar procedure is described for an external registrar, see the Azure section.&lt;/p&gt;
&lt;p&gt;A common requirement for domains is to have production services accessed using a parent / &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-custom-domains-and-github-pages#using-an-apex-domain-for-your-github-pages-site&#34;&gt;apex domain&lt;/a&gt;
for example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://foo.com&#34;&gt;https://foo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many organisations have extra requirements for development and test multi cluster environments to access services at&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.foo.com&#34;&gt;https://dev.foo.com&lt;/a&gt;
and
&lt;a href=&#34;https://staging.foo.com&#34;&gt;https://staging.foo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These use subdomains.&lt;/p&gt;
&lt;p&gt;In this guide below there is a prerequisite that you must already have a domain which is managed by your cloud provider, this is so that you can choose whichever of the scenarios above you need.  It also means the dns management of the apex domain happens outside of a single cluster installation and can be shared by multiple installations using a subdomain.&lt;/p&gt;
&lt;p&gt;Jenkins X services will have URLs like &lt;code&gt;https://hook-jx.dev.foo.io&lt;/code&gt;.  The jx-requirements.yml &lt;code&gt;namespaceSubDomain:&lt;/code&gt; of &lt;code&gt;-jx&lt;/code&gt; which is in the cluster git repository refers to the Kubernetes namespace the service is running in, this avoids clashes of the same application running in different namespaces in the same cluster.&lt;/p&gt;
&lt;p&gt;To start with we are focussed on GCP and Azure but will expand to other cloud providers.&lt;/p&gt;
&lt;h1 id=&#34;google-cloud-platform&#34;&gt;Google Cloud Platform&lt;/h1&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cluster created using Jenkins X &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/gke/&#34;&gt;GCP Terraform getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;own a domain and have GCP manage it, &lt;a href=&#34;https://jenkins-x.io/v3/guides/infra/google_cloud_dns&#34;&gt;configure cloud dns to manage a domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;latest Jenkins X CLI, Infrastructure and Cluster git repository updates &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrade&#34;&gt;upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-infrastructure&#34;&gt;Cloud Infrastructure&lt;/h3&gt;
&lt;p&gt;First we will configure the cloud infrastructure requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a GCP Service Account with the &lt;code&gt;dns.admin&lt;/code&gt; role, see &lt;a href=&#34;https://cloud.google.com/iam/docs/understanding-roles#dns-roles&#34;&gt;here&lt;/a&gt; for more information&lt;/li&gt;
&lt;li&gt;a managed cloud dns zone, see &lt;a href=&#34;https://cloud.google.com/dns/docs/zones&#34;&gt;here&lt;/a&gt; for more information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To satisfy these requirements go to your infrastructure repository (contains Terraform main.tf) and add to your &lt;code&gt;values.auto.tfvars&lt;/code&gt; the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apex_domain = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo.io&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most people prefer to use a subdomain for a specific installation rather than purchasing one domain per cluster.  For example in a multi cluster setup you will probably want all using the same parent domain but two clusters using a different subdomain like development.foo.io, staging.foo.io leaving production using just the parent domain foo.io.&lt;/p&gt;
&lt;p&gt;To use a subdomain for this cluster add the following configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;subdomain     = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will now add details that will be passed to Jenkins X as requirements when booting the cluster.&lt;/p&gt;
&lt;p&gt;Add these to &lt;code&gt;values.auto.tfvars&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;lets_encrypt_production = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
tls_email               = your_email_address@googlegroups.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now apply these changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add values.auto.tfvars
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;feat: enable DNS cloud resources&amp;#39;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may want to set two environment variables here so that Terraform does not prompt for values&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export TF_VAR_jx_bot_username=
export TF_VAR_jx_bot_token=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;now run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If using a subdomain you will now see your managed zone in GCP &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once terraform has finished for now there is a manual trigger of the Jenkins X cluster repository required.  This will not be needed in the future but for now please make a dummy commit on your cluster git repository and follow the boot job as in applies the updates to your cluster.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To follow the jx boot installation using the instructions given in the terraform output, connect to the cluster and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a timing issue with cert-manager and the admission controller so the first boot job may fail but second will run automatically and succeed.&lt;/p&gt;
&lt;p&gt;It can take a short while for DNS to propagate so you may need to wait for 5 - 10 minutes.  &lt;a href=&#34;https://dnschecker.org/&#34;&gt;https://dnschecker.org/&lt;/a&gt; is a useful way to check the status of DNS propagating.&lt;/p&gt;
&lt;p&gt;To verify using the CLI run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get ingress -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and use the hook URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx verify tls hook-jx.dev.foo.io  --production&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false --timeout 20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should be able to verify the TLS certificate from Lets Encrypt in your browser (beware of browser caching if you don&amp;rsquo;t see any changes)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/working_tls.png&#34; alt=&#34;Working TLS&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once this is working you can switch any of the configuration using your cluster git repository and change the jx-requirements.yaml, e.g. toggling the cert-manager production service or editing the email address used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: dev.foo.io
  &lt;span style=&#34;color:#66d9ef&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;namespaceSubDomain&lt;/span&gt;: -jx.
  &lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;joe@gmail.com&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;production&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git commit and push the change back to your remote git repository and follow the installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will now be issued a valid TLS certificate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx verify tls hook-jx.dev.foo.io  --production&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true --timeout 20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;azure&#34;&gt;Azure&lt;/h1&gt;
&lt;h2 id=&#34;azure-dns-zone-creation&#34;&gt;Azure DNS zone creation&lt;/h2&gt;
&lt;p&gt;Create a common resource group dedicated to all your DNS zones:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az group create --name rg-dns --location westeurope
{
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;westeurope&amp;quot;,
  &amp;quot;managedBy&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;
  },
  &amp;quot;tags&amp;quot;: null,
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Resources/resourceGroups&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create an Azure DNS zone with the name of your domain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az network dns zone create -g rg-dns -n foo.io
{
  &amp;quot;etag&amp;quot;: &amp;quot;00000002-0000-0000-e2d9-80ef0df0d601&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;global&amp;quot;,
  &amp;quot;maxNumberOfRecordSets&amp;quot;: 10000,
  &amp;quot;name&amp;quot;: &amp;quot;foo.io&amp;quot;,
  &amp;quot;nameServers&amp;quot;: [
    &amp;quot;ns1-05.azure-dns.com.&amp;quot;,
    &amp;quot;ns2-05.azure-dns.net.&amp;quot;,
    &amp;quot;ns3-05.azure-dns.org.&amp;quot;,
    &amp;quot;ns4-05.azure-dns.info.&amp;quot;
  ],
  &amp;quot;numberOfRecordSets&amp;quot;: 2,
  &amp;quot;registrationVirtualNetworks&amp;quot;: null,
  &amp;quot;resolutionVirtualNetworks&amp;quot;: null,
  &amp;quot;resourceGroup&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;tags&amp;quot;: {},
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Network/dnszones&amp;quot;,
  &amp;quot;zoneType&amp;quot;: &amp;quot;Public&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;domain-dns-servers-configuration&#34;&gt;Domain DNS servers configuration&lt;/h2&gt;
&lt;p&gt;In your registrar admin panel, find the DNS servers section of the domain you want to use and replace the default ones by those from the first step:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/registrar_dns_servers.png&#34; alt=&#34;dns servers section&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/registrar_dns_servers_update.png&#34; alt=&#34;dns servers update&#34;&gt;&lt;/p&gt;
&lt;p&gt;Test the DNS delegation by adding a A record in the Azure DNS zone you&amp;rsquo;ve previously created:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az network dns record-set a add-record -g rg-dns -z foo.io -n potato -a 1.2.3.4
{
  &amp;quot;arecords&amp;quot;: [
    {
      &amp;quot;ipv4Address&amp;quot;: &amp;quot;1.2.3.4&amp;quot;
    }
  ],
  &amp;quot;etag&amp;quot;: &amp;quot;a80b3397-dd76-4ad8-a789-0fd1dbd02d99&amp;quot;,
  &amp;quot;fqdn&amp;quot;: &amp;quot;potato.foo.io.&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io/A/potato&amp;quot;,
  &amp;quot;metadata&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;potato&amp;quot;,
  &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;,
  &amp;quot;resourceGroup&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;targetResource&amp;quot;: {
    &amp;quot;id&amp;quot;: null
  },
  &amp;quot;ttl&amp;quot;: 3600,
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Network/dnszones/A&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then check it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nslookup potato.foo.io
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	potato.foo.io
Address: 1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can finally remove this test A record:
&lt;code&gt;$ az network dns record-set a remove-record --resource-group rg-dns --zone-name foo.io --record-set-name &amp;quot;potato&amp;quot; --ipv4-address 1.2.3.4&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;cluster-creation&#34;&gt;Cluster creation&lt;/h2&gt;
&lt;p&gt;Generate a new infrastructure repository and a new a new cluster repository, then put this at the end of your &lt;strong&gt;infrastructure&lt;/strong&gt; repository &lt;code&gt;values.auto.tfvars&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dns_enabled = &amp;quot;true&amp;quot;
domain_name = &amp;quot;jx&amp;quot;
apex_domain_name = &amp;quot;foo.io&amp;quot;
apex_domain_integration_enabled = &amp;quot;true&amp;quot;
apex_resource_group_name = &amp;quot;rg-dns&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commit these changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add values.auto.tfvars
$ git commit -m &amp;quot;chore: DNS configuration&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And create the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform init
$ terraform plan
$ terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cluster-configuration&#34;&gt;Cluster configuration&lt;/h2&gt;
&lt;p&gt;Once the cluster creation and the boot job is completed, configure TLS in &lt;code&gt;jx-requirements.yaml&lt;/code&gt; in your &lt;strong&gt;cluster&lt;/strong&gt; repository (don&amp;rsquo;t forget to retrieve the boot changes before with &lt;code&gt;git pull&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ingress:
    domain: jx.foo.io
    externalDNS: true
    kind: ingress
    namespaceSubDomain: -jx.
    tls:
      email: &amp;quot;contact@foo.io&amp;quot;
      enabled: true
      production: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commit and push these changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add values.auto.tfvars
$ git commit -m &amp;quot;chore: domain and TLS configuration&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the boot job, verify with:
&lt;code&gt;jx verify tls hook-jx.jx.foo.io  --production=false --timeout 20m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re happy with your changes, you can set &lt;code&gt;production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to get a real certificate, then after the boot job, verify it with:
&lt;code&gt;jx verify tls hook-jx.jx.foo.io  --production=true --timeout 20m&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;faq&#34;&gt;FAQ&lt;/h1&gt;
&lt;h2 id=&#34;what-if-i-have-a-chartmuseum-with-charts-running-using-nipio&#34;&gt;What if I have a chartmuseum with charts running using nip.io?&lt;/h2&gt;
&lt;p&gt;It is best to comment out your Jenkins X chartmuseum repository and charts from your helmfile until your new domain and ingress is working.  Then uncomment and make sure you update the chartmuseum URL to your new one.&lt;/p&gt;
&lt;h2 id=&#34;what-if-i-use-a-subdomain-with-an-apex-domain-in-a-different-gcp-project&#34;&gt;What if I use a subdomain with an apex domain in a different GCP project?&lt;/h2&gt;
&lt;p&gt;When using a subdomain Terraform will create a managed zone in GCP, add the recordsets to your parent / apex domain.&lt;/p&gt;
&lt;p&gt;If the GCP managed zone for your apex domain is in a different GCP project than the project that your current installation the you will need to set in your infrastructure repository the terraform variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parent_domain_gcp_project: [your GCP project that is managing your apex domain]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you do not have permission to update the recordset of the apex domain then you will need to manually update it after getting the nameservers created for your subdomain managed zone and disable the automatic way using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apex_domain_integration_enabled: false
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-can-i-remove-the-namespace-subdomain-eg--jx-from-my-urls&#34;&gt;How can I remove the namespace subdomain (e.g. -jx.) from my URLs?&lt;/h2&gt;
&lt;p&gt;In your cluster git repository find the &lt;code&gt;namespaceSubdomain&lt;/code&gt; property in your jx-requirements.yml file and change its value to &lt;code&gt;namespaceSubdomain: &amp;quot;.&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Be aware that the same application deployed in multiple namespaces will end up with the same URL if you change &lt;code&gt;namespaceSubdomain&lt;/code&gt; to be the same for all environments.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-check-if-cert-manager-has-issued-a-certificate&#34;&gt;How can I check if cert-manager has issued a certificate?&lt;/h2&gt;
&lt;p&gt;You can check the status of the certificate by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get cert -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;kubectl describe cert -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if &lt;code&gt;Ready&lt;/code&gt; continues to be &lt;code&gt;false&lt;/code&gt; after 10-15 mins you can check on the request using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get certificaterequest -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;kubectl describe certificaterequest -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-can-i-install-the-charts-if-not-using-terraform-to-autamatically-enable-them&#34;&gt;How can I install the charts if not using terraform to autamatically enable them?&lt;/h2&gt;
&lt;p&gt;If you are not using the Jenkins X Terraform above then you can manually update your cluster git repository and add the charts needed.&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;Next we will configure the cluster requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns#externaldns&#34;&gt;external-dns&lt;/a&gt; - Kubernetes controller which watches for new Kubernetes Ingress resources and creates A records in Google Cloud DNS which will propagate globally across the internet&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://cert-manager.io/docs/&#34;&gt;cert-manager&lt;/a&gt; - Kubernetes controller which watches for requests to ask &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; to issue a new wildcard TLS certificate for your domain and will manage this including renewals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cert-manager will use the cluster issuer to request a TLS certificate.  A Kubernetes secret will be automatically created and contain the TLS cert.  The nginx controllers in the &lt;code&gt;nginx&lt;/code&gt; namespace will use this secret in the &lt;code&gt;jx&lt;/code&gt; namespace for the default SSL certificate which will automatically enable TLS for all applications in your cluster.&lt;/p&gt;
&lt;p&gt;The domain from setting up your infrastructure in step one should appear in the &lt;code&gt;jx-requirements.yml&lt;/code&gt; of you cluster git repo.  Next configure your TLS options, update your &lt;code&gt;jx-requirements.yml&lt;/code&gt; with below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; this is the top level &lt;code&gt;ingress:&lt;/code&gt; section and &lt;strong&gt;NOT&lt;/strong&gt; in the &lt;code&gt;environments:&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ingress:
  domain: dev.foo.io
  externalDNS: true
  namespaceSubDomain: -jx.
  tls:
    email: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;joe@gmail.com&amp;#34;&lt;/span&gt;
    enabled: true
    production: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When first installing set &lt;code&gt;tls.production=false&lt;/code&gt; so you use the Lets Encrypt staging service which allows for more API calls before rate limiting requests.  They will issue a self-signed certificate so once happy everything is working change this to &lt;code&gt;tls.production=true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Helmfile is not able to skip insecure TLS when adding helm repositories, therefore staging certificates will not work with chartmuseum that is running in the cluster.  Therefore once you have verified cert-manager can issue certificates from staging, switch to the production service.&lt;/p&gt;
&lt;p&gt;Jenkins X uses a version stream to rollout tested versions of images, charts and default configuration.  The &lt;code&gt;jx-boot&lt;/code&gt; job will apply these versions to your helmfile but you can also run the step yourself to see the defaults.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx gitops helmfile resolve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add helmfile.yaml
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;feat: enable DNS and TLS&amp;#39;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now tail the admin logs and wait for the job to complete&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Cluster Recovery</title>
      <link>https://jenkins-x.io/v3/admin/guides/cluster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/cluster-recovery/</guid>
      <description>
        
        
        &lt;p&gt;This section describes cluster recovery situations for when things go bad.  It can also be used to reguary recreate clusters, this is something the Jenkins X project does itself as we prefer to treat our clusters as cattle and not pets, giving confidence that we can restore services at any time.&lt;/p&gt;
&lt;p&gt;Disclaimer: there may well be better approaches so if you know of better ways please contribute and help improve the experience.  There are some manual steps below that we know to work but expect we can improve.&lt;/p&gt;
&lt;h1 id=&#34;demo&#34;&gt;Demo&lt;/h1&gt;
&lt;p&gt;The following demo walks you through cluster recovery&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2QgX3cn0GqU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;see &lt;a href=&#34;https://www.youtube.com/playlist?list=PLr_PmC4W69dKM3fo8OK729fdmX_MTqdHd&#34;&gt;other demos here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cluster-applications-and-services&#34;&gt;Cluster applications and services&lt;/h1&gt;
&lt;p&gt;Jenkins X embraces GitOps, details of any application or configuration are stored declaratively in Git.  Jenkins X recommends using external storage if you require persistence to be preserved.  Cloud Storage buckets are great at achieving this.  With that said Jenkins X has one service that writes data to a persistent volume and is not backed up in cloud storage.  The current use of Chartmuseuam to store helm charts for applications means if we need to recreate a cluster we will need to retrigger release pipelines for any application running in the staging or production cluster.&lt;/p&gt;
&lt;p&gt;The Jenkins X project itself does not use Chartmuseum, instead it uses Work Load Identity and &lt;a href=&#34;https://github.com/hayorov/helm-gcs&#34;&gt;helm gcs plugin&lt;/a&gt; to write directly to a GCP bucket.  You could consider using this approach but as well Jenkins X will look to resolve this by adding OOTB support for buckets or other external repositories for charts.&lt;/p&gt;
&lt;p&gt;For now you will need to modify your cluster git repository and remove the helmfile repository that points to the internal chartmuseum service.&lt;/p&gt;
&lt;p&gt;For example: &lt;a href=&#34;https://github.com/cb-kubecd/jx3-demo-walk-cluster/blob/ce3fa07834e93e44b2d19882b82a7de51f627ba2/helmfiles/jx-staging/helmfile.yaml#L7-L15&#34;&gt;https://github.com/cb-kubecd/jx3-demo-walk-cluster/blob/ce3fa07834e93e44b2d19882b82a7de51f627ba2/helmfiles/jx-staging/helmfile.yaml#L7-L15&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filepath: &amp;quot;&amp;quot;
environments:
 default:
   values:
   - jx-values.yaml
namespace: jx-staging
repositories:
- name: dev
 url: http://jenkins-x-chartmuseum.jx.svc.cluster.local:8080
releases:
- chart: dev/jx3-golang1
 version: 0.0.4
 name: jx3-golang1
 values:
 - jx-values.yaml
templates: {}
renderedvalues: {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you recover any infrastructure below you will then need to trigger release pipelines again using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx start pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h1&gt;
&lt;p&gt;Cloud Infrastructure is managed by Terraform.  We recommend storing the Terraform state file in a &lt;a href=&#34;https://www.terraform.io/docs/backends/index.html&#34;&gt;secure backend&lt;/a&gt; or use a service like &lt;a href=&#34;https://app.terraform.io/&#34;&gt;Terraform Cloud&lt;/a&gt; as this means you can recover your Cloud Infrastructure in situations where it is deleted.&lt;/p&gt;
&lt;h2 id=&#34;gcp-specific&#34;&gt;GCP specific&lt;/h2&gt;
&lt;p&gt;For Google Container Engine there is a manual task you need to perform because the Terraform module does not manage deleting Cloud DNS Manage Zones that contain record sets.  This is something we hope to address in the future but if you are using DNS you will need to manually delete your Managed Zone, the easiest way is via the GCP console.&lt;/p&gt;
&lt;p&gt;Select your managed zone &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones&#34;&gt;https://console.cloud.google.com/net-services/dns/zones&lt;/a&gt;
&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_select_zone.png&#34; alt=&#34;Select Zone&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select all record set checkbox and click the DELETE RECORD SETS button
&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_delete_recordsets.png&#34; alt=&#34;Delete Record Sets&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now select the DELETE ZONE button at the top&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_delete_zone.png&#34; alt=&#34;Delete Zone&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;recover&#34;&gt;Recover&lt;/h2&gt;
&lt;p&gt;The Jenkins X terraform modules write some details into a cluster once it is created, this can cause issues when applying the Terraform plan if that cluster is not available.&lt;/p&gt;
&lt;p&gt;You will need to modify the state file so navigate to your local clone of your infrastructure git repository&lt;/p&gt;
&lt;p&gt;Set your bot username and personal access token &lt;code&gt;TF_VAR_&lt;/code&gt;s&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export TF_VAR_jx_bot_username=
export TF_VAR_jx_bot_token=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are using Terraform Cloud you can get you state file by adding this to your &lt;code&gt;main.tf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Enable to work with local and remote states
# run terraform init after uncommenting below
terraform {
  backend &amp;quot;remote&amp;quot; {
    hostname = &amp;quot;app.terraform.io&amp;quot;
    organization = &amp;quot;foo&amp;quot;
    workspaces {
      name = &amp;quot;bar&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you already have a local state file make a backup of it, e.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cp terraform.tfstate terraform.tfstate.backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;now modify the state file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;terraform state rm module.jx
terraform refresh
terraform state pull &amp;gt; terraform.tfstate
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-is-not-recovered&#34;&gt;What is not recovered&lt;/h2&gt;
&lt;p&gt;Any Custom Resources not stored in git will not be recovered, for example Jenkins X Pipeline Activities.  There are solutions like &lt;a href=&#34;https://velero.io/&#34;&gt;Velero&lt;/a&gt; that handles backups which could be used.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Migrate</title>
      <link>https://jenkins-x.io/v3/admin/guides/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/migrate/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>V3: Multi-Cluster</title>
      <link>https://jenkins-x.io/v3/admin/guides/multi-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/multi-cluster/</guid>
      <description>
        
        
        &lt;p&gt;We recommend using separate clusters for your &lt;code&gt;Preprod&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environments. This lets you completely isolate your environments which improves security.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-multi-cluster&#34;&gt;Setting up multi cluster&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/&#34;&gt;administration documentation&lt;/a&gt; to setup a new Development Cluster (or skip this step if already in place).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the mentioned approach at the previous point in order to setup new and additional clusters for the desired remote environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For remote environments (e.g. &lt;code&gt;Preprod&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt;) you typically won&amp;rsquo;t need lots of the development tools such as:
&lt;ul&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;li&gt;Tekton&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;li&gt;Nexus / Bucketrepo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And install only services to run and expose your applications, e.g.:
&lt;ul&gt;
&lt;li&gt;Nginx-ingress&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; for &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;populating Secrets from your secret store&lt;/a&gt; (vault or cloud provider secret manager)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#wave&#34;&gt;push-wave&lt;/a&gt; for automatically performing rolling upgrades when secrets are rotated in your secret store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then when you have a git repository URL for your &lt;code&gt;Preprod&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; cluster, &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/#import-an-existing-project&#34;&gt;import the git repository&lt;/a&gt; like you would any other git repository into your Development cluster using the &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; command (command should be run in the &lt;code&gt;jx&lt;/code&gt; namespace):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx project import --url https://github.com/myowner/my-prod-repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a Pull Request on your development cluster git repository to link to the &lt;code&gt;Preprod&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; git repository on promotions of apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Jenkins X will &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#importing--creating-quickstarts&#34;&gt;push additional configuration files&lt;/a&gt; to the created Pull Request, so it is recommended to wait until the Pull Request is auto-merged and avoid manual intervention.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;changes-to-jx-requirementsyml&#34;&gt;Changes to &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The above &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; should modify your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in your development cluster to reference the remote production/pre-production cluster.&lt;/p&gt;
&lt;p&gt;So your &lt;code&gt;jx-requirements.yml&lt;/code&gt; should have started something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;environments&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: dev
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-dev-environment
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: staging                                                   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;after importing the remote environment via &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; and the pull request merging it should look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;environments&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: dev
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-dev-environment
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: staging
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: my-prod-repo
  &lt;span style=&#34;color:#66d9ef&#34;&gt;owner&lt;/span&gt;: myowner
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-prod-repo
  &lt;span style=&#34;color:#66d9ef&#34;&gt;remoteCluster&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once everything is correctly setup, it will be possible to deploy applications to the newly created remote environment/s.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The multi cluster setup of Jenkins X is designed around the following goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have full control over production and pre-production clusters, choosing exactly what software is installed there
&lt;ul&gt;
&lt;li&gt;there are no development tools installed: no tekton, lighthouse, container registries and no images are built in production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;immutable infrastructure configured via GitOps with maximum traceability and feedback
&lt;ul&gt;
&lt;li&gt;easy to review changes on production via git and not requiring access to production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;development-cluster&#34;&gt;Development Cluster&lt;/h3&gt;
&lt;p&gt;The development cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runs all pipelines on your applications to handle pull requests and performs releases
&lt;ul&gt;
&lt;li&gt;releases of applications create pull requests on remote cluster repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;handles all webhooks for pull requests on remove environments and runs pipelines to validate changes to remote environments
&lt;ul&gt;
&lt;li&gt;reports back to GitHub the status of pull request pipelines&lt;/li&gt;
&lt;li&gt;visualises the pipelines in the &lt;a href=&#34;https://jenkins-x.io/v3/develop/ui/&#34;&gt;usual Jenkins X UIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;supports auto-merge via ChatOps when approved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;remote-cluster&#34;&gt;Remote Cluster&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;runs the &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/operator/&#34;&gt;git operator&lt;/a&gt; which polls the main branch in the remote cluster for changes&lt;/li&gt;
&lt;li&gt;when a change is found a &lt;code&gt;Job&lt;/code&gt; is run to perform the &lt;code&gt;kubectl apply&lt;/code&gt; or &lt;code&gt;helmfile sync&lt;/code&gt; or whatever&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;remote-cluster-recommendations&#34;&gt;Remote Cluster Recommendations&lt;/h2&gt;
&lt;p&gt;We do recommend using the Jenkins X GitOps pipeline approach in &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;production and preproduction for these reasons&lt;/a&gt; then all changes to git result in the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;kubernetes resources being checked into git&lt;/a&gt; so they can be easily reviewed without reviewers needing access to production.&lt;/p&gt;
&lt;p&gt;You may want to reuse existing built in charts such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; for &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;populating Secrets from your secret store&lt;/a&gt; (vault or cloud provider secret manager)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#wave&#34;&gt;push-wave&lt;/a&gt; for automatically performing rolling upgrades when secrets are rotated in your secret store&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-helmfile-sync&#34;&gt;using &lt;code&gt;helmfile sync&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you want to just use something like &lt;code&gt;helmfile sync&lt;/code&gt; to deploy charts in production you could use the following &lt;code&gt;Makefile&lt;/code&gt; in your production/pre-production repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    helmfile sync
    
&lt;span style=&#34;color:#a6e22e&#34;&gt;pr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    helmfile lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;though you will lose &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;these benefits&lt;/a&gt;. You will also need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add your own &lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#quick-start&#34;&gt;pusher-wave integration&lt;/a&gt; for each chart you want to perform a rolling upgrade if the underlying secrets are rotated.&lt;/li&gt;
&lt;li&gt;manually populate all secrets in each remote environments via the underlying secret store as you will not be using the &lt;a href=&#34;https://github.com/jenkins-x/jx-secret&#34;&gt;jx-secret&lt;/a&gt; mechanism built into the default Jenkins X GitOps pipelines for doing this.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Progressive Delivery</title>
      <link>https://jenkins-x.io/v3/admin/guides/progressive-delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/progressive-delivery/</guid>
      <description>
        
        
        &lt;p&gt;Progressive delivery allows you to gradually rollout new versions of your application to an environment using &lt;em&gt;canaries&lt;/em&gt; and gradually giving traffic to the new version until you are happy to fully rollover to the new version.&lt;/p&gt;
&lt;p&gt;Our recommendation for using progressive delivery with Jenkins X is to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; as the progressive delivery controller&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt; as the service mesh to provide advanced load balancing capabilities across internal or external networking&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuring-progressive-delivery&#34;&gt;Configuring Progressive Delivery&lt;/h2&gt;
&lt;p&gt;Please follow the usual &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/&#34;&gt;getting started guide for boot and helm 3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-the-istio-and-flagger-apps&#34;&gt;Add the istio and flagger apps&lt;/h3&gt;
&lt;p&gt;Please make sure your &lt;code&gt;helmfile.yaml&lt;/code&gt; has the necessary apps for using &lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; and &lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt;. Your &lt;code&gt;helmfile.yaml&lt;/code&gt; in your development environment git repository should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;releases&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: jx-labs/istio
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: flagger/flagger
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: flagger/grafana
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: jx-labs/flagger-metrics
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: stable/kuberhealthy
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that you remove &lt;code&gt;stable/nginx-ingress&lt;/code&gt; from your &lt;code&gt;helmfile.yaml&lt;/code&gt; file and ensure the above apps are added at the top of the file.&lt;/p&gt;
&lt;p&gt;Also for now I&amp;rsquo;m afraid you will have to remove the &lt;code&gt;jenkins-x/jxui&lt;/code&gt; chart as its currently not working yet with istio ingress - but we can hopefully get that working soon.&lt;/p&gt;
&lt;h3 id=&#34;enable-istio-based-ingress&#34;&gt;Enable istio based ingress&lt;/h3&gt;
&lt;p&gt;To avoid having 2 &lt;code&gt;LoadBalancer&lt;/code&gt; services for both &lt;code&gt;istio&lt;/code&gt; and &lt;code&gt;nginx&lt;/code&gt; (which costs more money) its easier to switch to pure istio for both internal and external load balancing. This also results in a smaller footprint.&lt;/p&gt;
&lt;p&gt;To do that ensure that &lt;code&gt;kind: istio&lt;/code&gt; is added to the &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in the top level &lt;code&gt;ingress:&lt;/code&gt; section like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: istio
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your development git repository should be setup and be ready. Now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make sure you have setup &lt;a href=&#34;https://jenkins-x.io/v3/guides/secrets/&#34;&gt;any secrets you need to boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it is all complete you should see istio, flagger, grafana pods running in the &lt;code&gt;istio-system&lt;/code&gt; namespace something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
flagger-66dc49cd-g6ptp                  1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
grafana-7d7d7476f6-ff6bm                1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
istio-ingressgateway-598796f4d9-sq8b7   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
istiod-7d9c7bdd6-vjp9j                  1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
kuberhealthy-f54f7f7df-b5gbf            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;          32h
kuberhealthy-f54f7f7df-j6qwt            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
prometheus-b47d8c58c-n974m              2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From 1.5 onwards istio is pretty small; just 2 pods. Note that those &lt;code&gt;kuberhealthy&lt;/code&gt; pods are optional and just help with reporting.&lt;/p&gt;
&lt;h3 id=&#34;enable-istio-in-stagingproduction&#34;&gt;Enable istio in staging/production&lt;/h3&gt;
&lt;p&gt;If you wish to use a Canary with &lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; and &lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt; in your staging or production namespace you need to make sure you have labelled the namespace correctly to enable istio injection.&lt;/p&gt;
&lt;p&gt;To enable istio in staging:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl label namespace jx-staging istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To enable istio in production:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl label namespace jx-production istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;defaulting-to-use-canary&#34;&gt;Defaulting to use Canary&lt;/h3&gt;
&lt;p&gt;Run the following command to default to using canary deployments and horizontal pod autoscaling whenever you &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quickstart&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import a project&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx edit deploy --team --canary --hpa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will enable all new quickstarts and imported projects to use canary rollouts and use horizontal pod autoscaling in all environments.&lt;/p&gt;
&lt;p&gt;You can switch the defaults back again at any time or configure any app to change its defaults by running &lt;code&gt;jx edit deploy&lt;/code&gt; inside a git clone of an application.&lt;/p&gt;
&lt;h3 id=&#34;enablingdisabling-canaryhpa-in-an-environment&#34;&gt;Enabling/Disabling Canary/HPA in an Environment&lt;/h3&gt;
&lt;p&gt;If you want to enable/disable canary or horizontal pod autoscaling for a specific app in an environment then you can &lt;a href=&#34;https://jenkins-x.io/v3/develop/apps/#customising-charts&#34;&gt;follow the app customisation approach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Assuming your app is called &lt;code&gt;myapp&lt;/code&gt; then in the git repository for the environment (e.g. &lt;code&gt;Staging&lt;/code&gt;) you can add/edit a file called &lt;code&gt;apps/mychart/values.yaml&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;canary&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;hpa&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you can enable/disable those 2 flags for canary releases and horizontal pod autoscaler at any point in any environment.&lt;/p&gt;
&lt;h2 id=&#34;using-progressive-delivery&#34;&gt;Using Progressive Delivery&lt;/h2&gt;
&lt;p&gt;Once you have followed the above steps create a &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;quickstart application&lt;/a&gt; in the usual way.&lt;/p&gt;
&lt;p&gt;As you merge changes to the master branch of your application Jenkins X will create a new release and &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/using/#how-does-promotion-actually-work&#34;&gt;promote it to the staging environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However if Canary deployment is enabled your new version will gradually be rolled out progressively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the defaults are that 20% of the traffic will go to the new version&lt;/li&gt;
&lt;li&gt;flagger will keep monitoring the metrics used in the Canary resource to determine if the canary is good&lt;/li&gt;
&lt;li&gt;after the configured time period is over the traffic will be increased to 40% then 60%&lt;/li&gt;
&lt;li&gt;eventually if things look good the new version will fully rollout to 100% traffic&lt;/li&gt;
&lt;li&gt;if anything goes bad during the rollout time period the old version is restored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is an excellent &lt;a href=&#34;https://youtu.be/7eePqtxW7NM&#34;&gt;video showing this in action&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Jenkins</title>
      <link>https://jenkins-x.io/v3/admin/guides/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/jenkins/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/v3/guides/jx3/&#34;&gt;Jenkins X version 3 &lt;/a&gt; includes support for the interoperability of &lt;a href=&#34;https://jenkins.io&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/v3/about/&#34;&gt;Jenkins X&lt;/a&gt; and &lt;a href=&#34;https://github.com/tektoncd/pipeline&#34;&gt;Tekton&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

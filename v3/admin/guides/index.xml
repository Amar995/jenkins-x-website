<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Guides</title>
    <link>https://jenkins-x.io/v3/admin/guides/</link>
    <description>Recent content in Guides on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/admin/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Cluster Recovery</title>
      <link>https://jenkins-x.io/v3/admin/guides/cluster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/cluster-recovery/</guid>
      <description>
        
        
        &lt;p&gt;This section describes cluster recovery situations for when things go bad.  It can also be used to reguary recreate clusters, this is something the Jenkins X project does itself as we prefer to treat our clusters as cattle and not pets, giving confidence that we can restore services at any time.&lt;/p&gt;
&lt;p&gt;Disclaimer: there may well be better approaches so if you know of better ways please contribute and help improve the experience.  There are some manual steps below that we know to work but expect we can improve.&lt;/p&gt;
&lt;h1 id=&#34;demo&#34;&gt;Demo&lt;/h1&gt;
&lt;p&gt;The following demo walks you through cluster recovery&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2QgX3cn0GqU&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;see &lt;a href=&#34;https://www.youtube.com/playlist?list=PLr_PmC4W69dKM3fo8OK729fdmX_MTqdHd&#34;&gt;other demos here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cluster-applications-and-services&#34;&gt;Cluster applications and services&lt;/h1&gt;
&lt;p&gt;Jenkins X embraces GitOps, details of any application or configuration are stored declaratively in Git.  Jenkins X recommends using external storage if you require persistence to be preserved.  Cloud Storage buckets are great at achieving this.  With that said Jenkins X has one service that writes data to a persistent volume and is not backed up in cloud storage.  The current use of Chartmuseuam to store helm charts for applications means if we need to recreate a cluster we will need to retrigger release pipelines for any application running in the staging or production cluster.&lt;/p&gt;
&lt;p&gt;The Jenkins X project itself does not use Chartmuseum, instead it uses Work Load Identity and &lt;a href=&#34;https://github.com/hayorov/helm-gcs&#34;&gt;helm gcs plugin&lt;/a&gt; to write directly to a GCP bucket.  You could consider using this approach but as well Jenkins X will look to resolve this by adding OOTB support for buckets or other external repositories for charts.&lt;/p&gt;
&lt;p&gt;For now you will need to modify your cluster git repository and remove the helmfile repository that points to the internal chartmuseum service.&lt;/p&gt;
&lt;p&gt;For example: &lt;a href=&#34;https://github.com/cb-kubecd/jx3-demo-walk-cluster/blob/ce3fa07834e93e44b2d19882b82a7de51f627ba2/helmfiles/jx-staging/helmfile.yaml#L7-L15&#34;&gt;https://github.com/cb-kubecd/jx3-demo-walk-cluster/blob/ce3fa07834e93e44b2d19882b82a7de51f627ba2/helmfiles/jx-staging/helmfile.yaml#L7-L15&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filepath: &amp;quot;&amp;quot;
environments:
 default:
   values:
   - jx-values.yaml
namespace: jx-staging
repositories:
- name: dev
 url: http://jenkins-x-chartmuseum.jx.svc.cluster.local:8080
releases:
- chart: dev/jx3-golang1
 version: 0.0.4
 name: jx3-golang1
 values:
 - jx-values.yaml
templates: {}
renderedvalues: {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you recover any infrastructure below you will then need to trigger release pipelines again using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx start pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h1&gt;
&lt;p&gt;Cloud Infrastructure is managed by Terraform.  We recommend storing the Terraform state file in a &lt;a href=&#34;https://www.terraform.io/docs/backends/index.html&#34;&gt;secure backend&lt;/a&gt; or use a service like &lt;a href=&#34;https://app.terraform.io/&#34;&gt;Terraform Cloud&lt;/a&gt; as this means you can recover your Cloud Infrastructure in situations where it is deleted.&lt;/p&gt;
&lt;h2 id=&#34;gcp-specific&#34;&gt;GCP specific&lt;/h2&gt;
&lt;p&gt;For Google Container Engine there is a manual task you need to perform because the Terraform module does not manage deleting Cloud DNS Manage Zones that contain record sets.  This is something we hope to address in the future but if you are using DNS you will need to manually delete your Managed Zone, the easiest way is via the GCP console.&lt;/p&gt;
&lt;p&gt;Select your managed zone &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones&#34;&gt;https://console.cloud.google.com/net-services/dns/zones&lt;/a&gt;
&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_select_zone.png&#34; alt=&#34;Select Zone&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select all record set checkbox and click the DELETE RECORD SETS button
&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_delete_recordsets.png&#34; alt=&#34;Delete Record Sets&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now select the DELETE ZONE button at the top&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/gcp_delete_zone.png&#34; alt=&#34;Delete Zone&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;recover&#34;&gt;Recover&lt;/h2&gt;
&lt;p&gt;The Jenkins X terraform modules write some details into a cluster once it is created, this can cause issues when applying the Terraform plan if that cluster is not available.&lt;/p&gt;
&lt;p&gt;You will need to modify the state file so navigate to your local clone of your infrastructure git repository&lt;/p&gt;
&lt;p&gt;Set your bot username and personal access token &lt;code&gt;TF_VAR_&lt;/code&gt;s&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export TF_VAR_jx_bot_username=
export TF_VAR_jx_bot_token=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are using Terraform Cloud you can get you state file by adding this to your &lt;code&gt;main.tf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Enable to work with local and remote states
# run terraform init after uncommenting below
terraform {
  backend &amp;quot;remote&amp;quot; {
    hostname = &amp;quot;app.terraform.io&amp;quot;
    organization = &amp;quot;foo&amp;quot;
    workspaces {
      name = &amp;quot;bar&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you already have a local state file make a backup of it, e.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cp terraform.tfstate terraform.tfstate.backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;now modify the state file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;terraform state rm module.jx
terraform refresh
terraform state pull &amp;gt; terraform.tfstate
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-is-not-recovered&#34;&gt;What is not recovered&lt;/h2&gt;
&lt;p&gt;Any Custom Resources not stored in git will not be recovered, for example Jenkins X Pipeline Activities.  There are solutions like &lt;a href=&#34;https://velero.io/&#34;&gt;Velero&lt;/a&gt; that handles backups which could be used.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Migrate</title>
      <link>https://jenkins-x.io/v3/admin/guides/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/migrate/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>V3: Multi-Cluster</title>
      <link>https://jenkins-x.io/v3/admin/guides/multi-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/multi-cluster/</guid>
      <description>
        
        
        &lt;p&gt;We recommend using separate clusters for your &lt;code&gt;Preprod&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environments. This lets you completely isolate your environments which improves security.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-multi-cluster&#34;&gt;Setting up multi cluster&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Follow the &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/&#34;&gt;administration documentation&lt;/a&gt; to setup a new Development Cluster (or skip this step if already in place).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the mentioned approach at the previous point in order to setup new and additional clusters for the desired remote environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For remote environments (e.g. &lt;code&gt;Preprod&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt;) you typically won&amp;rsquo;t need lots of the development tools such as:
&lt;ul&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;li&gt;Tekton&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;li&gt;Nexus / Bucketrepo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And install only services to run and expose your applications, e.g.:
&lt;ul&gt;
&lt;li&gt;Nginx-ingress&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; for &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;populating Secrets from your secret store&lt;/a&gt; (vault or cloud provider secret manager)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#wave&#34;&gt;push-wave&lt;/a&gt; for automatically performing rolling upgrades when secrets are rotated in your secret store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then when you have a git repository URL for your &lt;code&gt;Preprod&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; cluster, &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/#import-an-existing-project&#34;&gt;import the git repository&lt;/a&gt; like you would any other git repository into your Development cluster using the &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; command (command should be run in the &lt;code&gt;jx&lt;/code&gt; namespace):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx project import --url https://github.com/myowner/my-prod-repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a Pull Request on your development cluster git repository to link to the &lt;code&gt;Preprod&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; git repository on promotions of apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Jenkins X will &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#importing--creating-quickstarts&#34;&gt;push additional configuration files&lt;/a&gt; to the created Pull Request, so it is recommended to wait until the Pull Request is auto-merged and avoid manual intervention.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;changes-to-jx-requirementsyml&#34;&gt;Changes to &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The above &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; should modify your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in your development cluster to reference the remote production/pre-production cluster.&lt;/p&gt;
&lt;p&gt;So your &lt;code&gt;jx-requirements.yml&lt;/code&gt; should have started something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;environments&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: dev
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-dev-environment
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: staging                                                   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;after importing the remote environment via &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; and the pull request merging it should look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;environments&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: dev
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-dev-environment
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: staging
- &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt;: my-prod-repo
  &lt;span style=&#34;color:#66d9ef&#34;&gt;owner&lt;/span&gt;: myowner
  &lt;span style=&#34;color:#66d9ef&#34;&gt;repository&lt;/span&gt;: my-prod-repo
  &lt;span style=&#34;color:#66d9ef&#34;&gt;remoteCluster&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once everything is correctly setup, it will be possible to deploy applications to the newly created remote environment/s.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The multi cluster setup of Jenkins X is designed around the following goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have full control over production and pre-production clusters, choosing exactly what software is installed there
&lt;ul&gt;
&lt;li&gt;there are no development tools installed: no tekton, lighthouse, container registries and no images are built in production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;immutable infrastructure configured via GitOps with maximum traceability and feedback
&lt;ul&gt;
&lt;li&gt;easy to review changes on production via git and not requiring access to production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;development-cluster&#34;&gt;Development Cluster&lt;/h3&gt;
&lt;p&gt;The development cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runs all pipelines on your applications to handle pull requests and performs releases
&lt;ul&gt;
&lt;li&gt;releases of applications create pull requests on remote cluster repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;handles all webhooks for pull requests on remove environments and runs pipelines to validate changes to remote environments
&lt;ul&gt;
&lt;li&gt;reports back to GitHub the status of pull request pipelines&lt;/li&gt;
&lt;li&gt;visualises the pipelines in the &lt;a href=&#34;https://jenkins-x.io/v3/develop/ui/&#34;&gt;usual Jenkins X UIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;supports auto-merge via ChatOps when approved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;remote-cluster&#34;&gt;Remote Cluster&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;runs the &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/operator/&#34;&gt;git operator&lt;/a&gt; which polls the main branch in the remote cluster for changes&lt;/li&gt;
&lt;li&gt;when a change is found a &lt;code&gt;Job&lt;/code&gt; is run to perform the &lt;code&gt;kubectl apply&lt;/code&gt; or &lt;code&gt;helmfile sync&lt;/code&gt; or whatever&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;remote-cluster-recommendations&#34;&gt;Remote Cluster Recommendations&lt;/h2&gt;
&lt;p&gt;We do recommend using the Jenkins X GitOps pipeline approach in &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;production and preproduction for these reasons&lt;/a&gt; then all changes to git result in the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;kubernetes resources being checked into git&lt;/a&gt; so they can be easily reviewed without reviewers needing access to production.&lt;/p&gt;
&lt;p&gt;You may want to reuse existing built in charts such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; for &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;populating Secrets from your secret store&lt;/a&gt; (vault or cloud provider secret manager)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#wave&#34;&gt;push-wave&lt;/a&gt; for automatically performing rolling upgrades when secrets are rotated in your secret store&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-helmfile-sync&#34;&gt;using &lt;code&gt;helmfile sync&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you want to just use something like &lt;code&gt;helmfile sync&lt;/code&gt; to deploy charts in production you could use the following &lt;code&gt;Makefile&lt;/code&gt; in your production/pre-production repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    helmfile sync
    
&lt;span style=&#34;color:#a6e22e&#34;&gt;pr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    helmfile lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;though you will lose &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;these benefits&lt;/a&gt;. You will also need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add your own &lt;a href=&#34;https://github.com/jenkins-x-charts/pusher-wave#quick-start&#34;&gt;pusher-wave integration&lt;/a&gt; for each chart you want to perform a rolling upgrade if the underlying secrets are rotated.&lt;/li&gt;
&lt;li&gt;manually populate all secrets in each remote environments via the underlying secret store as you will not be using the &lt;a href=&#34;https://github.com/jenkins-x/jx-secret&#34;&gt;jx-secret&lt;/a&gt; mechanism built into the default Jenkins X GitOps pipelines for doing this.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Progressive Delivery</title>
      <link>https://jenkins-x.io/v3/admin/guides/progressive-delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/progressive-delivery/</guid>
      <description>
        
        
        &lt;p&gt;Progressive delivery allows you to gradually rollout new versions of your application to an environment using &lt;em&gt;canaries&lt;/em&gt; and gradually giving traffic to the new version until you are happy to fully rollover to the new version.&lt;/p&gt;
&lt;p&gt;Our recommendation for using progressive delivery with Jenkins X is to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; as the progressive delivery controller&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt; as the service mesh to provide advanced load balancing capabilities across internal or external networking&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuring-progressive-delivery&#34;&gt;Configuring Progressive Delivery&lt;/h2&gt;
&lt;p&gt;Please follow the usual &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/&#34;&gt;getting started guide for boot and helm 3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-the-istio-and-flagger-apps&#34;&gt;Add the istio and flagger apps&lt;/h3&gt;
&lt;p&gt;Please make sure your &lt;code&gt;helmfile.yaml&lt;/code&gt; has the necessary apps for using &lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; and &lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt;. Your &lt;code&gt;helmfile.yaml&lt;/code&gt; in your development environment git repository should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;releases&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: jx-labs/istio
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: flagger/flagger
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: flagger/grafana
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: jx-labs/flagger-metrics
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: stable/kuberhealthy
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that you remove &lt;code&gt;stable/nginx-ingress&lt;/code&gt; from your &lt;code&gt;helmfile.yaml&lt;/code&gt; file and ensure the above apps are added at the top of the file.&lt;/p&gt;
&lt;p&gt;Also for now I&amp;rsquo;m afraid you will have to remove the &lt;code&gt;jenkins-x/jxui&lt;/code&gt; chart as its currently not working yet with istio ingress - but we can hopefully get that working soon.&lt;/p&gt;
&lt;h3 id=&#34;enable-istio-based-ingress&#34;&gt;Enable istio based ingress&lt;/h3&gt;
&lt;p&gt;To avoid having 2 &lt;code&gt;LoadBalancer&lt;/code&gt; services for both &lt;code&gt;istio&lt;/code&gt; and &lt;code&gt;nginx&lt;/code&gt; (which costs more money) its easier to switch to pure istio for both internal and external load balancing. This also results in a smaller footprint.&lt;/p&gt;
&lt;p&gt;To do that ensure that &lt;code&gt;kind: istio&lt;/code&gt; is added to the &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in the top level &lt;code&gt;ingress:&lt;/code&gt; section like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: istio
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your development git repository should be setup and be ready. Now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make sure you have setup &lt;a href=&#34;https://jenkins-x.io/v3/guides/secrets/&#34;&gt;any secrets you need to boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it is all complete you should see istio, flagger, grafana pods running in the &lt;code&gt;istio-system&lt;/code&gt; namespace something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
flagger-66dc49cd-g6ptp                  1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
grafana-7d7d7476f6-ff6bm                1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
istio-ingressgateway-598796f4d9-sq8b7   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
istiod-7d9c7bdd6-vjp9j                  1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
kuberhealthy-f54f7f7df-b5gbf            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;          32h
kuberhealthy-f54f7f7df-j6qwt            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
prometheus-b47d8c58c-n974m              2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          32h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From 1.5 onwards istio is pretty small; just 2 pods. Note that those &lt;code&gt;kuberhealthy&lt;/code&gt; pods are optional and just help with reporting.&lt;/p&gt;
&lt;h3 id=&#34;enable-istio-in-stagingproduction&#34;&gt;Enable istio in staging/production&lt;/h3&gt;
&lt;p&gt;If you wish to use a Canary with &lt;a href=&#34;https://flagger.app/&#34;&gt;flagger&lt;/a&gt; and &lt;a href=&#34;https://istio.io/&#34;&gt;istio&lt;/a&gt; in your staging or production namespace you need to make sure you have labelled the namespace correctly to enable istio injection.&lt;/p&gt;
&lt;p&gt;To enable istio in staging:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl label namespace jx-staging istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To enable istio in production:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl label namespace jx-production istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;defaulting-to-use-canary&#34;&gt;Defaulting to use Canary&lt;/h3&gt;
&lt;p&gt;Run the following command to default to using canary deployments and horizontal pod autoscaling whenever you &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quickstart&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import a project&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx edit deploy --team --canary --hpa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will enable all new quickstarts and imported projects to use canary rollouts and use horizontal pod autoscaling in all environments.&lt;/p&gt;
&lt;p&gt;You can switch the defaults back again at any time or configure any app to change its defaults by running &lt;code&gt;jx edit deploy&lt;/code&gt; inside a git clone of an application.&lt;/p&gt;
&lt;h3 id=&#34;enablingdisabling-canaryhpa-in-an-environment&#34;&gt;Enabling/Disabling Canary/HPA in an Environment&lt;/h3&gt;
&lt;p&gt;If you want to enable/disable canary or horizontal pod autoscaling for a specific app in an environment then you can &lt;a href=&#34;https://jenkins-x.io/v3/develop/apps/#customising-charts&#34;&gt;follow the app customisation approach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Assuming your app is called &lt;code&gt;myapp&lt;/code&gt; then in the git repository for the environment (e.g. &lt;code&gt;Staging&lt;/code&gt;) you can add/edit a file called &lt;code&gt;apps/mychart/values.yaml&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;canary&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;hpa&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;you can enable/disable those 2 flags for canary releases and horizontal pod autoscaler at any point in any environment.&lt;/p&gt;
&lt;h2 id=&#34;using-progressive-delivery&#34;&gt;Using Progressive Delivery&lt;/h2&gt;
&lt;p&gt;Once you have followed the above steps create a &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;quickstart application&lt;/a&gt; in the usual way.&lt;/p&gt;
&lt;p&gt;As you merge changes to the master branch of your application Jenkins X will create a new release and &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/using/#how-does-promotion-actually-work&#34;&gt;promote it to the staging environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However if Canary deployment is enabled your new version will gradually be rolled out progressively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the defaults are that 20% of the traffic will go to the new version&lt;/li&gt;
&lt;li&gt;flagger will keep monitoring the metrics used in the Canary resource to determine if the canary is good&lt;/li&gt;
&lt;li&gt;after the configured time period is over the traffic will be increased to 40% then 60%&lt;/li&gt;
&lt;li&gt;eventually if things look good the new version will fully rollout to 100% traffic&lt;/li&gt;
&lt;li&gt;if anything goes bad during the rollout time period the old version is restored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is an excellent &lt;a href=&#34;https://youtu.be/7eePqtxW7NM&#34;&gt;video showing this in action&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Jenkins</title>
      <link>https://jenkins-x.io/v3/admin/guides/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/jenkins/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/v3/guides/jx3/&#34;&gt;Jenkins X version 3 &lt;/a&gt; includes support for the interoperability of &lt;a href=&#34;https://jenkins.io&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/v3/about/&#34;&gt;Jenkins X&lt;/a&gt; and &lt;a href=&#34;https://github.com/tektoncd/pipeline&#34;&gt;Tekton&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

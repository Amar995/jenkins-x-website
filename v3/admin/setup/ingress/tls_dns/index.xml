<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ TLS and DNS</title>
    <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/</link>
    <description>Recent content in TLS and DNS on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Demo</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/demo/</guid>
      <description>
        
        
        &lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;The following demo walks you through how to setup TLS and DNS:&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OqsSqZqF0gY&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Background</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/background/</guid>
      <description>
        
        
        &lt;p&gt;To achieve this we will use a couple of open source projects to help enable automated DNS for your applications.&lt;/p&gt;
&lt;p&gt;For this guide we are going to assume you own a domain called &lt;code&gt;foo.io&lt;/code&gt; which is managed by Google Cloud DNS, if it is not see &lt;a href=&#34;https://jenkins-x.io/v3/guides/infra/google_cloud_dns&#34;&gt;configure cloud dns to manage a domain&lt;/a&gt;. A similar procedure is described for an external registrar, see the Azure section.&lt;/p&gt;
&lt;p&gt;A common requirement for domains is to have production services accessed using a parent / &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-custom-domains-and-github-pages#using-an-apex-domain-for-your-github-pages-site&#34;&gt;apex domain&lt;/a&gt;
for example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://foo.com&#34;&gt;https://foo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many organisations have extra requirements for development and test multi cluster environments to access services at&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.foo.com&#34;&gt;https://dev.foo.com&lt;/a&gt;
and
&lt;a href=&#34;https://staging.foo.com&#34;&gt;https://staging.foo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These use subdomains.&lt;/p&gt;
&lt;p&gt;In this guide below there is a prerequisite that you must already have a domain which is managed by your cloud provider, this is so that you can choose whichever of the scenarios above you need.  It also means the dns management of the apex domain happens outside of a single cluster installation and can be shared by multiple installations using a subdomain.&lt;/p&gt;
&lt;p&gt;Jenkins X services will have URLs like &lt;code&gt;https://hook-jx.dev.foo.io&lt;/code&gt;.  The jx-requirements.yml &lt;code&gt;namespaceSubDomain:&lt;/code&gt; of &lt;code&gt;-jx&lt;/code&gt; which is in the cluster git repository refers to the Kubernetes namespace the service is running in, this avoids clashes of the same application running in different namespaces in the same cluster.&lt;/p&gt;
&lt;p&gt;To start with we are focussed on GCP and Azure but will expand to other cloud providers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Azure</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/azure/</guid>
      <description>
        
        
        &lt;h2 id=&#34;dns-zone-creation&#34;&gt;DNS zone creation&lt;/h2&gt;
&lt;p&gt;Create a common resource group dedicated to all your DNS zones:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az group create --name rg-dns --location westeurope
{
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;westeurope&amp;quot;,
  &amp;quot;managedBy&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;
  },
  &amp;quot;tags&amp;quot;: null,
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Resources/resourceGroups&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create an Azure DNS zone with the name of your domain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az network dns zone create -g rg-dns -n foo.io
{
  &amp;quot;etag&amp;quot;: &amp;quot;00000002-0000-0000-e2d9-80ef0df0d601&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;global&amp;quot;,
  &amp;quot;maxNumberOfRecordSets&amp;quot;: 10000,
  &amp;quot;name&amp;quot;: &amp;quot;foo.io&amp;quot;,
  &amp;quot;nameServers&amp;quot;: [
    &amp;quot;ns1-05.azure-dns.com.&amp;quot;,
    &amp;quot;ns2-05.azure-dns.net.&amp;quot;,
    &amp;quot;ns3-05.azure-dns.org.&amp;quot;,
    &amp;quot;ns4-05.azure-dns.info.&amp;quot;
  ],
  &amp;quot;numberOfRecordSets&amp;quot;: 2,
  &amp;quot;registrationVirtualNetworks&amp;quot;: null,
  &amp;quot;resolutionVirtualNetworks&amp;quot;: null,
  &amp;quot;resourceGroup&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;tags&amp;quot;: {},
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Network/dnszones&amp;quot;,
  &amp;quot;zoneType&amp;quot;: &amp;quot;Public&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;domain-dns-servers-configuration&#34;&gt;Domain DNS servers configuration&lt;/h2&gt;
&lt;p&gt;In your registrar admin panel, find the DNS servers section of the domain you want to use and replace the default ones by those from the first step:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/registrar_dns_servers.png&#34; alt=&#34;dns servers section&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/registrar_dns_servers_update.png&#34; alt=&#34;dns servers update&#34;&gt;&lt;/p&gt;
&lt;p&gt;Test the DNS delegation by adding a A record in the Azure DNS zone you&amp;rsquo;ve previously created:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ az network dns record-set a add-record -g rg-dns -z foo.io -n potato -a 1.2.3.4
{
  &amp;quot;arecords&amp;quot;: [
    {
      &amp;quot;ipv4Address&amp;quot;: &amp;quot;1.2.3.4&amp;quot;
    }
  ],
  &amp;quot;etag&amp;quot;: &amp;quot;a80b3397-dd76-4ad8-a789-0fd1dbd02d99&amp;quot;,
  &amp;quot;fqdn&amp;quot;: &amp;quot;potato.foo.io.&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io/A/potato&amp;quot;,
  &amp;quot;metadata&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;potato&amp;quot;,
  &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;,
  &amp;quot;resourceGroup&amp;quot;: &amp;quot;rg-dns&amp;quot;,
  &amp;quot;targetResource&amp;quot;: {
    &amp;quot;id&amp;quot;: null
  },
  &amp;quot;ttl&amp;quot;: 3600,
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Network/dnszones/A&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then check it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nslookup potato.foo.io
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	potato.foo.io
Address: 1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can finally remove this test A record:
&lt;code&gt;$ az network dns record-set a remove-record --resource-group rg-dns --zone-name foo.io --record-set-name &amp;quot;potato&amp;quot; --ipv4-address 1.2.3.4&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;cluster-creation&#34;&gt;Cluster creation&lt;/h2&gt;
&lt;p&gt;Generate a new infrastructure repository and a new a new cluster repository, then put this at the end of your &lt;strong&gt;infrastructure&lt;/strong&gt; repository &lt;code&gt;values.auto.tfvars&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subdomain = &amp;quot;jx&amp;quot;
apex_domain = &amp;quot;foo.io&amp;quot;
apex_domain_integration_enabled = &amp;quot;true&amp;quot;
apex_resource_group_name = &amp;quot;rg-dns&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commit these changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add values.auto.tfvars
$ git commit -m &amp;quot;chore: DNS configuration&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And create the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform init
$ terraform plan
$ terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cluster-configuration&#34;&gt;Cluster configuration&lt;/h2&gt;
&lt;p&gt;Once the cluster creation and the boot job is completed, configure TLS in &lt;code&gt;jx-requirements.yaml&lt;/code&gt; in your &lt;strong&gt;cluster&lt;/strong&gt; repository (don&amp;rsquo;t forget to retrieve the boot changes before with &lt;code&gt;git pull&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ingress:
    domain: jx.foo.io
    externalDNS: true
    kind: ingress
    namespaceSubDomain: -jx.
    tls:
      email: &amp;quot;contact@foo.io&amp;quot;
      enabled: true
      production: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commit and push these changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add values.auto.tfvars
$ git commit -m &amp;quot;chore: domain and TLS configuration&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the boot job, verify with:
&lt;code&gt;jx verify tls hook-jx.jx.foo.io  --production=false --timeout 20m&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re happy with your changes, you can set &lt;code&gt;production&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to get a real certificate, then after the boot job, verify it with:
&lt;code&gt;jx verify tls hook-jx.jx.foo.io  --production=true --timeout 20m&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Google</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/google/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cluster created using Jenkins X &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/gke/&#34;&gt;GCP Terraform getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;own a domain and have GCP manage it, &lt;a href=&#34;https://jenkins-x.io/v3/guides/infra/google_cloud_dns&#34;&gt;configure cloud dns to manage a domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;latest Jenkins X CLI, Infrastructure and Cluster git repository updates &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrade&#34;&gt;upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cloud-infrastructure&#34;&gt;Cloud Infrastructure&lt;/h3&gt;
&lt;p&gt;First we will configure the cloud infrastructure requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a GCP Service Account with the &lt;code&gt;dns.admin&lt;/code&gt; role, see &lt;a href=&#34;https://cloud.google.com/iam/docs/understanding-roles#dns-roles&#34;&gt;here&lt;/a&gt; for more information&lt;/li&gt;
&lt;li&gt;a managed cloud dns zone, see &lt;a href=&#34;https://cloud.google.com/dns/docs/zones&#34;&gt;here&lt;/a&gt; for more information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To satisfy these requirements go to your infrastructure repository (contains Terraform main.tf) and add to your &lt;code&gt;values.auto.tfvars&lt;/code&gt; the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;apex_domain = &amp;#34;foo.io&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most people prefer to use a subdomain for a specific installation rather than purchasing one domain per cluster.  For example in a multi cluster setup you will probably want all using the same parent domain but two clusters using a different subdomain like development.foo.io, staging.foo.io leaving production using just the parent domain foo.io.&lt;/p&gt;
&lt;p&gt;To use a subdomain for this cluster add the following configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;subdomain     = &amp;#34;dev&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will now add details that will be passed to Jenkins X as requirements when booting the cluster.&lt;/p&gt;
&lt;p&gt;Add these to &lt;code&gt;values.auto.tfvars&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;lets_encrypt_production = true&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;tls_email               = your_email_address@googlegroups.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now apply these changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add values.auto.tfvars
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;feat: enable DNS cloud resources&amp;#39;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may want to set two environment variables here so that Terraform does not prompt for values&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export TF_VAR_jx_bot_username=
export TF_VAR_jx_bot_token=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;now run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If using a subdomain you will now see your managed zone in GCP &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once terraform has finished for now there is a manual trigger of the Jenkins X cluster repository required.  This will not be needed in the future but for now please make a dummy commit on your cluster git repository and follow the boot job as in applies the updates to your cluster.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To follow the jx boot installation using the instructions given in the terraform output, connect to the cluster and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a timing issue with cert-manager and the admission controller so the first boot job may fail but second will run automatically and succeed.&lt;/p&gt;
&lt;p&gt;It can take a short while for DNS to propagate so you may need to wait for 5 - 10 minutes.  &lt;a href=&#34;https://dnschecker.org/&#34;&gt;https://dnschecker.org/&lt;/a&gt; is a useful way to check the status of DNS propagating.&lt;/p&gt;
&lt;p&gt;To verify using the CLI run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get ingress -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and use the hook URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx verify tls hook-jx.dev.foo.io  --production&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false --timeout 20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should be able to verify the TLS certificate from Lets Encrypt in your browser (beware of browser caching if you don&amp;rsquo;t see any changes)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/v3/working_tls.png&#34; alt=&#34;Working TLS&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once this is working you can switch any of the configuration using your cluster git repository and change the jx-requirements.yaml, e.g. toggling the cert-manager production service or editing the email address used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dev.foo.io&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespaceSubDomain&lt;/span&gt;: -&lt;span style=&#34;color:#ae81ff&#34;&gt;jx.&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;joe@gmail.com&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git commit and push the change back to your remote git repository and follow the installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will now be issued a valid TLS certificate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx verify tls hook-jx.dev.foo.io  --production&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true --timeout 20m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Cluster</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/cluster/</guid>
      <description>
        
        
        &lt;p&gt;Next we will configure the cluster requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns#externaldns&#34;&gt;external-dns&lt;/a&gt; - Kubernetes controller which watches for new Kubernetes Ingress resources and creates A records in Google Cloud DNS which will propagate globally across the internet&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://cert-manager.io/docs/&#34;&gt;cert-manager&lt;/a&gt; - Kubernetes controller which watches for requests to ask &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; to issue a new wildcard TLS certificate for your domain and will manage this including renewals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cert-manager will use the cluster issuer to request a TLS certificate.  A Kubernetes secret will be automatically created and contain the TLS cert.  The nginx controllers in the &lt;code&gt;nginx&lt;/code&gt; namespace will use this secret in the &lt;code&gt;jx&lt;/code&gt; namespace for the default SSL certificate which will automatically enable TLS for all applications in your cluster.&lt;/p&gt;
&lt;p&gt;The domain from setting up your infrastructure in step one should appear in the &lt;code&gt;jx-requirements.yml&lt;/code&gt; of you cluster git repo.  Next configure your TLS options, update your &lt;code&gt;jx-requirements.yml&lt;/code&gt; with below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; this is the top level &lt;code&gt;ingress:&lt;/code&gt; section and &lt;strong&gt;NOT&lt;/strong&gt; in the &lt;code&gt;environments:&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ingress:
  domain: dev.foo.io
  externalDNS: true
  namespaceSubDomain: -jx.
  tls:
    email: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;joe@gmail.com&amp;#34;&lt;/span&gt;
    enabled: true
    production: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When first installing set &lt;code&gt;tls.production=false&lt;/code&gt; so you use the Lets Encrypt staging service which allows for more API calls before rate limiting requests.  They will issue a self-signed certificate so once happy everything is working change this to &lt;code&gt;tls.production=true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Helmfile is not able to skip insecure TLS when adding helm repositories, therefore staging certificates will not work with chartmuseum that is running in the cluster.  Therefore once you have verified cert-manager can issue certificates from staging, switch to the production service.&lt;/p&gt;
&lt;p&gt;Jenkins X uses a version stream to rollout tested versions of images, charts and default configuration.  The &lt;code&gt;jx-boot&lt;/code&gt; job will apply these versions to your helmfile but you can also run the step yourself to see the defaults.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx gitops helmfile resolve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add helmfile.yaml
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;feat: enable DNS and TLS&amp;#39;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now tail the admin logs and wait for the job to complete&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx admin logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Multiple domains</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/tls/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Example: Use different domains for production and staging environments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;acme&lt;/code&gt; chart to &lt;em&gt;helmfiles/jx-production/helmfile.yaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;chart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx3/acme&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.19&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;condition&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jxRequirementsIngressTLS.enabled&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;acme-jx&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-production&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;values&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-values.yaml&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;acme-values.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a file &lt;em&gt;helmfiles/jx-production/acme-values.yaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;issuer&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;cluster&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Do the same for other environments, e.g. staging. Make sure the correct namespace is set.&lt;/p&gt;
&lt;p&gt;Add ingress and tls configuration to the environments in &lt;em&gt;jx-requirements.yaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;environments&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staging.foo.io&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin@foo.com&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tls-staging-foo-io-p&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staging&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foo.io&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin@foo.com&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tls-foo-io-p&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure to use the correct &lt;code&gt;secretName&lt;/code&gt;, as it&amp;rsquo;s being generated (&lt;a href=&#34;https://github.com/jenkins-x/acme/blob/00eab12ab28eb726544885cd471f10b99d420198/charts/acme/templates/cert-manager-prod-certificate.yaml#L10&#34;&gt;production&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/acme/blob/00eab12ab28eb726544885cd471f10b99d420198/charts/acme/templates/cert-manager-staging-certificate.yaml#L10&#34;&gt;staging&lt;/a&gt;) by the &lt;code&gt;acme&lt;/code&gt; chart.&lt;/p&gt;
&lt;p&gt;Since you don&amp;rsquo;t need &lt;code&gt;namespaceSubDomain&lt;/code&gt; any more, set it to &lt;code&gt;.&lt;/code&gt; in the root ingress config.&lt;/p&gt;
&lt;p&gt;Commit and push the changes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chore: update ingress config&amp;#39;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the pipeline has successfully run, you should have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;ClusterIssuer&lt;/code&gt; for the dev domain&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Issuer&lt;/code&gt; for production in the namespace &lt;code&gt;jx-production&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Issuer&lt;/code&gt; for staging in the namespace &lt;code&gt;jx-staging&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applications should pick up the secret name from &lt;code&gt;jx-values.yaml&lt;/code&gt; and use the correct certificate.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: FAQ</title>
      <link>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/ingress/tls_dns/faq/</guid>
      <description>
        
        
        &lt;h2 id=&#34;what-if-i-have-a-chartmuseum-with-charts-running-using-nipio&#34;&gt;What if I have a chartmuseum with charts running using nip.io?&lt;/h2&gt;
&lt;p&gt;It is best to comment out your Jenkins X chartmuseum repository and charts from your helmfile until your new domain and ingress is working.  Then uncomment and make sure you update the chartmuseum URL to your new one.&lt;/p&gt;
&lt;h2 id=&#34;what-if-i-use-a-subdomain-with-an-apex-domain-in-a-different-gcp-project&#34;&gt;What if I use a subdomain with an apex domain in a different GCP project?&lt;/h2&gt;
&lt;p&gt;When using a subdomain Terraform will create a managed zone in GCP, add the recordsets to your parent / apex domain.&lt;/p&gt;
&lt;p&gt;If the GCP managed zone for your apex domain is in a different GCP project than the project that your current installation the you will need to set in your infrastructure repository the terraform variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parent_domain_gcp_project: [your GCP project that is managing your apex domain]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you do not have permission to update the recordset of the apex domain then you will need to manually update it after getting the nameservers created for your subdomain managed zone and disable the automatic way using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apex_domain_integration_enabled: false
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-can-i-remove-the-namespace-subdomain-eg--jx-from-my-urls&#34;&gt;How can I remove the namespace subdomain (e.g. -jx.) from my URLs?&lt;/h2&gt;
&lt;p&gt;In your cluster git repository find the &lt;code&gt;namespaceSubdomain&lt;/code&gt; property in your jx-requirements.yml file and change its value to &lt;code&gt;namespaceSubdomain: &amp;quot;.&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Be aware that the same application deployed in multiple namespaces will end up with the same URL if you change &lt;code&gt;namespaceSubdomain&lt;/code&gt; to be the same for all environments.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-check-if-cert-manager-has-issued-a-certificate&#34;&gt;How can I check if cert-manager has issued a certificate?&lt;/h2&gt;
&lt;p&gt;You can check the status of the certificate by running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get cert -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;kubectl describe cert -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if &lt;code&gt;Ready&lt;/code&gt; continues to be &lt;code&gt;false&lt;/code&gt; after 10-15 mins you can check on the request using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get certificaterequest -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;kubectl describe certificaterequest -n jx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-can-i-install-the-charts-if-not-using-terraform-to-autamatically-enable-them&#34;&gt;How can I install the charts if not using terraform to autamatically enable them?&lt;/h2&gt;
&lt;p&gt;If you are not using the Jenkins X Terraform above then you can manually update your cluster git repository and add the charts needed.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

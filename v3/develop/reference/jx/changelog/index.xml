<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ jx changelog</title>
    <link>https://jenkins-x.io/v3/develop/reference/jx/changelog/</link>
    <description>Recent content in jx changelog on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/develop/reference/jx/changelog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: jx changelog create</title>
      <link>https://jenkins-x.io/v3/develop/reference/jx/changelog/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/reference/jx/changelog/create/</guid>
      <description>
        
        
        &lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jx changelog create
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;Creates a Changelog for the latest tag&lt;/p&gt;
&lt;p&gt;This command will generate a Changelog as markdown for the git commit range given. If you are using GitHub it will also update the GitHub Release with the changelog. You can disable that by passing&amp;rsquo;&amp;ndash;update-release=false&#39;&lt;/p&gt;
&lt;p&gt;If you have just created a git tag this command will try default to the changes between the last tag and the previous one. You can always specify the exact Git references (tag/sha) directly via &amp;lsquo;&amp;ndash;previous-rev&amp;rsquo; and &amp;lsquo;&amp;ndash;rev&amp;rsquo;&lt;/p&gt;
&lt;p&gt;The changelog is generated by parsing the git commits. It will also detect any text like &amp;lsquo;fixes #123&amp;rsquo; to link to issue fixes. You can also use Conventional Commits notation: &lt;a href=&#34;https://conventionalcommits.org/&#34;&gt;https://conventionalcommits.org/&lt;/a&gt; to get a nicer formatted changelog. e.g. using commits like &amp;lsquo;fix:(my feature) this my fix&amp;rsquo; or &amp;lsquo;feat:(cheese) something&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This command also generates a Release Custom Resource Definition you can include in your helm chart to give metadata about the changelog of the application along with metadata about the release (git tag, url, commits, issues fixed etc). Including this metadata in a helm charts means we can do things like automatically comment on issues when they hit Staging or Production; or give detailed descriptions of what things have changed when using GitOps to update versions in an environment by referencing the fixed issues in the Pull Request.&lt;/p&gt;
&lt;p&gt;You can opt out of the release YAML generation via the &amp;lsquo;&amp;ndash;generate-yaml=false&amp;rsquo; option&lt;/p&gt;
&lt;p&gt;To update the release notes on your git provider needs a git API token which is usually provided via the Tekton git authentication mechanism.&lt;/p&gt;
&lt;p&gt;Apart from using your git provider as the issue tracker there is also support for Jira. You then specify issues in commit messages with the issue key that looks like ABC-123. You can configure this in in similar ways as environments, see &lt;a href=&#34;https://jenkins-x.io/v3/develop/environments/config/&#34;&gt;https://jenkins-x.io/v3/develop/environments/config/&lt;/a&gt;. An example configuration:&lt;/p&gt;
&lt;p&gt;issueProvider:
jira:
serverUrl: &lt;a href=&#34;https://example.atlassian.net&#34;&gt;https://example.atlassian.net&lt;/a&gt;
userName: &lt;a href=&#34;mailto:user@example.com&#34;&gt;user@example.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jira API token is taken from the environment variable JIRA_API_TOKEN. Can be populated using the jx-boot-job-env-vars secret.&lt;/p&gt;
&lt;p&gt;By default jx commands look for a file &amp;lsquo;~/.jx/gitAuth.yaml&amp;rsquo; to find the API tokens for Git servers. You can use &amp;lsquo;jx create git token&amp;rsquo; to create a Git token.&lt;/p&gt;
&lt;p&gt;Alternatively if you are running this command inside a CI server you can use environment variables to specify the username and API token.
e.g. define environment variables GIT_USERNAME and GIT_API_TOKEN&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# generate a changelog on the current source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx-changelog create
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# specify the version to use&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx-changelog create --version 1.2.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# specify the version and a header template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx-changelog create --header-file docs/dev/changelog-header.md --version 1.2.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -b, --batch-mode                   Runs in batch mode without prompting for user input
      --build string                 The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the &amp;#39;$BUILD_NUMBER&amp;#39; environment variable
      --changelog-separator string   the separator to use when splitting commit message from changelog in the pull request body. Default to ----- or if set the CHANGELOG_SEPARATOR environment variable
      --conditional-release          Wrap the Release YAML in the helm Capabilities.APIVersions.Has if statement (default true)
  -c, --crd                          Generate the CRD in the chart
      --crd-yaml-file string         the name of the file to generate the Release CustomResourceDefinition YAML (default &amp;#34;release-crd.yaml&amp;#34;)
      --dir string                   the directory to search for the .git to discover the git source URL (default &amp;#34;.&amp;#34;)
      --draft                        The git provider release is marked as draft
      --fail-if-no-commits           Do we want to fail the build if we don&amp;#39;t find any commits to generate the changelog
      --footer string                The changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/
      --footer-file string           The file name of the changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/
  -y, --generate-yaml                Generate the Release YAML in the local helm chart
      --git-kind string              the kind of git server to connect to
      --git-server string            the git server URL to create the git provider client. If not specified its defaulted from the current source URL
      --git-token string             the git token used to operate on the git repository
      --header string                The changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/
      --header-file string           The file name of the changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/
  -h, --help                         help for create
      --include-changelog            Should changelogs from pull requests be included. Defaults to true (default true)
      --include-merge-commits        Include merge commits when generating the changelog
      --log-level string             Sets the logging level. If not specified defaults to $JX_LOG_LEVEL
      --no-dev-release               Disables the generation of Release CRDs in the development namespace to track releases being performed
      --output-markdown string       Put the changelog output in this file
  -o, --overwrite                    overwrites the Release CRD YAML file if it exists
      --prerelease                   The git provider release is marked as a pre-release
      --previous-date string         the previous date to find a revision in format &amp;#39;MonthName dayNumber year&amp;#39;
  -p, --previous-rev string          the previous tag revision
      --release-yaml-file string     the name of the file to generate the Release YAML (default &amp;#34;release.yaml&amp;#34;)
      --rev string                   the current tag revision
      --status-path string           The path to the deployment status file used to calculate dependency updates. Defaults to docs/releases.yaml (default &amp;#34;docs/releases.yaml&amp;#34;)
      --tag-prefix string            prefix to filter on when searching for version tags
  -t, --templates-dir string         the directory containing the helm chart templates to generate the resources
      --update-release               Should we update the release on the Git repository with the changelog (default true)
      --verbose                      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace
  -v, --version string               The version to release
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-changelog&#34;&gt;jenkins-x-plugins/jx-changelog&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: jx changelog version</title>
      <link>https://jenkins-x.io/v3/develop/reference/jx/changelog/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/reference/jx/changelog/version/</guid>
      <description>
        
        
        &lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jx changelog version
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;Displays the version of this command&lt;/p&gt;
&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -h, --help   help for version
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;source&#34;&gt;Source&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-changelog&#34;&gt;jenkins-x-plugins/jx-changelog&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

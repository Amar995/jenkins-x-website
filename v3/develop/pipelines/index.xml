<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Pipelines</title>
    <link>https://jenkins-x.io/v3/develop/pipelines/</link>
    <description>Recent content in Pipelines on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/develop/pipelines/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Editing</title>
      <link>https://jenkins-x.io/v3/develop/pipelines/editing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/pipelines/editing/</guid>
      <description>
        
        
        &lt;h2 id=&#34;source-layout&#34;&gt;Source layout&lt;/h2&gt;
&lt;p&gt;If you &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrade/#cluster&#34;&gt;upgrade your cluster to the latest version stream&lt;/a&gt; then you will find if you &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/#create-a-new-project-from-a-quickstart&#34;&gt;create a new quickstart&lt;/a&gt; that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt; directory contains the default CI/CD pipelines for Jenkins X with these files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;triggers.yaml&lt;/code&gt; to define the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config&#34;&gt;TriggerConfig&lt;/a&gt; which defines the &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/using/chatops/#what-is-chatops&#34;&gt;ChatOps&lt;/a&gt; and triggering configuration via a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec&#34;&gt;spec field&lt;/a&gt; which defines &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; (i.e. Pull Request and Release triggers).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pullrequest.yaml&lt;/code&gt; defines the Pull Request pipeline using a Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release.yaml&lt;/code&gt; defines the Release pipeline using a Tekton Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; files are no longer used by default in new quickstarts instead we use the above. Note if you have projects using &lt;code&gt;jenkins-x.yml&lt;/code&gt; files they are still supported if you &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/#import-an-existing-project&#34;&gt;import them into v3&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-v2-tekton-converter/blob/main/README.md&#34;&gt;use this tool to migrate them to tekton pipelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editing-pipelines&#34;&gt;Editing pipelines&lt;/h2&gt;
&lt;p&gt;You can now easily modify any of the &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources in any git repository - just look in each folder inside &lt;code&gt;.lighthouse&lt;/code&gt; for the YAML files to edit.&lt;/p&gt;
&lt;p&gt;e.g. for the default Jenkins X CI/CD pipelines edit either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pullrequest.yaml&lt;/code&gt; to edit the Pull Request &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release.yaml&lt;/code&gt; to edit the Release &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test out changes to the Pull Request pipeline by submitting changes in a Pull Request. Changes to a release only take place after merging the change to the main branch.&lt;/p&gt;
&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/catalog/#viewing-the-effective-pipeline&#34;&gt;viewing the effective pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally&#34;&gt;overriding a pipeline step locally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linting&#34;&gt;Linting&lt;/h3&gt;
&lt;p&gt;You can run the &lt;a href=&#34;https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_lint.md#jx-pipeline-lint&#34;&gt;jx pipeline lint&lt;/a&gt; command from a clone of your repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will verify that have not made any typos.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/catalog/#viewing-the-effective-pipeline&#34;&gt;view the effective pipeline&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ide-support&#34;&gt;IDE support&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; or &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;Goland&lt;/a&gt; you might find the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14096-tekton-pipelines-by-red-hat&#34;&gt;RedHat&amp;rsquo;s intellij-tekton plugin&lt;/a&gt; useful for editing pipelines with schema validation and completion.&lt;/p&gt;
&lt;p&gt;If you use &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; you may want to try &lt;a href=&#34;https://github.com/redhat-developer/vscode-tekton#tekton-pipelines-extension--&#34;&gt;Red Hat&amp;rsquo;s Tekton Pipelines Extension tekton&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-new-taskspipelines-by-hand&#34;&gt;Add new tasks/pipelines by hand&lt;/h2&gt;
&lt;p&gt;You can add new pipelines by hand into a new folder inside &lt;code&gt;.lighthouse&lt;/code&gt; at any time.&lt;/p&gt;
&lt;p&gt;To setup a &lt;em&gt;trigger&lt;/em&gt; so that &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; will start your pipeline on a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; (i.e. for Pull Requests) or for &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; (i.e. releases on main branches) you need to also add a &lt;code&gt;triggers.yaml&lt;/code&gt; file which uses the lighthouse &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config&#34;&gt;trigger config file file format&lt;/a&gt; with &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec&#34;&gt;this spec field&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You could look at the default &lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt; directory to see how all this works. The &lt;code&gt;triggers.yaml&lt;/code&gt; file then refers to the tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; files via the &lt;code&gt;source:&lt;/code&gt; attribute in a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; entry.&lt;/p&gt;
&lt;h2 id=&#34;changing-the-triggers&#34;&gt;Changing the triggers&lt;/h2&gt;
&lt;p&gt;You can modify the &lt;code&gt;.lighthouse/*/triggers.yaml&lt;/code&gt; file to modify the  &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; entries to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;customise the &lt;code&gt;rerun_command&lt;/code&gt; or &lt;code&gt;trigger&lt;/code&gt; ChatOps comments for &lt;code&gt;presubmits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;configure the &lt;code&gt;branches&lt;/code&gt; patterns for &lt;code&gt;postsubmit&lt;/code&gt; triggers&lt;/li&gt;
&lt;li&gt;add new entries for new pipelines; or pipelines with different &lt;code&gt;pipeline_run_params&lt;/code&gt; entries to parameterise existing &lt;code&gt;PipelineRun&lt;/code&gt; files differently&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;diagnosing-problems&#34;&gt;Diagnosing problems&lt;/h2&gt;
&lt;p&gt;If you edit pipelines or lighthouse trigger files and things don&amp;rsquo;t work there&amp;rsquo;s a couple of places the errors may show up.&lt;/p&gt;
&lt;p&gt;We will hopefully add much better linting/error messages on Pull Requests soon to give you better and faster feedback.&lt;/p&gt;
&lt;p&gt;Until then you could look in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;lighthouse-webhooks-*&lt;/code&gt; pod(s) which take the webhooks from your git provider and convert them into &lt;code&gt;lighthousejob&lt;/code&gt; resources&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;lighthouse-tekton-controller-*&lt;/code&gt; pod(s) which watch for &lt;code&gt;lighthousejob&lt;/code&gt; resources and create the Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;tekton-controller-*&lt;/code&gt;  pod(s) watches for Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources and conver them into Kubernetes &lt;code&gt;Pod&lt;/code&gt; resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any errors will usually be recorded in the &lt;code&gt;status&lt;/code&gt; field of the resource that has issues (&lt;code&gt;lighthousejob&lt;/code&gt; or &lt;code&gt;pipelinerun&lt;/code&gt;).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Demo</title>
      <link>https://jenkins-x.io/v3/develop/pipelines/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/pipelines/demo/</guid>
      <description>
        
        
        &lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;The following demo walks through how to trigger tekton pipelines and create custom pipelines:&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/cJcwV4jgE0Y&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Catalog</title>
      <link>https://jenkins-x.io/v3/develop/pipelines/catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/pipelines/catalog/</guid>
      <description>
        
        
        &lt;p&gt;As we create more and more software we tend to get an explosion in the number of git repositories and microservices. Each repository needs automated CI and CD; but how do we manage the hundreds of pipelines we need - while also making it easy to share pipelines across repositories and allowing each repository to customize when required?&lt;/p&gt;
&lt;p&gt;Jenkins X solves this as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the pipelines, tasks and steps are defined via &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Tekton YAML&lt;/a&gt; letting you use any tekton tooling such as &lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/#ide-support&#34;&gt;IDE completion and validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we support an &lt;code&gt;image: uses:sourceURI&lt;/code&gt; notation that lets you inherit steps from a git repository without having to copy/paste the source code aross repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example if you create a new &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/&#34;&gt;quickstart&lt;/a&gt; pipeline may look like this (slightly condensed)&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;tasks&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;from-build-pack&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;stepTemplate&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;next-version&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-variables&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-npm-install&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-npm-test&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-container-build&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-changelog&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-helm-release&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-jx-promote&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may wonder what those &lt;code&gt;uses:&lt;/code&gt; strings mean.&lt;/p&gt;
&lt;h3 id=&#34;referencing-a-task-or-step&#34;&gt;Referencing a Task or Step&lt;/h3&gt;
&lt;p&gt;Rather than copy pasting &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;task and step YAML&lt;/a&gt; between repositories we can refer to a &lt;code&gt;Task&lt;/code&gt; or a &lt;code&gt;Step&lt;/code&gt; in a Task as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;refer to all the steps in a task by using&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:sourceURI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;refer to a single &lt;em&gt;named&lt;/em&gt; step from a task&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;stepTemplate&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:sourceURI&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mystep&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sourceuri-notation&#34;&gt;SourceURI notation&lt;/h3&gt;
&lt;p&gt;The source URI notation is enabled by a special &lt;code&gt;image&lt;/code&gt; prefix of &lt;strong&gt;uses:&lt;/strong&gt; on step or if an image on a step is blank and the &lt;code&gt;stepTemplate:&lt;/code&gt; has an &lt;code&gt;image&lt;/code&gt; prefix of &lt;strong&gt;uses:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We borrowed this idea from &lt;a href=&#34;https://github.com/google/ko&#34;&gt;ko&lt;/a&gt; and &lt;a href=&#34;https://github.com/mattmoor/mink&#34;&gt;mink&lt;/a&gt;; the idea of using a custom prefix on image URIs.&lt;/p&gt;
&lt;p&gt;You can refer to the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/pipelines.md&#34;&gt;detailed documentation&lt;/a&gt; on how the step inheritence and overriding works.&lt;/p&gt;
&lt;p&gt;For a &lt;a href=&#34;https://github.com&#34;&gt;github.com&lt;/a&gt; source URI we use the syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:owner/repository/pathToFile@version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This references the &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt; repository for &lt;code&gt;owner/repository&lt;/code&gt; and &lt;strong&gt;@version&lt;/strong&gt; can be a git tag, branch or SHA.&lt;/p&gt;
&lt;p&gt;If you are not using &lt;a href=&#34;https://github.com&#34;&gt;github.com&lt;/a&gt; to host your git repositories you can access a pipeline task or step from your custom git serve use the &lt;strong&gt;uses:lighthouse:&lt;/strong&gt; prefix before &lt;code&gt;owner&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:lighthouse:owner/repository/pathToFile@version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We &lt;a href=&#34;https://jenkins-x.io/v3/devops/gitops/#recommendations&#34;&gt;recommend you version everything with GitOps&lt;/a&gt; so you know exactly what versions are being used from git.&lt;/p&gt;
&lt;p&gt;However you can use &lt;strong&gt;@HEAD&lt;/strong&gt; to reference the latest version.&lt;/p&gt;
&lt;p&gt;To use a locked down version based on the &lt;em&gt;version stream&lt;/em&gt; of your cluster, you can use &lt;strong&gt;@versionStream&lt;/strong&gt; which means use the git SHA for the repository which is configured in the version stream.&lt;/p&gt;
&lt;p&gt;The nice thing about &lt;strong&gt;@versionStream&lt;/strong&gt; is that the pipeline catalog you inherit tasks and steps from is locked down to an exact SHA in the version stream; but it avoids you having to go through every one of your git repositories whenever you upgrade a pipeline catalog.&lt;/p&gt;
&lt;h4 id=&#34;file-and-url-syntax&#34;&gt;file and URL syntax&lt;/h4&gt;
&lt;p&gt;If you want to reuse a Task or Step thats not easily accessible from the above git source URI syntax you can always use a http:// or https:// URL instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:https://myserver.com/cheese.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there&amp;rsquo;s no @version on a uses string its interpreted as a local file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:some-file.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-it-looks&#34;&gt;How it looks&lt;/h2&gt;
&lt;p&gt;So here is an &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/javascript/.lighthouse/jenkins-x/release.yaml&#34;&gt;example release pipeline&lt;/a&gt; generated via the &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks&#34;&gt;Jenkins X Pipeline catalog&lt;/a&gt; if you create a &lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/catalog&#34;&gt;JavaScript quickstart&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PipelineRun&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;release&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;pipelineSpec&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;from-build-pack&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;stepTemplate&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NPM_CONFIG_USERCONFIG&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/tekton/home/npm/.npmrc&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;400m&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;512Mi&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/tekton/home/npm&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npmrc&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;workingDir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/workspace/source&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;next-version&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-variables&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-npm-install&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-npm-test&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;check-registry&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-container-build&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-changelog&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-helm-release&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;promote-jx-promote&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npmrc&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;optional&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npmrc&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;serviceAccountName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tekton-bot&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;240h0m0s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see it mounts an npm secret for using npm package management and specifies CPU and memory requirements. It then is using the &lt;strong&gt;uses:&lt;/strong&gt; notation to inherit a bunch of steps from the &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/javascript/release.yaml&#34;&gt;jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml&lt;/a&gt; as well as sharing the &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/git-clone/git-clone.yaml&#34;&gt;jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml&lt;/a&gt; task&lt;/p&gt;
&lt;p&gt;Also notice we don&amp;rsquo;t have to copy and paste the exact details of the images, commands, arguments, environment variables and volume mounts required for each step; we can just reference them via Git. Also each pipeline in each repository can reference different versions if required.&lt;/p&gt;
&lt;h3 id=&#34;adding-your-own-steps&#34;&gt;Adding your own steps&lt;/h3&gt;
&lt;p&gt;You can easily add your own steps in between the &lt;code&gt;uses:&lt;/code&gt; steps in your pipeline by adding a regular step which has a custom image.&lt;/p&gt;
&lt;p&gt;e.g. see &lt;code&gt;my-prefix-step&lt;/code&gt; which has an explicit &lt;code&gt;image:&lt;/code&gt; value so isn&amp;rsquo;t inherited from the &lt;code&gt;stepTemplate.image&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PipelineRun&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;pipelineSpec&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;from-build-pack&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;stepTemplate&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-variables&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# lets add a custom step in between shared steps...&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;node:12-slim&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-prefix-step&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            npm something        &lt;/span&gt;            
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-variables &lt;/span&gt;
          &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;customizing-an-inherited-step&#34;&gt;Customizing an inherited step&lt;/h3&gt;
&lt;p&gt;You can edit the step in your &lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/#ide-support&#34;&gt;IDE&lt;/a&gt; and add any custom properties such as &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;volumeMount&lt;/code&gt; - those values then override the inherited step.&lt;/p&gt;
&lt;p&gt;e.g. you can then change any command line, add an environment variable or add a new volume mount without copy pasting the whole step. e.g. we change the &lt;code&gt;script&lt;/code&gt; value of the &lt;code&gt;jx-variables&lt;/code&gt; step below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PipelineRun&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;pipelineSpec&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;taskSpec&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;stepTemplate&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-variables&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            echo my replacement command script goes here&lt;/span&gt;            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Any extra properties in the steps are used to override the underlying uses step.&lt;/p&gt;
&lt;h2 id=&#34;command-line-tools&#34;&gt;Command line tools&lt;/h2&gt;
&lt;p&gt;To help understand the inheriance and overriding of steps we have a few command line tools to help:&lt;/p&gt;
&lt;h3 id=&#34;viewing-the-effective-pipeline&#34;&gt;Viewing the effective pipeline&lt;/h3&gt;
&lt;p&gt;To see the actual Tekton pipeline that would be executed from your local source directory you can run the &lt;a href=&#34;https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_effective.md#jx-pipeline-effective&#34;&gt;jx pipeline effective&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline effective
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to open the effective pipeline in your editor, such as &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline effective -e code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you use &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij&lt;/a&gt; or any of &lt;a href=&#34;https://www.jetbrains.com/products/#type=ide&#34;&gt;JetBrains other IDEs&lt;/a&gt; you can do the following if you have &lt;a href=&#34;https://www.youtube.com/watch?v=SVANj3gAWt8&#34;&gt;enabled&lt;/a&gt; the &lt;code&gt;idea&lt;/code&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SVANj3gAWt8&#34;&gt;command line tool&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline effective -e idea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to always view an effective pipeline in your editor then define the &lt;code&gt;JX_EDITOR&lt;/code&gt; environment variable&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export JX_EDITOR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# now we will always open effective pipelines inside VS Code&lt;/span&gt;
jx pipeline effective
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;overriding-a-pipeline-step-locally&#34;&gt;Overriding a pipeline step locally&lt;/h3&gt;
&lt;p&gt;If you want to edit a step that is inherited from a pipeline catalog just run the &lt;a href=&#34;https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_override.md#jx-pipeline-override&#34;&gt;jx pipeline override&lt;/a&gt; command from a clone of your repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline override
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then prompt you to pick which pipeline and step that&amp;rsquo;s inherited via the &lt;code&gt;image: uses:sourceURI&lt;/code&gt; notation. When chosen the step will be inlined into your local file so you can &lt;a href=&#34;#customizing-an-inherited-step&#34;&gt;edit any of the properties&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can use the git compare to see the changes and remove any properties you don&amp;rsquo;t wish to override.&lt;/p&gt;
&lt;h2 id=&#34;tekton-catalog&#34;&gt;Tekton Catalog&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;Tekton Catalog&lt;/a&gt; git repository defines a ton of Tekton pipelines you can reuse in your pipelines&lt;/p&gt;
&lt;h2 id=&#34;referencing-tasks-or-steps-from-a-catalog&#34;&gt;Referencing Tasks or Steps from a Catalog&lt;/h2&gt;
&lt;p&gt;You can &lt;code&gt;image: uses:sourceURI&lt;/code&gt; notation inside any pipeline file in your &lt;code&gt;.lighthouse/jenkins-x/mypipeline.yaml&lt;/code&gt; file like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uses:tektoncd/catalog/task/git-clone/0.2/git-clone.yaml@HEAD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then include the steps from the &lt;a href=&#34;https://github.com/tektoncd/catalog/blob/master/task/git-clone/0.2/git-clone.yaml&#34;&gt;git-clone.yaml&lt;/a&gt; file&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not just the &lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;Tekton Catalog&lt;/a&gt; - you can use this same approach to reuse Tasks or steps from any git repository of your choosing; such as the &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks&#34;&gt;Jenkins X Pipeline catalog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;custom-pipeline-catalog&#34;&gt;Custom Pipeline Catalog&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://jenkins-x.io/v3/about/extending/#pipeline-catalog&#34;&gt;this section&lt;/a&gt; to configure your custom pipeline catalog.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Upgrading</title>
      <link>https://jenkins-x.io/v3/develop/pipelines/upgrading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/pipelines/upgrading/</guid>
      <description>
        
        
        &lt;h2 id=&#34;converting-older-pipelines&#34;&gt;Converting older pipelines&lt;/h2&gt;
&lt;p&gt;If you have older pipelines in your git repository created with an older version of Jenkins X you can convert them to the new concise &lt;code&gt;image: uses:sourceURI&lt;/code&gt; syntax via the &lt;a href=&#34;https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_convert.md#jx-pipeline-convert&#34;&gt;jx pipeline convert&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx pipeline convert 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The pipelines should be modified and if you have a &lt;code&gt;Kptfile&lt;/code&gt; it will be removed.&lt;/p&gt;
&lt;p&gt;If you have any old &lt;code&gt;jenkins-x.yml&lt;/code&gt; files, those will be converted across to the new &lt;code&gt;.lighthouse&lt;/code&gt; tekton notation too.&lt;/p&gt;
&lt;h2 id=&#34;upgrading-pipelines-and-helm-charts-via-kpt&#34;&gt;Upgrading pipelines and helm charts via kpt&lt;/h2&gt;
&lt;p&gt;You can upgrade any git repository in the same way you upgrade your &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrade/#cluster&#34;&gt;clusters git repository&lt;/a&gt; by running the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_update.md&#34;&gt;jx gitops upgrade&lt;/a&gt; command inside a git checkout of your repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd my-quickstart-thingy
jx gitops upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then upgrade any helm charts or pipeline catalogs you are using in your git repository with the latest versions.&lt;/p&gt;
&lt;p&gt;After running this command you will usually have some changes in &lt;code&gt;git&lt;/code&gt; you can review. If you are happy with the changes commit them and create a Pull Request so that they can get applied on your cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add *
git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fix: upgrade pipeline catalog&amp;#34;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible that you can have merge conflicts.&lt;/p&gt;
&lt;p&gt;You can follow the inline git helper messages to resolve conflicts - or use your IDE to help figure out the merge issues more easily.&lt;/p&gt;
&lt;h3 id=&#34;converting-all-repositories&#34;&gt;Converting all repositories&lt;/h3&gt;
&lt;p&gt;You can now perform a batch of Pull Requests if you need to upgrade your pipelines on your repositories if the upstream pipeline catalogs have upgraded.&lt;/p&gt;
&lt;p&gt;See: &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/migrate/v3-alpha/#upgrading-pipelines-in-your-repositories&#34;&gt;generate pull requests to upgrade pipelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an example of &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/pull/551&#34;&gt;an automated Pull Request&lt;/a&gt; that was used to migrate one of our pipelines on &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops&#34;&gt;jx-gitops&lt;/a&gt; - as you can see the resulting file is much simpler and easier to maintain.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Inner loop</title>
      <link>https://jenkins-x.io/v3/develop/pipelines/inner-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/develop/pipelines/inner-loop/</guid>
      <description>
        
        
        &lt;p&gt;In v2 of Jenkins X we had a feature called &lt;code&gt;Dev Pods&lt;/code&gt;  where we spun up a pod using the container image from the Jenkins X pipeline so that you could perform interative development inside the cluster.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t yet have an exact equivalent in Jenkins X v3 as we&amp;rsquo;ve moved from large monolithic container images with all the tools inside to small focussed images for each tekton pipeline step. e.g. using the upstream images for maven, golang, npm to perform those builds directly.&lt;/p&gt;
&lt;p&gt;If you want something like &lt;code&gt;Dev Pods&lt;/code&gt;  in v3 there are a few open source tools that offer something similar:&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

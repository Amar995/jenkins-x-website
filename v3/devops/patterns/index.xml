<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Patterns</title>
    <link>https://jenkins-x.io/v3/devops/patterns/</link>
    <description>Recent content in Patterns on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/devops/patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Version Everything</title>
      <link>https://jenkins-x.io/v3/devops/patterns/version_everything/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/version_everything/</guid>
      <description>
        
        
        &lt;p&gt;Always version everything explicitly in git and never use &lt;code&gt;latest&lt;/code&gt; or &lt;code&gt;SNAPSHOT&lt;/code&gt; images or artifacts!&lt;/p&gt;
&lt;p&gt;The reason is you never know when a &lt;code&gt;latest&lt;/code&gt; or &lt;code&gt;SNAPSHOT&lt;/code&gt; image or artifact will upgrade in any container/pod/process/step in any environment. Its basically random. So not versioning things means random failures.&lt;/p&gt;
&lt;p&gt;If you explicitly version things in all repositories things are stable and repeatable.&lt;/p&gt;
&lt;p&gt;If you are worried about upgrading versions of things over time then look at either tools like &lt;a href=&#34;https://dependabot.com/&#34;&gt;dependabot&lt;/a&gt; or the &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-updatebot&#34;&gt;updatebot plugin&lt;/a&gt; which we use extensively throughout Jenkins X to upgrade versions of libraries, images, binaries etc.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Pull Dependent Versions</title>
      <link>https://jenkins-x.io/v3/devops/patterns/pull_dependent_versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/pull_dependent_versions/</guid>
      <description>
        
        
        &lt;p&gt;When you &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/version_everything&#34;&gt;Version Everything&lt;/a&gt; you need a way to pull dependent versions into your git repositories.&lt;/p&gt;
&lt;p&gt;Using the &lt;strong&gt;pull&lt;/strong&gt; model means that you periodically create Pull Requests on your git repositories to upgrade dependencies.&lt;/p&gt;
&lt;p&gt;One solution is to use a tool tool like &lt;a href=&#34;https://dependabot.com/&#34;&gt;dependabot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or you can run periodic jobs via the &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-updatebot&#34;&gt;updatebot plugin&lt;/a&gt; to create pull requests.&lt;/p&gt;
&lt;p&gt;e.g. we automatically pull upgrades of chart versions into our Version Stream via &lt;a href=&#34;https://github.com/jenkins-x/jx3-versions/blob/master/.github/workflows/update-charts.yml&#34;&gt;this github action&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Creating Pull Requests to modify versions means the team looking after the repository can decide when and how to merge the Pull Request; e.g. periodically or in quiet times when there are no serious production issues to resolve.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Push Version Changes</title>
      <link>https://jenkins-x.io/v3/devops/patterns/push_version_changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/push_version_changes/</guid>
      <description>
        
        
        &lt;p&gt;When you &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/version_everything&#34;&gt;Version Everything&lt;/a&gt; you need a way to pull dependent versions into your git repositories.&lt;/p&gt;
&lt;p&gt;Using the &lt;strong&gt;push&lt;/strong&gt; model means that as you create a new versioned release of an artifact (library, binary, image, chart or whatever) you generate the necessary Pull Requests in your downstream repositories to upgrade to use this version.&lt;/p&gt;
&lt;p&gt;We do this in Jenkins X using the &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-updatebot&#34;&gt;updatebot plugin&lt;/a&gt; as part of a release pipeline. The &lt;a href=&#34;https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/go-plugin/.lighthouse/jenkins-x/release.yaml#L38&#34;&gt;go-plugin release pipelines&lt;/a&gt; pipelines have a &lt;code&gt;promote-release&lt;/code&gt; which uses the updatebot plugin to promote the new version to other git repositories. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;jenkins-x/lighthouse&lt;/a&gt;  repository has this &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/.jx/updatebot.yaml&#34;&gt;.jx/updatebot.yaml&lt;/a&gt; to update the version stream on a release&lt;/li&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops&#34;&gt;jx-gitops&lt;/a&gt; repository has this  &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/.jx/updatebot.yaml&#34;&gt;.jx/updatebot.yaml&lt;/a&gt; to update the plugin in the jx cli repository&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creating Pull Requests to modify versions means the team looking after the repository can decide when and how to merge the Pull Request; e.g. periodically or in quiet times when there are no serious production issues to resolve.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: GitOps</title>
      <link>https://jenkins-x.io/v3/devops/patterns/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/gitops/</guid>
      <description>
        
        
        &lt;p&gt;The &lt;code&gt;GitOps&lt;/code&gt; pattern means you use source code and git repositories for both your applications, your infrastructure and environments too.&lt;/p&gt;
&lt;p&gt;In the DevOps space we have been using git to version infrastructure configuration with many tools like &lt;a href=&#34;https://www.terraform.io/&#34;&gt;terraform&lt;/a&gt; and before that tools like &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://kubernetes.io/&#34;&gt;kubernetes&lt;/a&gt; you can connect to a cluster and modify it via &lt;code&gt;kubectl apply&lt;/code&gt; or helm install`.&lt;/p&gt;
&lt;p&gt;However with the &lt;code&gt;GitOps&lt;/code&gt; pattern developers don&amp;rsquo;t modify kubernetes directly; instead they propose changes to a git repository via a Pull Request which when it gets approved and merged causes the kubernetes cluster to be modified via some kind of operator such as the &lt;a href=&#34;https://github.com/jenkins-x/jx-git-operator&#34;&gt;Jenkins X git operator&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;benefits-of-gitops&#34;&gt;Benefits of GitOps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;all changes made to each environment are stored in git so it is easy to see who changed what, when and why.&lt;/li&gt;
&lt;li&gt;it is easy to revert changes if things go bad&lt;/li&gt;
&lt;li&gt;it helps share information between the team and to get feedback and reviews on changes to infrastructure&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implementation-approaches&#34;&gt;Implementation approaches&lt;/h3&gt;
&lt;p&gt;You could implement the GitOps pattern by just running &lt;code&gt;helm install mychart&lt;/code&gt; in some kind of script or operator.&lt;/p&gt;
&lt;p&gt;We recommend checking in every kubernetes resource and custom resource definition to git - apart from kubernetes Secrets. For details why see &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template&#34;&gt;the reasoning behind this decision&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essentially having a canonical file in git for every non-Secret kubernetes and custom resource really helps when it comes to diagnosing issues with a cluster; since you don&amp;rsquo;t have to keep in your head what tools like &lt;a href=&#34;https://helm.sh/&#34;&gt;helm&lt;/a&gt;, &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt;, &lt;a href=&#34;https://kustomize.io/&#34;&gt;kustomize&lt;/a&gt;, &lt;a href=&#34;https://googlecontainertools.github.io/kpt/&#34;&gt;kpt&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/kubectl/&#34;&gt;kubectl&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/v3/guides/jx3/&#34;&gt;jx&lt;/a&gt; do - you can just look at how the resource has changed in git to see why things are going wrong.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Pipelines As Code</title>
      <link>https://jenkins-x.io/v3/devops/patterns/pipeline_as_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/pipeline_as_code/</guid>
      <description>
        
        
        &lt;p&gt;Define your Continuous Integration and Continuous Delivery Pipelines as code and keep them in git with your application code.&lt;/p&gt;
&lt;p&gt;In Jenkins X you can see the &lt;a href=&#34;https://jenkins-x.io/v3/develop/pipelines/editing/#source-layout&#34;&gt;Source Layout&lt;/a&gt; for more detail using standard &lt;a href=&#34;https://github.com/tektoncd/pipeline&#34;&gt;Tekton Pipelines&lt;/a&gt; YAML for defining pipelines in a cloud native self-contained way.&lt;/p&gt;
&lt;p&gt;One downside with Pipelines As Code is that you can end up copy/pasting lots of YAML into lots of repositories which can become tricky to both maintain and to keep on recent images and configurations.&lt;/p&gt;
&lt;p&gt;For details of the approach we use on Jenkins X check out &lt;a href=&#34;https://jenkins-x.io/blog/2021/02/25/gitops-pipelines/&#34;&gt;this blog post on GitOps your cloud native pipelines&lt;/a&gt; which lets us share versioned pipelines via git while also making it super easy to override pipeline steps as and when required keeping things super flexible while maximising reuse and making it easy to maintain and upgrade.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Trunk Based Development</title>
      <link>https://jenkins-x.io/v3/devops/patterns/trunk_based_development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/trunk_based_development/</guid>
      <description>
        
        
        &lt;p&gt;This approach is essentially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a single branch for releases&lt;/li&gt;
&lt;li&gt;work in small batches&lt;/li&gt;
&lt;li&gt;use Continuous Integration to frequently merge changes to the main branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is described in the &lt;a href=&#34;https://jenkins-x.io/v3/devops/accelerate/&#34;&gt;Accelerate book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to avoid long term feature branches which have a cost in terms of maintenance and being the opposite of Continuous Integration.&lt;/p&gt;
&lt;p&gt;For more background see the &lt;a href=&#34;https://trunkbaseddevelopment.com/&#34;&gt;Trunk Based Development site&lt;/a&gt; which has lots of examples and approaches.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Automate Continuous Delivery</title>
      <link>https://jenkins-x.io/v3/devops/patterns/automate_continuous_delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/automate_continuous_delivery/</guid>
      <description>
        
        
        &lt;p&gt;As described in the &lt;a href=&#34;https://jenkins-x.io/v3/devops/accelerate/&#34;&gt;Accelerate book&lt;/a&gt;, high performing teams automate their Continuous Delivery.&lt;/p&gt;
&lt;p&gt;This lets your team focus on delivering business value for your customers rather than writing pipelines by hand.&lt;/p&gt;
&lt;p&gt;If you use Jenkins X for your environments and to &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/&#34;&gt;create projects&lt;/a&gt; you will have completely automated Continuous Delivery using &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/pipeline_as_code/&#34;&gt;Pipelines As Code&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/preview_environments/&#34;&gt;Preview Environments&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/trunk_based_development/&#34;&gt;Trunk Based Development&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Preview Environments</title>
      <link>https://jenkins-x.io/v3/devops/patterns/preview_environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/preview_environments/</guid>
      <description>
        
        
        &lt;p&gt;If you are using &lt;a href=&#34;https://jenkins-x.io/v3/devops/patterns/trunk_based_development/&#34;&gt;Trunk Based Development&lt;/a&gt; you want to keep the main branch clean and ready to release at all times so you can quickly get important bug fixes out.&lt;/p&gt;
&lt;p&gt;But how can you shift left and do more testing on changes before you are ready to merge to the main branch?&lt;/p&gt;
&lt;p&gt;The idea of a &lt;code&gt;Preview Environment&lt;/code&gt; is to spin up a temporary environment to deploy the code from a Pull Request before the change is merged to get fast feedback from your team on the change and to shift left and get more testing done before you agree to merge the change.&lt;/p&gt;
&lt;p&gt;In Jenkins X we automate a &lt;a href=&#34;https://jenkins-x.io/v3/develop/environments/preview/&#34;&gt;Preview Environment&lt;/a&gt; is created on all Pull Requests which builds the preview image/chart, spins up a temporary namespace and deploys the application then comments on the Pull Request details.&lt;/p&gt;
&lt;h3 id=&#34;using-previews-for-shift-left-system-testing&#34;&gt;Using Previews for shift left system testing&lt;/h3&gt;
&lt;p&gt;You can also use &lt;a href=&#34;https://jenkins-x.io/v3/develop/environments/preview/#additional-preview-steps&#34;&gt;additional pipeline steps&lt;/a&gt; after the Preview has been deployed to run different kinds of system or integration testing.&lt;/p&gt;
&lt;p&gt;You may also wish to &lt;a href=&#34;https://jenkins-x.io/v3/develop/environments/preview/#adding-more-resources&#34;&gt;add additional dependencies&lt;/a&gt; to your preview environment (defined in &lt;code&gt;preview/helmfile.yaml&lt;/code&gt; in your repository).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Prefer Cloud Over Kubernetes</title>
      <link>https://jenkins-x.io/v3/devops/patterns/prefer_cloud_over_kube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/patterns/prefer_cloud_over_kube/</guid>
      <description>
        
        
        &lt;p&gt;You can deploy a database via a helm chart in your kubernetes cluster. Or you can configure your cloud provider to create a managed database offering.&lt;/p&gt;
&lt;p&gt;You can deploy, say, &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;vault&lt;/a&gt; as helm charts inside your kubernetes cluster. Or you can use your cloud providers secret store solution such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alibaba Cloud KMS Secret Manager&lt;/li&gt;
&lt;li&gt;Amazon Secret Manager&lt;/li&gt;
&lt;li&gt;Azure Key Vault&lt;/li&gt;
&lt;li&gt;GCP Secret Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However installing a chart in kubernetes is a very different thing to having a fully managed service which considers things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backups and replication of state across regions&lt;/li&gt;
&lt;li&gt;upgrades and schema migration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we recommend using the cloud provider implementation for things like databases, secret stores, log storage and and other services as it removes undifferentiated heavy lifting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/v3/devops/cloud-native/#prefer-cloud-over-kubernetes&#34;&gt;More background here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that we absolutely love &lt;a href=&#34;https://kubernetes.io/&#34;&gt;kubernetes&lt;/a&gt;; this pattern is not in any way a criticism of kubernetes. Its more that adopting this pattern is about outsourcing work work in managing, migrating, backing up and restoring persistent state to your cloud provider.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

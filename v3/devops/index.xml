<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ DevOps Guide</title>
    <link>https://jenkins-x.io/v3/devops/</link>
    <description>Recent content in DevOps Guide on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Accelerate</title>
      <link>https://jenkins-x.io/v3/devops/accelerate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/accelerate/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influenced by the State of DevOps reports and more recently the &lt;a href=&#34;https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339&#34;&gt;Accelerate&lt;/a&gt; book from &lt;a href=&#34;https://twitter.com/nicolefv&#34;&gt;Nicole Forsgren&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jezhumble&#34;&gt;Jez Humble&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/RealGeneKim?&#34;&gt;Gene Kim&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/accelerate.jpg&#34; class=&#34;img-thumbnail&#34; width=&#34;500&#34; height=&#34;750&#34;&gt;
&lt;p&gt;Years of gathering data from real world teams and organizations which has been analyzed by inspiring thought leaders and data scientists from the DevOps world.  The Accelerate book recommends a number of capabilities that Jenkins X is implementing so users gain the scientifically proven benefits, out of the box.  We&amp;rsquo;ve started documenting the capabilities that are available today and will continue as more become available.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/capabilities.png&#34; class=&#34;img-thumbnail&#34; width=&#34;400&#34; height=&#34;750&#34;&gt;
&lt;h1 id=&#34;use-version-control-for-all-artifacts&#34;&gt;Use version control for all artifacts&lt;/h1&gt;
&lt;p&gt;The Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application, version upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have checks run against it like a form of CI for environments and approved by a team that has control over what goes into the related environment.  We now enable governance have full traceability for any change to an environment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related Accelerate capability:  Use version control for all production artifacts&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;automate-your-deployment-process&#34;&gt;Automate your deployment process&lt;/h1&gt;
&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;
&lt;p&gt;Jenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using &lt;code&gt;jx create environment&lt;/code&gt;.  Additionally when creating new applications via a quickstart (&lt;code&gt;jx create quickstart&lt;/code&gt;), Java based SpringBoot (&lt;code&gt;jx create spring&lt;/code&gt;) or importing existing applications (&lt;code&gt;jx import&lt;/code&gt;), Jenkins X will both automatically add CI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.&lt;/p&gt;
&lt;p&gt;Out of the box Jenkins X creates Staging and Production (this is customizable) permanent environments as well as temporary environments for preview applications from Pull Requests.&lt;/p&gt;
&lt;h3 id=&#34;previews-environments&#34;&gt;Previews Environments&lt;/h3&gt;
&lt;p&gt;We are trying to move as much testing, security, validation and experimentation for a change before it&amp;rsquo;s merged to master.  With the use of temporary dynamically created Preview Environments any Pull Request can have a preview version built and deployed, including libraries that feed into a downstream deployable application.  This means we can code review, test, collaborate better with all teams that are involved in agreeing that change can go live.&lt;/p&gt;
&lt;p&gt;Ultimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they can that when a change is merged to master it works as expected.  We want to be confident the proposed change does not negatively affect any service or feature as well as deliver the value it is intended to.&lt;/p&gt;
&lt;p&gt;Where Preview Environments get really interesting is when we are able to progress a short term PR through various stages of maturity and confidence where we begin to direct a percentage of real production traffic (either shadow traffic or even beta users).  We can then analyze the value of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.  This helps give us better understanding of how the change will perform when released to all users. Though we need to make sure PRs stay short lived for trunk based development; lets try avoid PRs turning into long term feature branches!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related Accelerate capability: Foster and enable team experimentation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don&amp;rsquo;t yet have examples of automated tests being run against a preview environment.  A simple test would be to ensure the application starts ok and Kubernetes liveness check pass for an amount of time. This relates to&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related Accelerate capability: Implement Test Automation&lt;/em&gt;
&lt;em&gt;Related Accelerate capability: Automate your deployment process&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;permanent-environments&#34;&gt;Permanent Environments&lt;/h3&gt;
&lt;p&gt;In software development we&amp;rsquo;re used to working with multiple environments in the lead up to a change being promoted to a live production environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any reason that it is deemed not fit via some process that didn&amp;rsquo;t happen pre merge to master.  Subsequent commits then become blocked and can cause delay of urgent changes being promoted to production.&lt;/p&gt;
&lt;p&gt;As above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in a staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.&lt;/p&gt;
&lt;p&gt;The default Jenkins X pipelines provide deployment automation via environments.  These are customizable to suite your own CI / CD pipeline requirements.&lt;/p&gt;
&lt;p&gt;Jenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data shadowed to it using a service mesh to understand the behavior.  This also helps when developing changes in preview where we can link to non production services in staging.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Related Accelerate capability: Automate your deployment process&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;use-trunk-based-development&#34;&gt;Use trunk-based development&lt;/h1&gt;
&lt;p&gt;The Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has always worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up Git repositories and CI/CD jobs.&lt;/p&gt;
&lt;h1 id=&#34;implement-continuous-integration&#34;&gt;Implement Continuous Integration&lt;/h1&gt;
&lt;p&gt;Jenkins X sees CI as the effort of validating a proposed change via Pull Requests before it is merged to master.  Jenkins X will automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration out of the box.&lt;/p&gt;
&lt;h1 id=&#34;implement-continuous-delivery&#34;&gt;Implement Continuous Delivery&lt;/h1&gt;
&lt;p&gt;Jenkins X sees CD as the effort of taking that change after it&amp;rsquo;s been merged to master through to running in a live environment.  Jenkins X automates many parts in a release pipeline:&lt;/p&gt;
&lt;p&gt;Jenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we don&amp;rsquo;t need to store the latest release version in the master branch.  Where release systems do store the last or next version in Git repos it means CD becomes hard, as a commit in a release pipeline back to master triggers a new release.  This results in a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.&lt;/p&gt;
&lt;p&gt;Jenkins X will automatically create a released version on &lt;strong&gt;every&lt;/strong&gt; merge to master which can then potentially progress through to production.&lt;/p&gt;
&lt;h1 id=&#34;use-loosely-coupled-architecture&#34;&gt;Use loosely coupled architecture&lt;/h1&gt;
&lt;p&gt;By targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop loosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container scheduling and orchestration to name just a few examples of where Kubernetes helps.&lt;/p&gt;
&lt;h1 id=&#34;architect-for-empowered-teams&#34;&gt;Architect for empowered teams&lt;/h1&gt;
&lt;p&gt;Jenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with language detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is provide a consistent Way Of Working so developers can concentrate on developing.&lt;/p&gt;
&lt;p&gt;Jenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualization.  In this example centralized metrics help understand how your applications behave when built and deployed on Kubernetes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; are another feature which enables developers to edit source code in their local IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.&lt;/p&gt;
&lt;p&gt;Jenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and  feedback empowers them to make the best decisions - faster.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: GitOps</title>
      <link>https://jenkins-x.io/v3/devops/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/gitops/</guid>
      <description>
        
        
        &lt;p&gt;The idea of GitOps is to treat everything as source code, including your infrastructure, and check it into git and version it.&lt;/p&gt;
&lt;p&gt;So rather than connecting to a machine in your cluster, you make changes via Pull Requests in git. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;every change is audited so you can see who changed what, when and why&lt;/li&gt;
&lt;li&gt;its easy to revert changes to your infrastructure if things go bad&lt;/li&gt;
&lt;li&gt;teams can easily review changes to work more effectively as a team, share knowledge and get better feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;
&lt;h3 id=&#34;secrets&#34;&gt;Secrets&lt;/h3&gt;
&lt;p&gt;One of the biggest challenges with GitOps is dealing with secrets.&lt;/p&gt;
&lt;p&gt;You really want to check in all of your source code into git. But you really don&amp;rsquo;t want to check in your secrets (user, passwords, tokens, certificates etc) into git - particularly public repositories!&lt;/p&gt;
&lt;p&gt;There are techniques like &lt;a href=&#34;https://github.com/bitnami-labs/sealed-secrets&#34;&gt;helm sealed secrets&lt;/a&gt; so that you can encrypt secrets for storage in git.&lt;/p&gt;
&lt;p&gt;However we are not huge fans of the UX of using this approach; its harder to modify or rotate secrets.&lt;/p&gt;
&lt;p&gt;We prefer &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;using external secrets stores&lt;/a&gt; via the open source  &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;Kubernetes External Secrets&lt;/a&gt; project&lt;/p&gt;
&lt;p&gt;This means that we &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;automatically convert Secret resources to ExternalSecrets which can then be stored safely in git&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;source-code&#34;&gt;Source code&lt;/h3&gt;
&lt;p&gt;Saying use git is all well and good but what is the source code layout?&lt;/p&gt;
&lt;p&gt;When writing actual application code in languages like Java, Node or Go there is accepted layouts and file formats. But what of GitOps?&lt;/p&gt;
&lt;p&gt;It does depend a little on the GitOps tool you are using. We recommend trying to use a canonical source code layout that lets you change later if you need to.&lt;/p&gt;
&lt;p&gt;Here is our current &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md&#34;&gt;recommended source code layout&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;We spend more time reading source code than writing it. So try focus on things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use canonical file formats that are easy to understand. e.g. &lt;a href=&#34;https://helm.sh/&#34;&gt;helm&lt;/a&gt; and &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make good use of reporting e.g. Jenkins X generates easy to read reports to view what applications are deployed in what namespace and with what versions etc:
&lt;ul&gt;
&lt;li&gt;e.g. see the reports for &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-kubernetes/tree/master/docs&#34;&gt;kubernetes&lt;/a&gt;, &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-eks-vault/tree/master/docs&#34;&gt;aws&lt;/a&gt;, &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-azure-akv&#34;&gt;azure&lt;/a&gt; and &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-gke-gsm/tree/master/docs&#34;&gt;gke&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we recommend checking in all kubernetes resources apart from Secrets into git. See &lt;a href=&#34;https://jenkins-x.io/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template&#34;&gt;this FAQ entry for background&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;this makes it easier to review Pull Requests to see what will actually change in Kubernetes if a change is approved (e.g. changes to namespaces, deployments, images, volumes etc)&lt;/li&gt;
&lt;li&gt;when diagnosing issues you can easily use your IDE to view the history of any kubernetes resource. This avoids having to mentally guess what tools like &lt;a href=&#34;https://helm.sh/&#34;&gt;helm&lt;/a&gt; or &lt;a href=&#34;https://kustomize.io/&#34;&gt;kustomize&lt;/a&gt; would actually do over time - you can just compare what they create - the YAML resources in git them mirror exactly what should exist in your kubernetes clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;always version everything and never use &lt;code&gt;latest&lt;/code&gt; or &lt;code&gt;SNAPSHOT&lt;/code&gt; images or artifacts!
&lt;ul&gt;
&lt;li&gt;if you are worried about upgrading versions of things over time then look at either tools like &lt;a href=&#34;https://dependabot.com/&#34;&gt;dependabot&lt;/a&gt; or the &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-updatebot&#34;&gt;updatebot plugin&lt;/a&gt; which we use extensively throughout Jenkins X to upgrade versions of libraries, images, binaries etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;try run everything in the cloud rather than on your local laptop
&lt;ul&gt;
&lt;li&gt;as its easier to keep running for everyone in your team; rather than only work on certain machines with magic setups you forget to document or maintain. e.g. the Jenkins X v3 approach runs the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;installer inside Kubernetes as a Job&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Cloud Native</title>
      <link>https://jenkins-x.io/v3/devops/cloud-native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/devops/cloud-native/</guid>
      <description>
        
        
        &lt;p&gt;One of the &lt;a href=&#34;https://jenkins-x.io/v3/devops/accelerate/&#34;&gt;Accelerate&lt;/a&gt; recommendations is around using the cloud well; letting developers use the cloud to solve software problems.&lt;/p&gt;
&lt;p&gt;Here are a few of the lessons we have learnt about using the cloud well.&lt;/p&gt;
&lt;h2 id=&#34;prefer-cloud-over-kubernetes&#34;&gt;Prefer cloud over kubernetes&lt;/h2&gt;
&lt;p&gt;You can deploy a database via a helm chart in your kubernetes cluster. Or you can configure your cloud provider to create a managed database offering.&lt;/p&gt;
&lt;p&gt;You can deploy, say, &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;vault&lt;/a&gt; as helm charts inside your kubernetes cluster. Or you can use your cloud providers secret store solution such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alibaba Cloud KMS Secret Manager&lt;/li&gt;
&lt;li&gt;Amazon Secret Manager&lt;/li&gt;
&lt;li&gt;Azure Key Vault&lt;/li&gt;
&lt;li&gt;GCP Secret Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend that if you have a choice; go with the cloud version.&lt;/p&gt;
&lt;p&gt;The main reason is these kinds of things are undifferentiated heavy lifting. Your cloud provider already can install, upgrade, backup and manage these services for you.&lt;/p&gt;
&lt;p&gt;If you go with helm charts inside kubernetes then you need to make sure you backup to long term storage all the data (e.g. every Persistent Volume) and test out your backup and restore mechanisms.&lt;/p&gt;
&lt;h3 id=&#34;prefer-cloud-databases&#34;&gt;Prefer cloud databases&lt;/h3&gt;
&lt;p&gt;As your cloud provider can handle backups, upgrades and elastic scaling for you.&lt;/p&gt;
&lt;h3 id=&#34;prefer-cloud-secret-stores&#34;&gt;Prefer cloud secret stores&lt;/h3&gt;
&lt;p&gt;Over installing, upgrading, backing up + managing your own Vault&lt;/p&gt;
&lt;h3 id=&#34;prefer-cloud-container-registries&#34;&gt;Prefer cloud container registries&lt;/h3&gt;
&lt;p&gt;Over installing and managing your own nexus / artifactory / harbor / chart museuem&lt;/p&gt;
&lt;h3 id=&#34;prefer-hosted-git-hosting&#34;&gt;Prefer hosted git hosting&lt;/h3&gt;
&lt;p&gt;Over installing and managing your own gitlab / gitea / bitbucket server&lt;/p&gt;
&lt;h3 id=&#34;try-avoid-persistent-volumes&#34;&gt;Try avoid Persistent Volumes&lt;/h3&gt;
&lt;p&gt;Similar to the above; if you use cloud storage, cloud buckets, cloud container registries you have less data to backup since the cloud provider typically does this for you.&lt;/p&gt;
&lt;p&gt;Remember that &lt;code&gt;Persistent Volume&lt;/code&gt; resources in kubernetes are not free; you need to backup and manage them.&lt;/p&gt;
&lt;h2 id=&#34;treat-kubernetes-clusters-as-cattle-not-pets&#34;&gt;Treat kubernetes clusters as cattle not pets&lt;/h2&gt;
&lt;p&gt;Get used to the idea you can delete a kubernetes cluster at any time and recreate it quickly.&lt;/p&gt;
&lt;p&gt;e.g. to change region or machine type this will usually happen.&lt;/p&gt;
&lt;h2 id=&#34;map-iam-roles-to-kubernetes-service-accounts&#34;&gt;Map IAM Roles to kubernetes Service Accounts&lt;/h2&gt;
&lt;p&gt;On AWS use &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html&#34;&gt;IAM roles for service accounts&lt;/a&gt; (IRSA)&lt;/p&gt;
&lt;p&gt;On GCP use &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity&#34;&gt;Workload Identity&lt;/a&gt; (WLI)&lt;/p&gt;
&lt;p&gt;In both cases this maps cloud IAM roles to kubernetes &lt;code&gt;ServiceAccount&lt;/code&gt; resources using annotations.&lt;/p&gt;
&lt;p&gt;This means that you don&amp;rsquo;t have to populate your kubernetes cluster with cluster-admin style cloud IAM secrets - which makes your system more secure and reduces the possibility of accidentally exposing a secret.&lt;/p&gt;
&lt;p&gt;Note that if you use &lt;a href=&#34;https://jenkins-x.io/v3/admin/&#34;&gt;Jenkins X to configure your clusters with Terraform and GitOps&lt;/a&gt; then you get this out of the box!&lt;/p&gt;
&lt;h2 id=&#34;terraform-for-cloud-infrastructure&#34;&gt;Terraform for cloud infrastructure&lt;/h2&gt;
&lt;p&gt;We are all using an increasing amount of cloud infrastructure. You can use your cloud providers CLI or web console to set things up. However it&amp;rsquo;s hard to manage and version.&lt;/p&gt;
&lt;p&gt;So we recommend the &lt;a href=&#34;https://jenkins-x.io/v3/devops/gitops/&#34;&gt;GitOps approach&lt;/a&gt; to all infrastructure; both cloud infrastructure and kubernetes charts, resources and configuration.&lt;/p&gt;
&lt;p&gt;So to manage your infrastructure use a git repository with your &lt;a href=&#34;https://www.terraform.io/&#34;&gt;terraform&lt;/a&gt; configuration.&lt;/p&gt;
&lt;p&gt;There is a catch 22 of how do you start to provision your first, say, kubernetes cluster using &lt;a href=&#34;https://www.terraform.io/&#34;&gt;terraform&lt;/a&gt; before you have any cloud infrastructure.&lt;/p&gt;
&lt;p&gt;You could look at using &lt;a href=&#34;https://www.terraform.io/cloud&#34;&gt;Terraform Cloud&lt;/a&gt; as the place to setup your core cloud infrastructure.&lt;/p&gt;
&lt;h2 id=&#34;try-use-the-same-gitops-approach-everywhere&#34;&gt;Try use the same GitOps approach everywhere&lt;/h2&gt;
&lt;p&gt;If you treat different clusters very differently in how you setup them up, install, upgrade, manage and monitor them you&amp;rsquo;ve given yourself more work to do and increase the changes of things going wrong or getting out of step.&lt;/p&gt;
&lt;p&gt;So try using the same &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/gitops/&#34;&gt;GitOps approach&lt;/a&gt; for all clusters in all environments.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

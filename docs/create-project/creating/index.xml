<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Creating with Quickstarts or importing</title>
    <link>https://jenkins-x.io/docs/create-project/creating/</link>
    <description>Recent content in Creating with Quickstarts or importing on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/docs/create-project/creating/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Create Quickstart</title>
      <link>https://jenkins-x.io/docs/create-project/creating/create-quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/create-project/creating/create-quickstart/</guid>
      <description>
        
        
        &lt;p&gt;Creating a quickstart is our preferred way to create your first project inside Jenkins X. A quickstart is just a sample microservice in a particular programming language and build technology which we test with our build packs to ensure it works great with CI+CD in Jenkins X.&lt;/p&gt;
&lt;p&gt;To see how to create a project see &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;Create a Quickstart&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create MLquickstart</title>
      <link>https://jenkins-x.io/docs/create-project/creating/create-mlquickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/create-project/creating/create-mlquickstart/</guid>
      <description>
        
        
        &lt;p&gt;Machine learning quickstarts are pre-made machine-learning applications you can leverage to start your own projects.&lt;/p&gt;
&lt;p&gt;You can create new applications from our list of curated machine learning quickstart applications via the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_mlquickstart/&#34;&gt;jx create mlquickstart&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create mlquickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You are then prompted for a list of quickstarts to choose from.&lt;/p&gt;
&lt;p&gt;You will see that these come in groups of three:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;? &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; the quickstart you wish to create  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Use arrows to move, space to &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;, type to filter&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&amp;gt; machine-learning-quickstarts/ML-python-pytorch-cpu
  machine-learning-quickstarts/ML-python-pytorch-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each machine learning quickstart consists of two projects, a training project which manages the training script for your model and a service project that allows you to wrap your trained model instances with service APIs ready for integration into your application.&lt;/p&gt;
&lt;p&gt;If you want to create just the &lt;code&gt;-service&lt;/code&gt; or &lt;code&gt;-training&lt;/code&gt; project on its own, you can do so by selecting the option with the matching name suffix.&lt;/p&gt;
&lt;p&gt;Most of the time, however, what you want to do is to select the &lt;em&gt;project set&lt;/em&gt;, which is the first option with the same prefix name and no suffix. That will create a matched pair of projects that are linked. For example, if you call your project repository &lt;code&gt;my-first-ml-project&lt;/code&gt; and select the &lt;code&gt;ML-python-pytorch-cpu&lt;/code&gt; project set, you will create two independent projects in the current folder, &lt;code&gt;my-first-ml-project-training&lt;/code&gt; and &lt;code&gt;my-first-ml-project-service&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you create these individually, it is important that your projects share the same root name and that they end with the suffixes &lt;code&gt;-training&lt;/code&gt; and &lt;code&gt;-service&lt;/code&gt; so that they can automatically integrate during the build process.&lt;/p&gt;
&lt;p&gt;You can use a text filter to filter on the project names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create mlquickstart -f gpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;what-happens-when-you-create-a-quickstart&#34;&gt;What happens when you create a quickstart&lt;/h3&gt;
&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creates a pair of new projects from the quickstart in sub directories&lt;/li&gt;
&lt;li&gt;adds the source code for both into a pair of git repositories&lt;/li&gt;
&lt;li&gt;creates matching remote git repositories on a git service, such as &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pushes your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your -service application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines for training and service builds&lt;/li&gt;
&lt;li&gt;Helm charts to run your applications inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;registers webhooks on the remote git repositories to your teams Jenkins X server&lt;/li&gt;
&lt;li&gt;triggers the pipelines to train and deploy your service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you create a machine learning quickstart, both the training and service projects will build simultaneously. The service project will deploy but first time around, it will fail to start, because it doesn&amp;rsquo;t yet have a trained model to work with.&lt;/p&gt;
&lt;p&gt;Meanwhile the training project will start work on training the model and once trained, will run some acceptance tests to verify that the trained model instance is sufficiently accurate to be worth promoting for further testing. If the model has not learned well enough, the training build will fail at this point.&lt;/p&gt;
&lt;p&gt;You can restart training with the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx start pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then select the name of the training project you wish to run again, or you may edit your training script, commit your changes and push them to automatically trigger another training run.&lt;/p&gt;
&lt;p&gt;Once training has completed successfully, the version of your model that has just been trained and the metrics associated with this run will be passed to your &lt;code&gt;-service&lt;/code&gt; project using a pull request. You now need to review the &lt;code&gt;-service&lt;/code&gt; project repository and check the training metrics for suitability. The &lt;code&gt;-service&lt;/code&gt; project will automatically rebuild using the newly trained model instance and deploy into a preview environment where you can test it using its API.&lt;/p&gt;
&lt;p&gt;If all QA checks pass you may then sign-off the release in the same way you would do for any other build within Jenkins X (have approvers and reviewers issue /approve and /lgtm comments in the pull request thread).&lt;/p&gt;
&lt;p&gt;Once signed off, the trained model instance is merged into the master branch of your -service project, rebuilt and deployed into staging for further testing and integration.&lt;/p&gt;
&lt;p&gt;Each time you restart the traing project, you will get a new model instance that you can chose to promote in the same way. All models are versioned via Git, so you can keep track of each instance and its metrics.&lt;/p&gt;
&lt;h3 id=&#34;how-do-quickstarts-work&#34;&gt;How do quickstarts work?&lt;/h3&gt;
&lt;p&gt;The source of these Quickstarts are maintained in &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34;&gt;the machine-learning-quickstarts GitHub organisation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As with conventional Jenkins X quickstarts, we use the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; to match the right pack for the project using the source code language and machine learning framework kinds to pick the most suitable match.&lt;/p&gt;
&lt;p&gt;When you use &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;jx create&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/&#34;&gt;jx install&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx init&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; are cloned into your &lt;code&gt;~/.jx/draft/packs&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Then when you create a machine learning quickstart, the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; are used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find the right language pack. e.g. here are the current &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34;&gt;list of language packs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the language pack is then used to default these files if they don&amp;rsquo;t already exist:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to package the application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines using declarative pipeline as code&lt;/li&gt;
&lt;li&gt;Helm Charts to deploy the application on Kubernetes and to implement &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adding-your-own-quickstarts&#34;&gt;Adding your own Quickstarts&lt;/h2&gt;
&lt;p&gt;If you would like to submit a new Quickstart to Jenkins X please just &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34;&gt;raise an issue&lt;/a&gt; with the URL in GitHub of your quickstart and we can fork it it into the &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34;&gt;quickstart organisation&lt;/a&gt; so it appears in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; menu.&lt;/p&gt;
&lt;p&gt;Or if you are part of an open source project and wish to curate your own set of quickstarts for your project; you can &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34;&gt;raise an issue&lt;/a&gt; giving us details of the github organisation where the quickstarts live and we&amp;rsquo;ll add that in as a default organisation to include in the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_mlquickstart/&#34;&gt;jx create mlquickstart&lt;/a&gt; command. Its easier for the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_mlquickstart/&#34;&gt;jx create mlquickstart&lt;/a&gt; if you maintain the quickstarts in a separate quickstart organisation on github.&lt;/p&gt;
&lt;p&gt;Until we do that you can still use your own Quickstarts in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command via the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--organisations&lt;/code&gt; command line argument. e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create mlquickstart  --organisations my-github-org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then all machine learning quickstarts found in &lt;code&gt;my-github-org&lt;/code&gt; will be listed in addition to the defaults.&lt;/p&gt;
&lt;p&gt;Note there are some standards for creating machine learning quickstarts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All quickstart names must start with the letters &lt;code&gt;ML-&lt;/code&gt; to distinguish it from a conventional quickstart&lt;/li&gt;
&lt;li&gt;Training projects must be suffixed &lt;code&gt;-training&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service projects must be suffixed &lt;code&gt;-service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All components of a project set must share the same root prefix to their name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create a machine learning project set, create a new repository in your quickstart organisation such that the name is the shared prefix for your quickstart, for example: &lt;code&gt;machine-learning-quickstarts/ML-python-pytorch-cpu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Try to pick explanatory names so that it is clear what language, frameworks and hardware are associated with this project set.&lt;/p&gt;
&lt;p&gt;Inside your project set repository, create a single file named &lt;code&gt;projectset&lt;/code&gt; which has the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;[
   {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repo&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ML-python-pytorch-cpu-service&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tail&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-service&amp;#34;&lt;/span&gt;
   },
   {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repo&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ML-python-pytorch-cpu-training&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tail&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-training&amp;#34;&lt;/span&gt;
   }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customising-your-teams-quickstarts&#34;&gt;Customising your teams quickstarts&lt;/h2&gt;
&lt;p&gt;You can configure at a team level the quickstarts which are presented to you in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command. These settings are stored in the &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;
&lt;p&gt;To add the location of a set of machine learning quickstarts you can use the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstartlocation/&#34;&gt;jx create quickstartlocation&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create quickstartlocation --url https://mygit.server.com --owner my-mlquickstarts --includes&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;ML-*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that you MUST specify the &lt;code&gt;--includes=[ML-*]&lt;/code&gt; option or your quickstarts will be added to the conventional quickstart list rather than the machine learning list.&lt;/p&gt;
&lt;p&gt;If you omit the &lt;code&gt;--url&lt;/code&gt; argument the command will assume its a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; repository. Note that both public and private repositories are supported.&lt;/p&gt;
&lt;p&gt;This means you can have your own shared private quickstarts to reuse within your organisation. Of course we&amp;rsquo;d obviously prefer you to &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34;&gt;share your quickstarts with us via open source&lt;/a&gt; then we can include your quickstart with the entire &lt;a href=&#34;https://jenkins-x.io/community/&#34;&gt;community&lt;/a&gt; - but there may be times you want to curate your own internal quickstarts using proprietary software.&lt;/p&gt;
&lt;p&gt;You can also specify other &lt;code&gt;--includes&lt;/code&gt; or &lt;code&gt;--excludes&lt;/code&gt; patterns to filter the names of the repositories where &lt;code&gt;*&lt;/code&gt; matches anything and &lt;code&gt;foo*&lt;/code&gt; matches anything starting with &lt;code&gt;foo&lt;/code&gt;. e.g. you could just include the languages and technologies your organisation supports and exclude the rest etc.&lt;/p&gt;
&lt;p&gt;Also note that you can use the alias of &lt;code&gt;qsloc&lt;/code&gt; instead of &lt;code&gt;quickstartlocation&lt;/code&gt; if you like shorter aliases ;)&lt;/p&gt;
&lt;p&gt;You can then view the current quickstart locations for your team via the &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_quickstartlocation/&#34;&gt;jx get quickstartlocations&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx get quickstartlocations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or using an abbreviation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx get qsloc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also &lt;a href=&#34;https://jenkins-x.io/commands/jx_delete_quickstartlocation/&#34;&gt;jx delete quickstartlocation&lt;/a&gt; if you need to remove a git organisation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Spring Boot</title>
      <link>https://jenkins-x.io/docs/create-project/creating/create-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/create-project/creating/create-spring/</guid>
      <description>
        
        
        &lt;p&gt;Java microservices developers can leverage the opinionated resources and
preconfigured components of &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring
Boot&lt;/a&gt;. This software framework
takes the Spring platform and adds preconfigured components, third-party
libraries, software packagers, and command-line tools for running
specialized scripts.&lt;/p&gt;
&lt;p&gt;The aim of Spring Boot is to create Spring-based software such as
microservices, which can be deployed using the &lt;code&gt;java&lt;/code&gt; command-line
runtime or standalone &lt;em&gt;Web Application Resource&lt;/em&gt; (WAR) package files.
Spring Boot uses Spring as a foundation for development, and enhances it
with components that provides faster development and deployment,
opinionated configuration and setup to get started developing
microservices quickly, and a plugin framework that features Maven and
Gradle project support.&lt;/p&gt;
&lt;h2 id=&#34;spring-boot-and-jenkins-x&#34;&gt;Spring Boot and Jenkins X&lt;/h2&gt;
&lt;p&gt;You can incorporate Jenkins X into your Spring
Boot projects in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By importing existing Spring Boot code using &lt;code&gt;jx import&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By creating a Spring Boot application from scratch using
&lt;code&gt;jx create spring&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;importing-existing-spring-boot-projects&#34;&gt;Importing existing Spring Boot projects&lt;/h2&gt;
&lt;p&gt;If you have an Spring Boot project (perhaps created using the &lt;a href=&#34;http://start.spring.io/&#34;&gt;Spring Boot Initializr&lt;/a&gt;) that you want to manage builds using
Jenkins X, you can use &lt;code&gt;jx import&lt;/code&gt; to commit your
code to a Git service such as GitHub, add a &lt;code&gt;Dockerfile&lt;/code&gt; to build your
Spring Boot project as a Docker image, a &lt;code&gt;pipeline.yaml&lt;/code&gt; to your
&lt;code&gt;~/.jx/&lt;/code&gt; directory that manages the development pipeline, and a Helm
chart for running as a package in Kubernetes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change into your Spring Boot project directory:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd my-springapp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Run the import from a command-line:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;The application asks for your Git username (such as &lt;code&gt;myuser&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application asks if you wan to initialize your project in Git.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application asks you what organization to use for managing
builds (for example, &lt;code&gt;myorg&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application asks if you want to name your repository (such as
&lt;code&gt;my-springapp&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can now perform builds, commit project code to your newly created
Git repository, and Jenkins X will automatically
process pull requests and create &lt;a href=&#34;https://jenkins-x.io/docs/reference/preview/&#34;&gt;previews&lt;/a&gt; of your applications for testing and validation.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-spring-boot-application&#34;&gt;Creating a new Spring Boot application&lt;/h2&gt;
&lt;p&gt;If you are evaluating Spring Boot in your Jenkins X environment and need an application template of a Spring Boot project that is preconfigured with CI/CD pipeline and GitOps promotion, use &lt;code&gt;jx create&lt;/code&gt; to make the preconfigured project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the Spring Boot creation via command-line:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create spring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;The application asks for your Git username (such as &lt;code&gt;myuser&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application lets you choose your Git organization from an
available list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application asks for a repository name, such as
&lt;code&gt;my-springapp1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application prompts you for the development language for your
project (by default, &lt;code&gt;java&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application prompts you for a group ID (by default,
&lt;code&gt;com.example&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The application prompts you for any Spring Boot starters, or
dependency descriptors that you can use to make your development
smoother and quicker.&lt;/p&gt;
&lt;p&gt;We recommend at minimum the &lt;code&gt;Actuator&lt;/code&gt; and &lt;code&gt;Web&lt;/code&gt;
dependencies, which you can activate by moving to those checkboxes
and hitting the &lt;code&gt;Space Bar&lt;/code&gt; to select them. The application
prompts you to initialize Git&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a &lt;a href=&#34;https://jenkins-x.io/docs/resources/demos-talks-posts/create_spring/&#34;&gt;demo of using the command: jx create spring&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also pass certain options to the &lt;code&gt;jx create&lt;/code&gt; command, such as specifying Spring Boot dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create spring -d web -d actuator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; argument lets you specify the Spring Boot dependencies you wish to add to your spring boot application. In the above example, the command calls the &lt;code&gt;web&lt;/code&gt; argument, which passes in the Web Starter dependency to create RESTful web applications; the &lt;code&gt;actuator&lt;/code&gt; dependency for monitoring the health and metrics your application.  When you omit the &lt;code&gt;-d&lt;/code&gt; arguments and let the &lt;code&gt;jx&lt;/code&gt; command prompt you to pick the dependencies via a CLI wizard&lt;/p&gt;
&lt;p&gt;We recommend you always include the &lt;strong&gt;actuator&lt;/strong&gt; dependency in your Spring Boot applications as it helps provide health checks for &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&#34;&gt;Liveness and Readiness probes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;spring-boot-projects-managed-by-jenkins-x&#34;&gt;Spring Boot projects managed by Jenkins X&lt;/h2&gt;
&lt;p&gt;The two methods of configuring Spring Boot projects in Jenkins X performs several actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new Spring Boot application in a local subdirectory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your source code into a Git repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a remote git repository on a git service, such as
&lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit your code to the remote Git service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adds default build files to your project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;pipeline.yaml&lt;/code&gt; to implement the CI / CD pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A helm chart to run your application inside Kubernetes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Registers a webhook (such as
&lt;code&gt;http://hook-jx.192.169.1.100.nip.io/hook&lt;/code&gt;) on the remote git
repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;trigger the first pipeline build&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now use your Git-enabled local project subdirectory to make
changes to your Spring Boot application, push those changes to Git, and
automatically have Jenkins X build, create
&lt;a href=&#34;https://jenkins-x.io/docs/reference/preview/&#34;&gt;previews&lt;/a&gt; for testing and validation, and &lt;a href=&#34;https://jenkins-x.io/developing/promote/&#34;&gt;promote&lt;/a&gt; your app to production for general usage.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Import</title>
      <link>https://jenkins-x.io/docs/create-project/creating/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/create-project/creating/import/</guid>
      <description>
        
        
        &lt;p&gt;If you already have some source code you wish to import into Jenkins X then you can use the &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; command. e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd my-cool-app
jx import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Import will perform the following actions (prompting you along the way):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add your source code into a git repository if it isn&amp;rsquo;t already&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;add any required files to your project if they do not exist:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipeline.yml&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;


    Be sure there isn&amp;rsquo;t any &lt;code&gt;config.json&lt;/code&gt; file at the root of your project, or else it will be interpreted as &lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34;&gt;kaniko&lt;/a&gt; configuration file, and can lead to a permission error when jx will try to push the builded project image to the docker registry.

&lt;/div&gt;

&lt;h3 id=&#34;avoiding-docker--helm&#34;&gt;Avoiding docker + helm&lt;/h3&gt;
&lt;p&gt;If you are importing a repository that does not create a docker image you can use the &lt;code&gt;--no-draft&lt;/code&gt; command line argument which will not use Draft to default the Dockerfile and helm chart.&lt;/p&gt;
&lt;h3 id=&#34;importing-via-url&#34;&gt;Importing via URL&lt;/h3&gt;
&lt;p&gt;If you wish to import a project which is already in a remote git repository then you can use the &lt;code&gt;--url&lt;/code&gt;  argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --url https://github.com/jenkins-x/spring-boot-web-example.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;importing-github-projects&#34;&gt;Importing GitHub projects&lt;/h3&gt;
&lt;p&gt;If you wish to import projects from a github organisation you can use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --github --org myname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will be prompted for the repositories you wish to import. Use the cursor keys and space bar to select/deselect the repositories to import.&lt;/p&gt;
&lt;p&gt;If you wish to default all repositories to be imported (then deselect any you don&amp;rsquo;t want add &lt;code&gt;--all&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --github --org myname --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To filter the list you can add a &lt;code&gt;--filter&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --github --org myname --all --filter foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;branch-patterns&#34;&gt;Branch patterns&lt;/h2&gt;
&lt;p&gt;When importing projects into Jenkins X we use git branch patterns to determine which branch names are automatically setup for CI/CD.&lt;/p&gt;
&lt;p&gt;Typically that may default to something like &lt;code&gt;master|PR-.*|feature.*&lt;/code&gt;. That means that the &lt;code&gt;master&lt;/code&gt; branch, any branch starting with &lt;code&gt;PR-&lt;/code&gt; or &lt;code&gt;feature&lt;/code&gt; will be scanned to look for a &lt;code&gt;pipeline.yml&lt;/code&gt; to setup the CI/CD pipelines.&lt;/p&gt;
&lt;p&gt;If you use another branch name than &lt;code&gt;master&lt;/code&gt; such as &lt;code&gt;develop&lt;/code&gt; or whatever you can change this pattern to be whatever you you like via the &lt;code&gt;--branches&lt;/code&gt; argument whenever you run &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstart/&#34;&gt;jx create quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --branches &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;develop|PR-.*|feature.*&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may wish to set this to just &lt;code&gt;.*&lt;/code&gt; to work with all branches,.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx import --branches &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuring-your-teams-branch-patterns&#34;&gt;Configuring your teams branch patterns&lt;/h2&gt;
&lt;p&gt;Usually a team uses the same naming conventions for branches so you may wish to configure the branch patterns at a team level so that they will be used by default if anyone in your team runs &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstart/&#34;&gt;jx create quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These settings are stored in the &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;
&lt;p&gt;To set the branch patterns for your team  &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_branchpattern/&#34;&gt;jx create branchpattern&lt;/a&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create branchpattern  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;develop|PR-.*|feature.*&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can then view the current branch patterns for your team via the &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_branchpattern/&#34;&gt;jx get branchpattern&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx get branchpattern
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>

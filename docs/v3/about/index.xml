<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ About</title>
    <link>https://jenkins-x.io/docs/v3/about/</link>
    <description>Recent content in About on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/docs/v3/about/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Overview</title>
      <link>https://jenkins-x.io/docs/v3/about/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/overview/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 3.x creates clearer separation of concerns between conceptual areas and releasable components.&lt;/p&gt;
&lt;iframe style=&#34;border:none&#34; width=&#34;800&#34; height=&#34;450&#34; src=&#34;https://whimsical.com/embed/SnJBgXG6jz9pqQewiDTNRt@2Ux7TurymNDXVRa4FpLk&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The diagram shows intent, as Jenkins X 3 is still in &lt;strong&gt;alpha&lt;/strong&gt; not all integrations are complete.&lt;/p&gt;
&lt;p&gt;Jenkins X 3 focuses on a few main areas:&lt;/p&gt;
&lt;h1 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h1&gt;
&lt;p&gt;Moving management of infrastructure outside of Jenkins X, favouring solutions like Terraform.  This reduces the surface area of Jenkins X and leverages expert OSS projects and communities around managing infrastructure and cloud resources.&lt;/p&gt;
&lt;h1 id=&#34;secret-management&#34;&gt;Secret Management&lt;/h1&gt;
&lt;p&gt;Adding an abstraction layer above secret management solutions so users can choose where the source of secrets can be stored, preferably outside of the Kubernetes cluster.  This is a good practice for disaster recovery scenarios.&lt;/p&gt;
&lt;h1 id=&#34;developer-experience&#34;&gt;Developer experience&lt;/h1&gt;
&lt;p&gt;Jenkins X 3.x includes a revived focus on developer experience.  The introduction of Jenkins X plugins for &lt;a href=&#34;https://octant.dev/&#34;&gt;Octant&lt;/a&gt; has addressed a long standing request from the open source community.  Jenkins X 3.x will be focussing on new visualisations  to help developers, operators and cross functioning teams.&lt;/p&gt;
&lt;p&gt;With the jx CLI refactoring described below Jenkins X 3.x is reviewing consistency and usability around CLI experience, please continue to raise &lt;a href=&#34;https://github.com/jenkins-x/jx-docs/issues&#34;&gt;issues&lt;/a&gt; and reach out in slack / &lt;a href=&#34;https://jenkinsx.discourse.group/&#34;&gt;discourse&lt;/a&gt; to help improve.&lt;/p&gt;
&lt;h1 id=&#34;maintainability&#34;&gt;Maintainability&lt;/h1&gt;
&lt;p&gt;Created a new &lt;code&gt;jx&lt;/code&gt; CLI which includes an extensible plugin model where each main subcommand off the jx base is it&amp;rsquo;s own releasable git repository.  This has significantly improved the Jenkins X codebase which helps with maintainability and contributions.&lt;/p&gt;
&lt;h1 id=&#34;removing-complexity-and-magic&#34;&gt;Removing complexity and magic&lt;/h1&gt;
&lt;p&gt;Removing complexity out of Jenkins X and reusing other solutions wherever possible.  Jenkins X 2.x was tightly coupled to helm 2 for example.  There were &lt;code&gt;jx&lt;/code&gt; CLI steps that wrapped helm commands when installing applications into the cluster which injected secrets from an internal Vault and ultimately made it very confusing for users and maintainers.&lt;/p&gt;
&lt;p&gt;Jenkins X 3.x prefers to avoid wrapping other CLIs unless a consistent higher level UX is being provided say around managing secrets and underlying commands being executed are clearly printed in users terminals.&lt;/p&gt;
&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;
&lt;p&gt;We had lots of feedback from users about the Jenkins X documentation was incomplete, inconsistent, old, not relevant or claimed to work but simply did not.&lt;/p&gt;
&lt;p&gt;Jenkins X 3.x will clearly mark areas that have not been tested and are more experimental while also providing a clearer capability matrix indicating to users the maturity of features and supported platforms.  Added to this we plan to make it easier for users, teams, companies to contribute to Jenkins X.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://github.com/jenkins-x/jx-community/tree/master/sig-docs&#34;&gt;special interest group&lt;/a&gt; for docs has been set up with the focus on Jenkins X 3.x and will continue to evolve.&lt;/p&gt;
&lt;h1 id=&#34;open-source&#34;&gt;Open source&lt;/h1&gt;
&lt;p&gt;Jenkins X 3.x is not only open source but developed and maintained in open source communities. Slack, Discourse and focused special interest groups provide ways for developers, users or keen people to be part of the Jenkins X journey.&lt;/p&gt;
&lt;p&gt;Jenkins X 3.x will provide clear extension points for non open source functionality to be added but not affect the OSS core.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Changes</title>
      <link>https://jenkins-x.io/docs/v3/about/changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/changes/</guid>
      <description>
        
        
        &lt;p&gt;You may also find the &lt;a href=&#34;https://jenkins-x.io/community/roadmap/&#34;&gt;Roadmap&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/docs/v3/about/maturity-matrix/&#34;&gt;Maturity Matrix&lt;/a&gt; documents useful:&lt;/p&gt;
&lt;h2 id=&#34;changes&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We now have &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/pipeline-catalog/&#34;&gt;Tekton Catalog integration&lt;/a&gt; so that you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easily &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/pipeline-catalog/#editing-pipelines&#34;&gt;edit any pipeline in any git repository&lt;/a&gt; by just modifying the &lt;code&gt;PipelineRun&lt;/code&gt; files in your &lt;code&gt;.ligthhouse/jenkins-x&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/pipeline-catalog/#add-new-pipelines&#34;&gt;add new pipelines to any git repository&lt;/a&gt; to reuse any &lt;code&gt;PipelineRun&lt;/code&gt; files you find from places like the &lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;tekton catalog&lt;/a&gt; into your repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have migrated most of the &lt;a href=&#34;https://github.com/jenkins-x/jx-cli#plugins&#34;&gt;Jenkins X Plugins&lt;/a&gt; over to the new client-go 1.19.x version now which is a fairly major change due to the API changes in client-go. So we&amp;rsquo;ve moved many of the &lt;a href=&#34;https://github.com/jenkins-x/jx-cli#libraries&#34;&gt;libraries&lt;/a&gt; over to use &lt;code&gt;v3&lt;/code&gt; instead such as using libraries like &lt;a href=&#34;https://github.com/jenkins-x/jx-api&#34;&gt;jx-api&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/jx-helpers&#34;&gt;jx-helpers&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you were planning on submitting a Pull Request on any plugin please make sure you rebase before submitting a Pull Request. Also upgrade to go &lt;code&gt;1.15.2&lt;/code&gt; ASAP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New &lt;a href=&#34;https://jenkins-x.io/docs/v3/about/maturity-matrix/&#34;&gt;Maturity Matrix&lt;/a&gt; published! You can now view at a glance the different capabilities across clouds and infrastructure. Many thanks &lt;a href=&#34;https://github.com/borntorock&#34;&gt;Nitin&lt;/a&gt; for all your hard work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preview environments how use &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt; as a declarative way to describe all of the dependencies you need in your preview environment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is all handled by the new &lt;a href=&#34;https://github.com/jenkins-x/jx-preview&#34;&gt;jx-preview&lt;/a&gt; plugin&lt;/li&gt;
&lt;li&gt;This also opens up the possibility of using multiple namespaces per preview; or using canary releases on multiple previews into a shared environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new Jenkins X version 3 CLI &lt;a href=&#34;https://github.com/jenkins-x/jx-cli&#34;&gt;jx-cli&lt;/a&gt; is now plugins all the way down; so that all of the features are implemented by &lt;a href=&#34;https://github.com/jenkins-x/jx-cli#plugins&#34;&gt;separate binary plugins&lt;/a&gt; making the CLI more modular and easier to work on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Benefits</title>
      <link>https://jenkins-x.io/docs/v3/about/benefits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/benefits/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;We can use vanilla tools like &lt;a href=&#34;https://helm.sh/&#34;&gt;helm 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt;, &lt;a href=&#34;https://kustomize.io/&#34;&gt;kustomize&lt;/a&gt;, &lt;a href=&#34;https://googlecontainertools.github.io/kpt/&#34;&gt;kpt&lt;/a&gt; to install, update or delete charts in any namespace without needing helm 2.x or tiller or custom code to manage &lt;code&gt;helm template&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;We can avoid all the complexities of the &lt;code&gt;jx step helm apply&lt;/code&gt; logic we used in Jenkins X 2.x&lt;/li&gt;
&lt;li&gt;Instead we can replace this with vanilla &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt; to allow optional templating of &lt;code&gt;values.yaml&lt;/code&gt; files when using helm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The new &lt;a href=&#34;https://jenkins-x.io/docs/v3/getting-started/&#34;&gt;Getting Started&lt;/a&gt; approach is much simpler, easier to configure and customise and is cleanly integrated with tools like Terraform and works well with different cloud infrastructure platforms.
&lt;ul&gt;
&lt;li&gt;The default install/upgrade pipelines check in all the generated kubernetes resources and custom resources as YAML so its easy to understand&lt;/li&gt;
&lt;li&gt;You can read more about the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md&#34;&gt;git layout here&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;config-root/cluster&lt;/code&gt; folder contains all the global cluster level resources like &lt;code&gt;ClusterRole&lt;/code&gt;, &lt;code&gt;Namespace&lt;/code&gt; or Custom Resources&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;config-root/namespaces/jx&lt;/code&gt; folder contains all the namespaced resources in the &lt;code&gt;jx&lt;/code&gt; namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This makes it easy to use flexible apply logic in different boot &lt;code&gt;Jobs&lt;/code&gt; with different RBAC (or a system admin could apply the cluster level resources for you by hand) - to make it easier to install Jenkins X on more locked down and restricted clusters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We use &lt;a href=&#34;https://github.com/godaddy/kubernetes-external-secrets&#34;&gt;Kubernetes External Secrets&lt;/a&gt; to provide a single way to manage secrets which supports the following back end systems:
&lt;ul&gt;
&lt;li&gt;Alibaba Cloud KMS Secret Manager&lt;/li&gt;
&lt;li&gt;AWS Secrets Manager&lt;/li&gt;
&lt;li&gt;Azure Key Vault&lt;/li&gt;
&lt;li&gt;GCP Secret Manager&lt;/li&gt;
&lt;li&gt;Hashicorp Vault&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It opens the door to a flexible &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/multi-cluster/&#34;&gt;multi-cluster support&lt;/a&gt; so that every cluster can be managed in the same canonical GitOps approach from a single git repository&lt;/li&gt;
&lt;li&gt;The new &lt;a href=&#34;https://jenkins-x.io/docs/v3/getting-started/&#34;&gt;getting started approach&lt;/a&gt; runs the boot pipeline as a &lt;code&gt;Job&lt;/code&gt; inside the Kubernetes cluster. This ensures consistency in tooling used and also improves security by avoiding having the secrets on a developers laptop.
&lt;ul&gt;
&lt;li&gt;The only thing you run on your local machine when installing Jenkins X is &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/operator/&#34;&gt;installing the git operator&lt;/a&gt; which is a simple helm chart.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Everything is now an app. So if you want to remove our &lt;code&gt;nginx-ingress&lt;/code&gt; chart and replace it with another ingress solution (knative / istio / gloo / ambassador / linkerd or whatever) just go ahead and use the &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/apps/&#34;&gt;apps commands&lt;/a&gt; to add/remove apps and have boot manage everything in a consistent way
&lt;ul&gt;
&lt;li&gt;e.g. here&amp;rsquo;s &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-kind-vault/blob/master/helmfile.yaml#L17&#34;&gt;an example&lt;/a&gt; of removing &lt;code&gt;chartmusem&lt;/code&gt; and &lt;code&gt;nexus&lt;/code&gt; and replacing it with &lt;code&gt;bucketrepo&lt;/code&gt; via a single simple yaml change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can install an app in a specific namespace if you wish
&lt;ul&gt;
&lt;li&gt;This also opens the door to using boot to setup multi-team installations where multiple teams use different namespaces but share services in the same cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The cluster GitOps repository is simpler and easier to keep in sync/rebase/merge with the upstream git repositories.
&lt;ul&gt;
&lt;li&gt;We use &lt;a href=&#34;https://googlecontainertools.github.io/kpt/&#34;&gt;kpt&lt;/a&gt; to do that for us&lt;/li&gt;
&lt;li&gt;We now include the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; inside your GitOps repository too inside the &lt;code&gt;versionStream&lt;/code&gt; directory after installation so that all the information about your installation is inside a single git repository so its simpler to test changes &amp;amp; ensure consistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can avoid composite charts to simplfiy configuration and upgrades&lt;/li&gt;
&lt;li&gt;We no longer use &lt;code&gt;exposecontroller&lt;/code&gt;, instead use regular helm configuration to create &lt;code&gt;Ingress&lt;/code&gt; resources and &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/faq/#how-do-i-configure-the-ingress-domain-in-dev-staging-or-production&#34;&gt;override domain names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;secret handling is currently much simpler using Kubernetes External Secrets for any secrets in any namespace or cluster for your own apps or for those used by Jenkins X.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Comparison</title>
      <link>https://jenkins-x.io/docs/v3/about/comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/comparison/</guid>
      <description>
        
        
        &lt;p&gt;This document outlines the similarities and differences of the 3.x approach for those who are aware of &lt;code&gt;jx boot&lt;/code&gt; with helm 2 in 2.x of Jenkins X.&lt;/p&gt;
&lt;h2 id=&#34;similarities-between-2x-and-3x&#34;&gt;Similarities between 2.x and 3.x&lt;/h2&gt;
&lt;p&gt;Just like classic boot with the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/&#34;&gt;jenkins-x-boot-config&lt;/a&gt; git repository, this new &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt; solution supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can install and upgrade Jenkins X via GitOps&lt;/li&gt;
&lt;li&gt;you can reuse helm charts from the internet, local charts or charts built by Jenkins X in any environment&lt;/li&gt;
&lt;li&gt;a YAML file is used to store all the charts that are applied during install/upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;differences-with-in-3x&#34;&gt;Differences with in 3.x&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;we support any permutation of tools such as: &lt;a href=&#34;https://helm.sh/&#34;&gt;helm 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile&lt;/a&gt;, &lt;a href=&#34;https://kustomize.io/&#34;&gt;kustomize&lt;/a&gt; and/or &lt;a href=&#34;https://googlecontainertools.github.io/kpt/&#34;&gt;kpt&lt;/a&gt; to create the kubernetes resources&lt;/li&gt;
&lt;li&gt;in 3.x the installation/upgrade of Jenkins X is run inside the kubernetes cluster via a &lt;code&gt;Job&lt;/code&gt; rather than on a developers laptop which helps with consistency and security.&lt;/li&gt;
&lt;li&gt;in 3.x we use a single git repository for each cluster; which can manage as many teams/namespaces as you like within the cluster
&lt;ul&gt;
&lt;li&gt;so any local environments like &lt;code&gt;Staging&lt;/code&gt; which reside in the same kubernetes cluster are defined in the same git repository in 3.x - whereas in 2.x we used a separate git repository for &lt;code&gt;Dev&lt;/code&gt;, &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; when sharing the same cluster.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;Dev&lt;/code&gt;, &lt;code&gt;Preprod&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environments are in separate kubernetes clusters then those will have a git repository each.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;any helm chart can be deployed in any namespace (previously we used a single namespace for all charts in the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/requirements.yaml&#34;&gt;env/requirements.yaml&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;instead of using &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/requirements.yaml&#34;&gt;env/requirements.yaml&lt;/a&gt; we now use a simple and more powerful &lt;a href=&#34;https://github.com/jenkins-x-labs/boot-helmfile-poc/blob/master/helmfile.yaml&#34;&gt;helmfile.yaml&lt;/a&gt; file which is similar but supports:
&lt;ul&gt;
&lt;li&gt;we can specify a &lt;code&gt;namespace&lt;/code&gt; on any chart&lt;/li&gt;
&lt;li&gt;we can add extra &lt;code&gt;values&lt;/code&gt; files to use with the chart to override the helm &lt;code&gt;values.yaml&lt;/code&gt; files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;instead of copying lots of &lt;code&gt;env/$appName/values*.yaml&lt;/code&gt; files into the boot config like we do in &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/&#34;&gt;these folders&lt;/a&gt; such as &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/lighthouse/values.tmpl.yaml&#34;&gt;the lighthouse/values.tmpl.yaml&lt;/a&gt; we can instead default all of these from the version stream at &lt;a href=&#34;https://github.com/jenkins-x/jxr-versions/tree/master/apps/jenkins-x/lighthouse&#34;&gt;apps/jenkins-x/lighthouse&lt;/a&gt; - which means the boot config git repository is much simpler, we can share more configuration with the version stream and it avoids lots of git merge/rebase issues.&lt;/li&gt;
&lt;li&gt;adding and removing apps in your GitOps repository causes those resources to be properly installed or uninstalled
&lt;ul&gt;
&lt;li&gt;you can also review exactly what kubernetes resources will change on the Pull Request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we no longer use a composite chart for &lt;code&gt;env/Chart.yaml&lt;/code&gt; and instead deploy each chart independently
&lt;ul&gt;
&lt;li&gt;this means that each chart has its own unique version number you can see in the &lt;code&gt;helmfile.yaml&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;we have done away with the complexity of &lt;code&gt;jenkins-x-platform&lt;/code&gt; (a composite chart containing logs of &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/requirements.yaml&#34;&gt;dependencies&lt;/a&gt; like &lt;code&gt;jenkins&lt;/code&gt; + &lt;code&gt;chartmuseum&lt;/code&gt; + &lt;code&gt;nexus&lt;/code&gt; etc) so that each chart can be added/removed independently or swapped out with a different version/distribution&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How it works</title>
      <link>https://jenkins-x.io/docs/v3/about/how-it-works/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/how-it-works/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The GitOps repository templates contain the source code, scripts and docs to help you get your cloud resources created (e.g. a kubernetes cluster and maybe buckets and/or a secret manager).&lt;/p&gt;
&lt;p&gt;Once you have created the GitOps repository from one of the &lt;a href=&#34;https://jenkins-x.io/docs/v3/getting-started/&#34;&gt;available templates and followed the instructions&lt;/a&gt; to set up your infrastructure you &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/operator/&#34;&gt;install the git operator&lt;/a&gt; via the &lt;a href=&#34;https://github.com/jenkins-x/jx-admin/blob/master/docs/cmd/jx-admin_operator.md&#34;&gt;jx admin operator&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    jx admin operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That command essentially installs the &lt;a href=&#34;https://github.com/jenkins-x/jx-git-operator&#34;&gt;git operator&lt;/a&gt; chart, passing in the git URL, username and token to run the boot process.&lt;/p&gt;
&lt;h3 id=&#34;git-operator&#34;&gt;Git Operator&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkins-x/jx-git-operator&#34;&gt;git operator&lt;/a&gt; works by polling the git repository looking for changes and running a kubernetes Job on each change. The Job resource is defined inside the git repository at &lt;strong&gt;.jx/git-operator/job.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can view the boot Job log via the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    jx admin log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you can browse the log in the Octant UI in the operations tab.&lt;/p&gt;
&lt;h3 id=&#34;boot-job&#34;&gt;Boot Job&lt;/h3&gt;
&lt;p&gt;The boot job runs on startup and on any git commit to the GitOps repository you used to install the operator.&lt;/p&gt;
&lt;p&gt;The boot job is defined in &lt;strong&gt;.jx/git-operator/job.yaml&lt;/strong&gt; in git and essentially:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs the generate step&lt;/li&gt;
&lt;li&gt;Runs the apply step&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;generate-step&#34;&gt;Generate step&lt;/h4&gt;
&lt;p&gt;This step is run in the following situations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On startup&lt;/li&gt;
&lt;li&gt;After each commit in a Pull Request&lt;/li&gt;
&lt;li&gt;Whenever a commit is made to the main branch which isnâ€™t a merge of a Pull Request merge&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The generate step does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resolves any missing values (cluster information, domain name) in the &lt;strong&gt;jx-values.yaml&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Resolves any missing versions or helm values.yaml files the &lt;strong&gt;helmfile.yaml&lt;/strong&gt; file&lt;/li&gt;
&lt;li&gt;Runs &lt;code&gt;helmfile template&lt;/code&gt; to generate the kubernetes resources for all the charts&lt;/li&gt;
&lt;li&gt;Copy all the generated resources into a tree of files in &lt;strong&gt;config-root/namespaces/myns/somechart/*.yaml&lt;/strong&gt; where
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;myns&lt;/strong&gt; is the namespace for the resources&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Somechart&lt;/strong&gt; is the name of the chart (or chart alias)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Any &lt;strong&gt;Secret&lt;/strong&gt; resource is converted to an &lt;strong&gt;ExternalSecret&lt;/strong&gt; so that it can be checked into git&lt;/li&gt;
&lt;li&gt;A few extra steps are run on the YAMLs to help deployments
&lt;ul&gt;
&lt;li&gt;Add a common label so that &lt;code&gt;kubectl apply --prune --selector&lt;/code&gt; can be used&lt;/li&gt;
&lt;li&gt;Add some hashes to resources so that changes to configurations causes a rolling upgrade&lt;/li&gt;
&lt;li&gt;Add support for the &lt;a href=&#34;https://github.com/pusher/wave&#34;&gt;pusher wave&lt;/a&gt; operator so that changing of secret values (inside, say, vault or Amazon/Azure/Google secret manager) causes a rolling upgrade of pods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;apply-step&#34;&gt;Apply step&lt;/h4&gt;
&lt;p&gt;This step is run on any commit to the main branch(after the generate step has completed).&lt;/p&gt;
&lt;p&gt;It essentially does &lt;code&gt;kubectl apply&lt;/code&gt; of the resources in the &lt;strong&gt;config-root&lt;/strong&gt; tree in git.&lt;/p&gt;
&lt;p&gt;The apply step could be performed by other tools if need be (e.g. Google Anthos Config Sync or flux).&lt;/p&gt;
&lt;h3 id=&#34;promotion&#34;&gt;Promotion&lt;/h3&gt;
&lt;p&gt;When you create a quickstart or import a new project a new release is created then promotion is triggered just like in Jenkins X 2.x.&lt;/p&gt;
&lt;p&gt;One change from Jenkins X 2.x is we default to including the specific kubernetes resources in git; rather than, say, just the name of a helm chart and the version.&lt;/p&gt;
&lt;p&gt;So what tends to happen is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the promote step in a pipeline creates a Pull Request on the GitOps repository for the cluster to add or upgrade a helm chart and version&lt;/li&gt;
&lt;li&gt;The above Generate and Apply steps run to fill in more details to the Pull Request of the actual kubernetes resources that will be added, modified or removed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you will see 2 commits on a typical promotion pull request; the high level change of the helm chart(s) and versions then the detail of the actual changes that will apply to kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;comparison-to-2x&#34;&gt;Comparison to 2.x&lt;/h2&gt;
&lt;p&gt;From a high level Jenkins X 3.x similar to 2.x in that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use GitOps to manage applications, configurations and versions; keeping everything but secret values in git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However weâ€™ve made a few changes in 3.x:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have a &lt;a href=&#34;https://jenkins-x.io/docs/v3/getting-started/&#34;&gt;simpler UX now for setting up Jenkins X&lt;/a&gt; which uses a library of GitOps repository templates you can start from
&lt;ul&gt;
&lt;li&gt;This lets you choose the closest example to the kind of infrastructure, tools and secret store you want to use so itâ€™s easier to get started if your requirements fit the common quickstarts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The setup/install/upgrade process runs inside kubernetes rather than on a developers laptop
&lt;ul&gt;
&lt;li&gt;This avoids all kinds of issues with different installations of tools like git, kubectl, helm etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In 2.x we always had a git repository for Dev, Staging and Production. In 3.x if those environments are all inside the same cluster we use the same git repository for configuring cluster level resources and resources in any namespaces.
&lt;ul&gt;
&lt;li&gt;So by default there is 1 git repository with Jenkins X 3.x for the installation&lt;/li&gt;
&lt;li&gt;Whenever you create separate clusters (e.g. for muticluster support and you want Staging / Production environments to be separate), then each cluster gets its own git repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Maturity Level Matrix</title>
      <link>https://jenkins-x.io/docs/v3/about/maturity-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/about/maturity-matrix/</guid>
      <description>
        
        
        &lt;p&gt;This maturity matrix descibes the status of the Jenkins X 3.x &lt;strong&gt;Alpha&lt;/strong&gt; release.  This will continue to evolve as we progress towards Beta.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/v3/jx-v3alpha-maturity-matrix.png&#34;&gt;
&lt;img src=&#34;https://jenkins-x.io/images/v3/jx-v3alpha-color-rep.png&#34;&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Developer Guides</title>
    <link>https://jenkins-x.io/docs/v3/develop/</link>
    <description>Recent content in Developer Guides on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/docs/v3/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: UI</title>
      <link>https://jenkins-x.io/docs/v3/develop/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/develop/ui/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Creating projects</title>
      <link>https://jenkins-x.io/docs/v3/develop/create-project/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/develop/create-project/</guid>
      <description>
        
        
        &lt;p&gt;To create or import projects you will need to get the &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/jx3/&#34;&gt;jx 3.x binary&lt;/a&gt; and put it on your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-project-from-a-quickstart&#34;&gt;Create a new project from a quickstart&lt;/h2&gt;
&lt;p&gt;To create a new project from a quickstart template use the &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_quickstart.md&#34;&gt;jx project quickstart&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx project quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the old Jenkins X 2.x alias &lt;code&gt;jx quickstart&lt;/code&gt; is still supported but will be deprecated eventually.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://jenkins-x.io/docs/create-project/creating/&#34;&gt;quickstart documentation&lt;/a&gt; for more information&lt;/p&gt;
&lt;h2 id=&#34;import-an-existing-project&#34;&gt;Import an existing project&lt;/h2&gt;
&lt;p&gt;To create a new project from a quickstart template use the &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md&#34;&gt;jx project import&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jx project import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the &lt;a href=&#34;https://jenkins-x.io/docs/create-project/creating/import/&#34;&gt;import documentation&lt;/a&gt; for more information&lt;/p&gt;
&lt;p&gt;Note that the old Jenkins X 2.x alias &lt;code&gt;jx import&lt;/code&gt; is still supported but will be deprecated eventually.&lt;/p&gt;
&lt;h3 id=&#34;importing-projects-with-jenkinfiles&#34;&gt;Importing projects with Jenkinfiles&lt;/h3&gt;
&lt;p&gt;Note that Jenkins X 3.x includes &lt;a href=&#34;jenkinsfile&#34;&gt;new support for handling of importing Jenkinsfiles&lt;/a&gt; if you are trying to combine Jenkins and Tekton together in Jenkins X.&lt;/p&gt;
&lt;h2 id=&#34;top-level-wizard&#34;&gt;Top level wizard&lt;/h2&gt;
&lt;p&gt;This gives you all of the above options in an interactive wizard via &lt;a href=&#34;https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project.md&#34;&gt;jx project&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;improvements&#34;&gt;Improvements&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve made a number of improvements over the 2.x version of &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when importing to Jenkins X we ask which build pack you wish to use (e.g. classic or kubernetes) so that you can import java libraries or node modules easily in addition to kubernetes native applications&lt;/li&gt;
&lt;li&gt;the wizard will prompt you for the pack name (language) once the detection has occurred. Usually the pack name detection is good enough. e.g. detecting &lt;code&gt;maven&lt;/code&gt; but you may wish to change the version of the pack (e.g. &lt;code&gt;maven-java11&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;when importing a project and you are using Jenkins X and Jenkins in the same cluster you get asked whether you want to import the project into &lt;a href=&#34;https://jenkins-x.io/&#34;&gt;Jenkins X&lt;/a&gt; or to pick which Jenkins server to use&lt;/li&gt;
&lt;li&gt;we support 2 modes of importing projects to &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/jenkins/&#34;&gt;a remote Jenkins server&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;regular Jenkins import where a Multi Branch Project is used and Jenkins processes the webhooks&lt;/li&gt;
&lt;li&gt;ChatOps mode: we use &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; to handle the webhooks and ChatOps and then when triggered we trigger regular pipelines inside the Jenkins server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if your repository contains a &lt;code&gt;Jenkinsfile&lt;/code&gt; and you choose to import into a Jenkins server we don&amp;rsquo;t run the build packs and generate a &lt;code&gt;Dockerfile&lt;/code&gt;, helm chart or &lt;code&gt;jenkins-x.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;changes-since-2x&#34;&gt;Changes since 2.x:&lt;/h2&gt;
&lt;p&gt;For those of you who know &lt;a href=&#34;https://jenkins-x.io/&#34;&gt;Jenkins X&lt;/a&gt; and have used &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; before the new project wizard is a little different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the commands are a little different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jx create import&lt;/code&gt; is now &lt;code&gt;jx project import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jx create quickstart&lt;/code&gt; is now &lt;code&gt;jx project quickstart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jx create project&lt;/code&gt; is now &lt;code&gt;jx project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jx create spring&lt;/code&gt; is now &lt;code&gt;jx project spring&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Apps</title>
      <link>https://jenkins-x.io/docs/v3/develop/apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/develop/apps/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 3.x supports the &lt;code&gt;helmfile.yaml&lt;/code&gt; file format from the &lt;a href=&#34;https://github.com/roboll/helmfile&#34;&gt;helmfile project&lt;/a&gt; that can be used to define the &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt; &lt;a href=&#34;https://helm.sh/docs/topics/charts/&#34;&gt;charts&lt;/a&gt; you wish to install and their namespace.&lt;/p&gt;
&lt;h3 id=&#34;adding-charts&#34;&gt;Adding Charts&lt;/h3&gt;
&lt;p&gt;You can then add any charts you wish into the &lt;code&gt;helmfile.yaml&lt;/code&gt; file in the &lt;code&gt;releases:&lt;/code&gt; section as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;releases&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: jetstack/cert-manager 
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: flagger/flagger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; properties of the charts get resolved during deployment via the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; or you can specify them explicitly.&lt;/p&gt;
&lt;p&gt;The prefix of the chart name is the chart repository name. There are a few chart repository names already defined in the &lt;code&gt;helmfile.yaml&lt;/code&gt; in the &lt;code&gt;repositories:&lt;/code&gt; section. You can add any number of chart repositories to the &lt;code&gt;helmfile.yaml&lt;/code&gt; that you need.&lt;/p&gt;
&lt;p&gt;We are trying to increase consistency and use canonical names in &lt;code&gt;helmfile.yaml&lt;/code&gt; files for chart repositories. You can see the default &lt;a href=&#34;https://github.com/jenkins-x/jxr-versions/blob/master/charts/repositories.yml&#34;&gt;chart repository names and URLs in this file&lt;/a&gt;. Feel free to use any name and URL you like.&lt;/p&gt;
&lt;h4 id=&#34;using-the-cli&#34;&gt;Using the CLI&lt;/h4&gt;
&lt;p&gt;There is also a simple CLI command &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_helmfile_add.md&#34;&gt;jx gitops helmfile add&lt;/a&gt; to add charts into the &lt;code&gt;helmfile.yaml&lt;/code&gt; but its just as easy to do by hand really.&lt;/p&gt;
&lt;h3 id=&#34;adding-resources&#34;&gt;Adding resources&lt;/h3&gt;
&lt;p&gt;If you want to create one or more kubernetes resources that are not already packaged as a helm chart you can easily add these into your cluster git repository using the &lt;em&gt;local chart&lt;/em&gt; layout.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a directory called &lt;code&gt;charts/myname/templates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add whatever kubernetes resources you need into &lt;code&gt;charts/myname/templates/myresource.yaml&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Use as many files as you wish, just makes sure you use the &lt;code&gt;.yaml&lt;/code&gt; extension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create a &lt;code&gt;charts/myname/Chart.yaml&lt;/code&gt; file and populate the default helm metadata like &lt;a href=&#34;https://github.com/cdfoundation/tekton-helm-chart/blob/master/charts/tekton-pipeline/Chart.yaml&#34;&gt;this example Chart.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;now reference the &lt;code&gt;charts/myname&lt;/code&gt; directory in your &lt;code&gt;helmfile.yaml&lt;/code&gt; file in the &lt;code&gt;releases:&lt;/code&gt; section via&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;releases&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: ./charts/myname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a Pull Request. You should see the effective kubernetes resources show up as a commit on your Pull Request&lt;/p&gt;
&lt;h3 id=&#34;customising-charts&#34;&gt;Customising charts&lt;/h3&gt;
&lt;p&gt;You can add a custom &lt;code&gt;values.yaml&lt;/code&gt; file to any chart and reference it in the &lt;code&gt;values:&lt;/code&gt; section of the &lt;code&gt;helmfile.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;e.g. to customise a chart such as &lt;code&gt;nginx-ingress&lt;/code&gt; you can create a file at &lt;code&gt;charts/nginx-ingress/values.yaml&lt;/code&gt;. You can then reference the file in the &lt;code&gt;helmfile.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;releases&lt;/span&gt;:
...
- &lt;span style=&#34;color:#66d9ef&#34;&gt;chart&lt;/span&gt;: stable/nginx-ingress
  &lt;span style=&#34;color:#66d9ef&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.39.1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: nginx-ingress
  &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt;: nginx
  &lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt;:
  - versionStream/charts/stable/nginx-ingress/values.yaml.gotmpl
  - charts/nginx-ingress/values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example we added &lt;code&gt;charts/nginx-ingress/values.yaml&lt;/code&gt; after the version stream configuration thats automatically added for you.&lt;/p&gt;
&lt;p&gt;You can also use a file called &lt;code&gt;values.yaml.gotmpl&lt;/code&gt; if you wish to use go templating of the values file. For example this lets you reference properties from the &lt;code&gt;jx-requirements.yml&lt;/code&gt; file via expressions like &lt;code&gt;{{ .Values.jxRequirements.ingress.domain }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To see an example of this in action check out the &lt;a href=&#34;https://github.com/jenkins-x/jxr-versions/blob/master/charts/jenkins-x/tekton/values.yaml.gotmpl&#34;&gt;charts/jenkins-x/tekton/values.yaml.gotmpl&lt;/a&gt; file in the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that many apps are already configured to make use of the &lt;code&gt;jx-requirements.yml&lt;/code&gt; settings via the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; - but you are free to add your own custom configuration.&lt;/p&gt;
&lt;h3 id=&#34;version-stream-folder&#34;&gt;Version Stream folder&lt;/h3&gt;
&lt;p&gt;You may have noticed there is a folder called &lt;code&gt;versionStream&lt;/code&gt; inside your clusters git repository. The &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; is used to provide shared configuration such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the verified versions of charts, images and git repositories which have been tested to work together&lt;/li&gt;
&lt;li&gt;the default namespace and configuration of charts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means we can share canonical files and metadata across clusters and git repositories.&lt;/p&gt;
&lt;h4 id=&#34;keeping-the-version-stream-in-sync&#34;&gt;Keeping the version stream in sync&lt;/h4&gt;
&lt;p&gt;When you &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/upgrade/#cluster&#34;&gt;upgrade your cluster&lt;/a&gt; the local &lt;code&gt;versionStream&lt;/code&gt; folder will be upgraded to the latest upstream version stream contents.&lt;/p&gt;
&lt;p&gt;We mentioned &lt;a href=&#34;#customising-charts&#34;&gt;above how you can cusomize charts&lt;/a&gt;. Please try keep as many of your customizations as you can outside of the &lt;code&gt;versionStream&lt;/code&gt; folder as you can so that there&amp;rsquo;s no risk of your configurations getting overridden or causing merge conflicts with upstream &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; changes.&lt;/p&gt;
&lt;p&gt;Any changes in the local &lt;code&gt;helmfile.yaml&lt;/code&gt; or &lt;code&gt;charts&lt;/code&gt; folder are excluded by the &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/upgrade/#cluster&#34;&gt;upgrade mechanism&lt;/a&gt; and so are totally safe.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipeline Catalogs</title>
      <link>https://jenkins-x.io/docs/v3/develop/pipeline-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/develop/pipeline-catalog/</guid>
      <description>
        
        
        &lt;p&gt;As part of the &lt;a href=&#34;https://github.com/jenkins-x/enhancements/issues/37&#34;&gt;Tekton Catalog enhancement proposal&lt;/a&gt; we&amp;rsquo;ve improved support for Tekton in Jenkins X so that you can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easily &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/pipeline-catalog/#editing-pipelines&#34;&gt;edit any pipeline in any git repository&lt;/a&gt; by just modifying the &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; files in your &lt;code&gt;.ligthhouse/jenkins-x&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-new-taskspipelines-by-hand&#34;&gt;add new pipelines to any git repository&lt;/a&gt; to reuse any &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt; files you find from places like the &lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;tekton catalog&lt;/a&gt; in your repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-changes&#34;&gt;Source changes&lt;/h2&gt;
&lt;p&gt;If you &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/upgrade/#cluster&#34;&gt;upgrade your cluster to the latest version stream&lt;/a&gt; then you will find if you &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/create-project/#create-a-new-project-from-a-quickstart&#34;&gt;create a new quickstart&lt;/a&gt; that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt; directory contains the default CI/CD pipelines for Jenkins X with these files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;triggers.yaml&lt;/code&gt; to define the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config&#34;&gt;TriggerConfig&lt;/a&gt; which has a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec&#34;&gt;spec field&lt;/a&gt; which defines &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; (i.e. Pull Request pipelines and releases).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pullrequest.yaml&lt;/code&gt; defines the Pull Request pipeline using a Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release.yaml&lt;/code&gt; defines the Release pipeline using a Tekton Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; files are no longer used by default in new quickstarts instead we use the above. Note if you have projects using &lt;code&gt;jenkins-x.yml&lt;/code&gt; files they are still supported if you &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/create-project/#import-an-existing-project&#34;&gt;import them into v3&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/jenkins-x-plugins/jx-v2-tekton-converter/blob/main/README.md&#34;&gt;use this tool to migrate them to tekton pipelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editing-pipelines&#34;&gt;Editing pipelines&lt;/h2&gt;
&lt;p&gt;You can now easily modify any of the &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources in any git repository - just look in each folder inside &lt;code&gt;.lighthouse&lt;/code&gt; for the YAML files to edit.&lt;/p&gt;
&lt;p&gt;e.g. for the default Jenkins X CI/CD pipelines edit either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pullrequest.yaml&lt;/code&gt; to edit the Pull Request &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release.yaml&lt;/code&gt; to edit the Release &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test out changes to the Pull Request pipeline by submitting changes in a Pull Request. Changes to a release only take place after merging the change to the main branch.&lt;/p&gt;
&lt;h2 id=&#34;ide-support&#34;&gt;IDE support&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; or &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;Goland&lt;/a&gt; you might find the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14096-tekton-pipelines-by-red-hat&#34;&gt;RedHat&amp;rsquo;s intellij-tekton plugin&lt;/a&gt; useful for editing pipelines.&lt;/p&gt;
&lt;p&gt;Though until &lt;a href=&#34;https://github.com/redhat-developer/intellij-tekton/issues/263&#34;&gt;this issue is fixed&lt;/a&gt; you can&amp;rsquo;t use it at the same time as the excellent &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10485-kubernetes&#34;&gt;intellij-kubernetes plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you use &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; you may want to try &lt;a href=&#34;https://github.com/redhat-developer/vscode-tekton#tekton-pipelines-extension--&#34;&gt;Red Hat&amp;rsquo;s Tekton Pipelines Extension tekton&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-tasks-from-the-tekton-catalog&#34;&gt;Adding Tasks from the Tekton Catalog&lt;/h2&gt;
&lt;p&gt;The new &lt;a href=&#34;https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_import.md&#34;&gt;jx pipeline import&lt;/a&gt; command can be used to import &lt;code&gt;Task&lt;/code&gt; resources from the &lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;Tekton Catalog&lt;/a&gt; and using them inside your project.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;https://asciinema.org/a/368282&#34;&gt;demo of this in action&lt;/a&gt;:&lt;/p&gt;
&lt;script src=&#34;https://asciinema.org/a/368282.js&#34; id=&#34;asciicast-368282&#34; async&gt;&lt;/script&gt;
&lt;p&gt;The tekton Task resources are copied into your &lt;code&gt;.lighthouse&lt;/code&gt; directory in a folder using &lt;code&gt;kpt&lt;/code&gt; so that you can modify things locally if you need to and can &lt;a href=&#34;#upgrading-pipelines-and-helm-charts&#34;&gt;upgrade your local copy with upstream changes&lt;/a&gt; via the &lt;code&gt;jx gitops upgrade&lt;/code&gt; command described below.&lt;/p&gt;
&lt;h2 id=&#34;add-new-taskspipelines-by-hand&#34;&gt;Add new tasks/pipelines by hand&lt;/h2&gt;
&lt;p&gt;You can add new pipelines by hand into a new folder inside &lt;code&gt;.lighthouse&lt;/code&gt; at any time.&lt;/p&gt;
&lt;p&gt;To setup a &lt;em&gt;trigger&lt;/em&gt; so that &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; will start your pipeline on a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; (i.e. for Pull Requests) or for &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; (i.e. releases on main branches) you need to also add a &lt;code&gt;triggers.yaml&lt;/code&gt; file which uses the lighthouse &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config&#34;&gt;trigger config file file format&lt;/a&gt; with &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec&#34;&gt;this spec field&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You could look at the default &lt;code&gt;.lighthouse/jenkins-x&lt;/code&gt; directory to see how all this works. The &lt;code&gt;triggers.yaml&lt;/code&gt; file then refers to the tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;, &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt; or &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; files via the &lt;code&gt;source:&lt;/code&gt; attribute in a &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; entry.&lt;/p&gt;
&lt;h2 id=&#34;changing-the-triggers&#34;&gt;Changing the triggers&lt;/h2&gt;
&lt;p&gt;You can modify the &lt;code&gt;.lighthouse/*/triggers.yaml&lt;/code&gt; file to modify the  &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; entries to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;customise the &lt;code&gt;rerun_command&lt;/code&gt; or &lt;code&gt;trigger&lt;/code&gt; ChatOps comments for &lt;code&gt;presubmits&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;configure the &lt;code&gt;branches&lt;/code&gt; patterns for &lt;code&gt;postsubmit&lt;/code&gt; triggers&lt;/li&gt;
&lt;li&gt;add new entries for new pipelines; or pipelines with different &lt;code&gt;pipeline_run_params&lt;/code&gt; entries to parameterise existing &lt;code&gt;PipelineRun&lt;/code&gt; files differently&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;upgrading-pipelines-and-helm-charts&#34;&gt;Upgrading pipelines and helm charts&lt;/h2&gt;
&lt;p&gt;You can upgrade any git repository in the same way you upgrade your &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/upgrade/#cluster&#34;&gt;clusters git repository&lt;/a&gt; by running the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_update.md&#34;&gt;jx gitops upgrade&lt;/a&gt; command inside a git checkout of your repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd my-quickstart-thingy
jx gitops upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then upgrade any helm charts or pipeline catalogs you are using in your git repository with the latest versions.&lt;/p&gt;
&lt;p&gt;After running this command you will usually have some changes in &lt;code&gt;git&lt;/code&gt; you can review. If you are happy with the changes commit them and create a Pull Request so that they can get applied on your cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add *
git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fix: upgrade pipeline catalog&amp;#34;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible that you can have merge conflicts.&lt;/p&gt;
&lt;p&gt;You can follow the inline git helper messages to resolve conflicts - or use your IDE to help figure out the merge issues more easily.&lt;/p&gt;
&lt;h2 id=&#34;diagnosing-problems&#34;&gt;Diagnosing problems&lt;/h2&gt;
&lt;p&gt;If you edit pipelines or lighthouse trigger files and things don&amp;rsquo;t work there&amp;rsquo;s a couple of places the errors may show up.&lt;/p&gt;
&lt;p&gt;We will hopefully add much better linting/error messages on Pull Requests soon to give you better and faster feedback.&lt;/p&gt;
&lt;p&gt;Until then you could look in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;lighthouse-webhooks-*&lt;/code&gt; pod(s) which take the webhooks from your git provider and convert them into &lt;code&gt;lighthousejob&lt;/code&gt; resources&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;lighthouse-tekton-controller-*&lt;/code&gt; pod(s) which watch for &lt;code&gt;lighthousejob&lt;/code&gt; resources and create the Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;tekton-controller-*&lt;/code&gt;  pod(s) watches for Tekton &lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt; resources and conver them into Kubernetes &lt;code&gt;Pod&lt;/code&gt; resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any errors will usually be recorded in the &lt;code&gt;status&lt;/code&gt; field of the resource that has issues (&lt;code&gt;lighthousejob&lt;/code&gt; or &lt;code&gt;pipelinerun&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;reference-guide&#34;&gt;Reference Guide&lt;/h2&gt;
&lt;p&gt;The following are the links to the various configuration file formats:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt; resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tekton.dev/docs/pipelines/tasks/#configuring-a-task&#34;&gt;Task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tekton.dev/docs/pipelines/taskruns/#configuring-a-taskrun&#34;&gt;TaskRun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline&#34;&gt;Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun&#34;&gt;PipelineRun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;Lighthouse&lt;/a&gt; &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config&#34;&gt;TriggerConfig&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit&#34;&gt;presubmits&lt;/a&gt; for triggering pipelines on Pull Request&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit&#34;&gt;postsubmits&lt;/a&gt; for triggering pipelines on a push to a branch (e.g. releasing)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;parameters-and-environment-variables&#34;&gt;Parameters and Environment Variables&lt;/h3&gt;
&lt;p&gt;The following tekton parameters and environment variables are available inside the pipeline catalog. They are populated by &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BUILD_ID&lt;/code&gt; a unique long number for this build&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOB_NAME&lt;/code&gt; the name of the build which matches the name in the &lt;code&gt;presubmit&lt;/code&gt; or &lt;code&gt;postsubmit&lt;/code&gt; in your &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; &lt;code&gt;triggers.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOB_SPEC&lt;/code&gt; is of the form &lt;code&gt;type:presumit&lt;/code&gt; or &lt;code&gt;type:postsubmit&lt;/code&gt; so you know what kind of job you are inside&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PULL_BASE_REF&lt;/code&gt; the base branch name. e.g. &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PULL_BASE_SHA&lt;/code&gt; the base git SHA being built&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPO_NAME&lt;/code&gt; the name of the git repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPO_OWNER&lt;/code&gt; the owner of the git repository (a user or organisation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPO_URL&lt;/code&gt; the git URL to clone the repository being built&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pull Requests &lt;code&gt;presubmit&lt;/code&gt; also have the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PULL_NUMBER&lt;/code&gt; the number of the pull request&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PULL_PULL_REF&lt;/code&gt; the git reference of the pull request; something like &lt;code&gt;refs/pull/123/head&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PULL_PULL_SHA&lt;/code&gt;  the git SHA of the pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;additional-environment-variables&#34;&gt;Additional environment variables&lt;/h4&gt;
&lt;p&gt;If your pipeline runs the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_variables.md&#34;&gt;jx gitops variables&lt;/a&gt; command it will lazily create the &lt;code&gt;.jx/variables.sh&lt;/code&gt; script which will default a bunch more environment variables if they are not already populated in your git repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that these variables are dynamically created during the execution of the pipeline pod; so to access them you must &lt;code&gt;source .jx/variables.sh&lt;/code&gt; inside your step.&lt;/p&gt;
&lt;p&gt;So that your step looks something like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;- &lt;span style=&#34;color:#66d9ef&#34;&gt;image&lt;/span&gt;: gcr.io/jenkinsxio/jx-cli:latest
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: my-step
  &lt;span style=&#34;color:#66d9ef&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    #!/usr/bin/env bash&lt;/span&gt;
    source /workspace/source/.jx/variables.sh
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;now we can use variables like this: ${VERSION}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Available variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;APP_NAME&lt;/code&gt; the name of the application which defaults to the &lt;code&gt;$REPO_NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BRANCH_NAME&lt;/code&gt; is really the pull request name so something like &lt;code&gt;PR-123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BUILD_NUMBER&lt;/code&gt; the human readable short build number relative to the repository and branch. So builds start at 1 and go up incrementally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOCKERFILE_PATH&lt;/code&gt;  the location of the &lt;code&gt;Dockerfile&lt;/code&gt; if it exists&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOCKER_REGISTRY&lt;/code&gt; the host name of the registry being used for image builds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOCKER_REGISTRY_ORG&lt;/code&gt; the owner in the container registry (user name or organisation) to push images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JX_CHART_REPOSITORY&lt;/code&gt; the URL of the helm chart repository to use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PIPELINE_KIND&lt;/code&gt; the kind of pipeline being run &lt;code&gt;pullrequest&lt;/code&gt; or &lt;code&gt;release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VERSION&lt;/code&gt; the version number used for releases (and used to tag images and git etc) or the preview version for pull requests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to define dynamic environment variables in one step for use in later steps you can append new variables to &lt;code&gt;.jx/variables.sh&lt;/code&gt; and then add the &lt;code&gt;source .jx/variables.sh&lt;/code&gt; later in your pipeline&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>https://jenkins-x.io/docs/v3/develop/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/v3/develop/faq/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-do-i-list-the-apps-that-have-been-deployed&#34;&gt;How do I list the apps that have been deployed?&lt;/h2&gt;
&lt;p&gt;You can see the helm charts that are installed along witht their version and namespaces by looking at the &lt;code&gt;releases&lt;/code&gt; section of your &lt;code&gt;helmfile.yaml&lt;/code&gt; file in your cluster git repository.&lt;/p&gt;
&lt;p&gt;You can view all of the current &lt;a href=&#34;https://jenkins-x.io/docs/build-test-preview/preview/&#34;&gt;Preview Environments&lt;/a&gt; via&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There could be some additional charts installed via Terraform for the &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/operator/&#34;&gt;git operator&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/health/&#34;&gt;health subsystem&lt;/a&gt; which can be viewed via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm list --all-namespaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-customise-an-app-in-an-environment&#34;&gt;How do I customise an App in an Environment&lt;/h2&gt;
&lt;p&gt;With the new helm 3 based boot every environment uses boot - so there is a single way to configure anything whether its in the &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt; environment and whether or not you are using &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/multi-cluster/&#34;&gt;multiple clusters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/apps/#customising-charts&#34;&gt;how to customise a chart&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-configure-the-ingress-domain-in-dev-staging-or-production&#34;&gt;How do I configure the ingress domain in Dev, Staging or Production?&lt;/h2&gt;
&lt;p&gt;With the new helm 3 based boot every environment uses boot - so there is a single way to configure anything whether its in the &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt; environment and whether or not you are using &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/multi-cluster/&#34;&gt;multiple clusters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can override the domain name for use in all apps within an environment by modifying the &lt;code&gt;jx-requirements.yml&lt;/code&gt; in the git repository for the &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: mydomain.com 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also by default there is a namespace specific separator added. So if your service is &lt;code&gt;cheese&lt;/code&gt; the full domain name would be something like &lt;code&gt;cheese.jx-staging.mydomain.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you wish to avoid the namespace specific separator if each environment already has its own unique &lt;code&gt;domain&lt;/code&gt; value then you can specify:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: mydomain.com  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;namespaceSubDomain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wish to change any of these values for a single app only then you can use the &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/apps/#customising-charts&#34;&gt;app customisation mechanism&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;e.g. for an app called &lt;code&gt;mychart&lt;/code&gt; you can create a file called &lt;code&gt;apps/mychart/values.yaml&lt;/code&gt; in the git repository for your environment and add the following YAML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;jxRequirements&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;domain&lt;/span&gt;: mydomain.com  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;namespaceSubDomain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-configure-the-ingress-tls-certificate-in-dev-staging-or-production&#34;&gt;How do I configure the ingress TLS certificate in Dev, Staging or Production?&lt;/h2&gt;
&lt;p&gt;You can specify the TLS certificate to use for the &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt; environment by modifying the &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in the environments git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;secretName&lt;/span&gt;: my-tls-secret-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then be applied to all the Jenkins X ingress resources for things like &lt;code&gt;lighthouse&lt;/code&gt; or &lt;code&gt;nexus&lt;/code&gt; - plus any apps you deploy to &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to override the TLS secret name for a specific app in a specific environment then rather like the &lt;a href=&#34;#how-do-i-configure-the-ingress-domain-in-dev-staging-or-production&#34;&gt;above question&lt;/a&gt; you can use the &lt;a href=&#34;https://jenkins-x.io/docs/v3/develop/apps/#customising-charts&#34;&gt;app customisation mechanism&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;e.g. for an app called &lt;code&gt;mychart&lt;/code&gt; you can create a file called &lt;code&gt;apps/mychart/values.yaml&lt;/code&gt; in the git repository for your environment and add the following YAML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;jxRequirements&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;ingress&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;tls&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;secretName&lt;/span&gt;: my-tls-secret-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-use-a-custom-container-registry&#34;&gt;How do I use a custom container registry?&lt;/h2&gt;
&lt;p&gt;To allow a pipeline to be able to push to a container registry you can add this secret&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create secret generic container-registry-auth  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;myserver.com &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;myuser &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mypwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will then take effect the next time a commit merges on your cluster git repository e.g. next time you &lt;a href=&#34;https://jenkins-x.io/docs/v3/guides/upgrade/#cluster&#34;&gt;upgrade your cluster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The various container registry secrets get merged into a &lt;code&gt;Secret&lt;/code&gt; called &lt;code&gt;tekton-container-registry-auth&lt;/code&gt; in the &lt;code&gt;jx&lt;/code&gt; namespace which is associated with the default pipeline &lt;code&gt;ServiceAccount&lt;/code&gt; &lt;code&gt;tekton-bot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want all pipelines to use this container registry then modify the &lt;code&gt;cluster.registry&lt;/code&gt; field in your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cluster&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;registry&lt;/span&gt;: myserver.com 
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Otherwise you can enable this new container registry on a specific application/repository by adding this &lt;code&gt;.jx/variables.sh&lt;/code&gt; file into the git repository if it doesn&amp;rsquo;t exist&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export DOCKER_REGISTRY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myserver.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-uninstall-jenkins-x&#34;&gt;How do I uninstall Jenkins X?&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t yet have a nice uninstall command&lt;/p&gt;
&lt;h2 id=&#34;why-does-jenkins-x-fail-to-download-plugins&#34;&gt;Why does Jenkins X fail to download plugins?&lt;/h2&gt;
&lt;p&gt;When I run a &lt;code&gt;jx&lt;/code&gt; command I get an error like&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt; Get https://github.com/jenkins-x/jx-..../releases/download/v..../jx-.....tar.gz: dial tcp: i/o timeout&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This sounds like a network problem; the code in &lt;code&gt;jx&lt;/code&gt; is trying to download from &lt;code&gt;github.com&lt;/code&gt; and your laptop is having trouble resolving the &lt;code&gt;github.com&lt;/code&gt; domain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do you have a firewall / VPN / HTTP proxy blocking things?&lt;/li&gt;
&lt;li&gt;is your &lt;code&gt;/etc/resolv.conf&lt;/code&gt; causing issues? e.g. if you have multiple entries for your company VPN?&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – Working with Jenkins X Pipelines</title>
    <link>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/</link>
    <description>Recent content in Working with Jenkins X Pipelines on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Creating Jenkins X Pipelines from scratch</title>
      <link>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/newpipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/newpipeline/</guid>
      <description>
        
        
        &lt;p&gt;If you’re starting out with a blank canvas, it’s still a good idea to have a look at the &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34;&gt;quickstart templates&lt;/a&gt; to get inspiration for creating a pipeline with proper syntax and structure.&lt;/p&gt;
&lt;p&gt;You can copy the basic structure over from an existing file, or copy from here, but at the very minimum you need to define two pipelines, pullRequest and Release, which will encompass the more detailed stages and steps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;buildPack&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;none&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;pipelineConfig&lt;/span&gt;:
 &lt;span style=&#34;color:#f92672&#34;&gt;pipelines&lt;/span&gt;:
   &lt;span style=&#34;color:#f92672&#34;&gt;pullRequest&lt;/span&gt;:
   &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the &lt;code&gt;pullRequest&lt;/code&gt; pipeline you define the stages and steps that Jenkins X will execute for each pull request, and &lt;code&gt;Release&lt;/code&gt; is the same, just for what should happen to create the final product (whether a k8s app, docker image, static website, etc.)&lt;/p&gt;
&lt;p&gt;You can also specify a &lt;code&gt;feature&lt;/code&gt; pipeline, for processing merges to a feature branch. However, note that the &lt;a href=&#34;https://jenkins-x.io/about/overview/accelerate/&#34;&gt;Accelerate book&lt;/a&gt; recommends against long term feature branches. Instead, consider using trunk based development which is a practice of high performing teams.&lt;/p&gt;
&lt;p&gt;Each pipeline will have an &lt;code&gt;agent&lt;/code&gt; defined (usually Kaniko for building docker images) and at least one &lt;code&gt;stage&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;pipeline&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;agent&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gcr.io/kaniko-project/executor:9912ccbf8d22bbafbf971124600fbb0b13b9cbd6&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;release&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within each stage you’ll define the steps, which can generally be anything you can call on a command line or execute via a docker container. &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/#configuration-for-steps&#34;&gt;Configuration for steps&lt;/a&gt; lists the various parameters you can use in a step.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipeline Environment Variables</title>
      <link>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/envvars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/envvars/</guid>
      <description>
        
        
        &lt;p&gt;There are variables that are available by default, and there are those that you can define yourself.&lt;/p&gt;
&lt;h2 id=&#34;default-environment-variables&#34;&gt;Default environment variables&lt;/h2&gt;
&lt;p&gt;The following environment variables are available for use in a step in Jenkins X Pipelines:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DOCKER_REGISTRY&lt;/td&gt;
&lt;td&gt;the docker registry host (e.g. &lt;code&gt;docker.io&lt;/code&gt; or &lt;code&gt;gcr.io&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BUILD_NUMBER&lt;/td&gt;
&lt;td&gt;the build number (1, 2, 3) starts at &lt;code&gt;1&lt;/code&gt; for each repo and branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PIPELINE_KIND&lt;/td&gt;
&lt;td&gt;the kind of pipeline such as &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;pullrequest&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PIPELINE_CONTEXT&lt;/td&gt;
&lt;td&gt;the pipeline context if there are multiple pipelines per PR (for different tests/governance/lint etc)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPO_OWNER&lt;/td&gt;
&lt;td&gt;the git repository owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPO_NAME&lt;/td&gt;
&lt;td&gt;the git repository name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JOB_NAME&lt;/td&gt;
&lt;td&gt;the job name which typically looks like &lt;code&gt;$REPO_OWNER/$REPO_NAME/$BRANCH_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;APP_NAME&lt;/td&gt;
&lt;td&gt;the name of the app which typically is the &lt;code&gt;$REPO_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BRANCH_NAME&lt;/td&gt;
&lt;td&gt;the name of the branch such as &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;PR-123&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JX_BATCH_MODE&lt;/td&gt;
&lt;td&gt;indicates to jx to use batch mode if &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VERSION&lt;/td&gt;
&lt;td&gt;contains the version number being released or the PR&amp;rsquo;s preview version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BUILD_ID&lt;/td&gt;
&lt;td&gt;same as &lt;code&gt;$BUILD_NUMBER&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JOB_TYPE&lt;/td&gt;
&lt;td&gt;the prow job type such as &lt;code&gt;presubmit&lt;/code&gt; for PR or &lt;code&gt;postsubmit&lt;/code&gt; for release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PULL_BASE_REF&lt;/td&gt;
&lt;td&gt;the branch/ref of git&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PULL_BASE_SHA&lt;/td&gt;
&lt;td&gt;the git SHA being built&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PULL_NUMBER&lt;/td&gt;
&lt;td&gt;for PRs this will be the number without the &lt;code&gt;PR-&lt;/code&gt; prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PULL_REFS&lt;/td&gt;
&lt;td&gt;for batch merging all the git refs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;version&#34;&gt;${VERSION}&lt;/h3&gt;
&lt;p&gt;This particular variable is populated by Jenkins X when running pipelines. You can use this to tag docker images or anything else where you need a version number for the application you’re building.&lt;/p&gt;
&lt;p&gt;For Release pipelines, Jenkins X will look up the latest Git tag and use that as a basis for the value, increment it and create a new tag. For example, if your latest tag is &lt;code&gt;1.3.34&lt;/code&gt;, Jenkins X will populate &lt;code&gt;${VERSION}&lt;/code&gt; with &lt;code&gt;1.3.35&lt;/code&gt; and will tag the HEAD of the master branch with the same value. This all happens automatically, giving you a record of the last successful build of the master branch.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;pullRequest&lt;/code&gt; pipelines, the value is populated based on the version recorded in the GitOps repo for your application, and appended with &lt;code&gt;PR-&amp;lt;pull request number&amp;gt;-&amp;lt;build number&amp;gt;&lt;/code&gt; giving each build a pull request a unique version.&lt;/p&gt;
&lt;h4 id=&#34;triggering-a-major-or-minor-version-bump&#34;&gt;Triggering a major or minor version bump&lt;/h4&gt;
&lt;p&gt;When the version is bumped automatically, only the patch version is changed. To change the major or minor version, manually add a tag (e.g. 1.4.0) to your repo and Jenkins X will continue to increment from there (making the next application version 1.4.1 in the previous example).&lt;/p&gt;
&lt;h4 id=&#34;overriding-version&#34;&gt;Overriding ${VERSION}&lt;/h4&gt;
&lt;p&gt;For &lt;code&gt;pullRequest&lt;/code&gt; pipelines, the logic behind &lt;code&gt;${VERSION}&lt;/code&gt; cannot yet be overridden, but you could likely construct a version string out of the other variables mentioned above, if the default doesn’t serve your purpose.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;Release&lt;/code&gt; pipelines, you can override the default logic by adding a &lt;code&gt;setVersion&lt;/code&gt; declaration above the &lt;code&gt;pipeline&lt;/code&gt; keyword like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;setVersion&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;next-version&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;sh&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jx step next-version --version $(cat HUGO_VERSION)-${BUILD_NUMBER} --tag&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example above uses a file with a version number to construct a specific version string where the unique part is the build number. The &lt;code&gt;--tag&lt;/code&gt; part makes Jenkins X also tag the repo with the generated string. In the example, we wanted to keep the official Hugo version and have a separate indicator for the build number, to avoid bumping the patch number and making our image seem ahead of the official Hugo version. The string generated ends up looking like &lt;code&gt;0.60.1-3&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;self-defined-variables&#34;&gt;Self defined variables&lt;/h2&gt;
&lt;p&gt;You can define your own environment variables either at the pipeline level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;pipeline&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PIPELINE_VAR&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;A value for the pipeline variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;at a stage level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;pipeline&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;STAGE_VAR&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;A value for the stage level variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or at a step level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;release&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;pipeline&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
              - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;STEP_VAR&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;A value for the step level variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each level will add their variables to the variables defined in the level(s) above them, or potentially replace a variable if the same name is used.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Custom images in steps</title>
      <link>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/customimages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/guides/using-jx/pipelines/customimages/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X supports various types of Docker builder images, as long as the image is published in an accessible registry.&lt;/p&gt;
&lt;p&gt;One example is to re-use Google’s fairly small &lt;a href=&#34;https://github.com/GoogleCloudPlatform/cloud-builders&#34;&gt;cloud builder images&lt;/a&gt; to perform quick tasks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;         - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gcr.io/cloud-builders/npm&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;install-dependencies&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;npm&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;install&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you can use your own published images like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gcr.io/jenkinsxio/hugo-extended:0.60.1-3&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build-website&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
            - -&lt;span style=&#34;color:#ae81ff&#34;&gt;d&lt;/span&gt;
            - &lt;span style=&#34;color:#ae81ff&#34;&gt;tmp-website&lt;/span&gt;
            - --&lt;span style=&#34;color:#ae81ff&#34;&gt;enableGitInfo&lt;/span&gt;
            - --&lt;span style=&#34;color:#ae81ff&#34;&gt;baseURL http://${APP_NAME}.jx-${REPO_OWNER}-${REPO_NAME}-pr-${PULL_NUMBER}.${DOMAIN}/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main requirement is that the image is available, either with or without authentication.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

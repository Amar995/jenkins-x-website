<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – Jenkins X 文档</title>
    <link>https://jenkins-x.io/zh/docs/</link>
    <description>Recent content in Jenkins X 文档 on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://jenkins-x.io/zh/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Apache License</title>
      <link>https://jenkins-x.io/zh/docs/overview/license/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/overview/license/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
Jenkins X is released under the Apache 2.0 license.
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Version 2.0, January 2004&lt;/em&gt; &lt;br&gt;
&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Terms and Conditions for use, reproduction, and distribution&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-definitions&#34;&gt;1. Definitions&lt;/h2&gt;
&lt;p&gt;“License” shall mean the terms and conditions for use, reproduction, and
distribution as defined by Sections 1 through 9 of this document.&lt;/p&gt;
&lt;p&gt;“Licensor” shall mean the copyright owner or entity authorized by the copyright
owner that is granting the License.&lt;/p&gt;
&lt;p&gt;“Legal Entity” shall mean the union of the acting entity and all other entities
that control, are controlled by, or are under common control with that entity.
For the purposes of this definition, “control” means &lt;strong&gt;(i)&lt;/strong&gt; the power, direct or
indirect, to cause the direction or management of such entity, whether by
contract or otherwise, or &lt;strong&gt;(ii)&lt;/strong&gt; ownership of fifty percent (50%) or more of the
outstanding shares, or &lt;strong&gt;(iii)&lt;/strong&gt; beneficial ownership of such entity.&lt;/p&gt;
&lt;p&gt;“You” (or “Your”) shall mean an individual or Legal Entity exercising
permissions granted by this License.&lt;/p&gt;
&lt;p&gt;“Source” form shall mean the preferred form for making modifications, including
but not limited to software source code, documentation source, and configuration
files.&lt;/p&gt;
&lt;p&gt;“Object” form shall mean any form resulting from mechanical transformation or
translation of a Source form, including but not limited to compiled object code,
generated documentation, and conversions to other media types.&lt;/p&gt;
&lt;p&gt;“Work” shall mean the work of authorship, whether in Source or Object form, made
available under the License, as indicated by a copyright notice that is included
in or attached to the work (an example is provided in the Appendix below).&lt;/p&gt;
&lt;p&gt;“Derivative Works” shall mean any work, whether in Source or Object form, that
is based on (or derived from) the Work and for which the editorial revisions,
annotations, elaborations, or other modifications represent, as a whole, an
original work of authorship. For the purposes of this License, Derivative Works
shall not include works that remain separable from, or merely link (or bind by
name) to the interfaces of, the Work and Derivative Works thereof.&lt;/p&gt;
&lt;p&gt;“Contribution” shall mean any work of authorship, including the original version
of the Work and any modifications or additions to that Work or Derivative Works
thereof, that is intentionally submitted to Licensor for inclusion in the Work
by the copyright owner or by an individual or Legal Entity authorized to submit
on behalf of the copyright owner. For the purposes of this definition,
“submitted” means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems, and
issue tracking systems that are managed by, or on behalf of, the Licensor for
the purpose of discussing and improving the Work, but excluding communication
that is conspicuously marked or otherwise designated in writing by the copyright
owner as “Not a Contribution.”&lt;/p&gt;
&lt;p&gt;“Contributor” shall mean Licensor and any individual or Legal Entity on behalf
of whom a Contribution has been received by Licensor and subsequently
incorporated within the Work.&lt;/p&gt;
&lt;h2 id=&#34;2-grant-of-copyright-license&#34;&gt;2. Grant of Copyright License&lt;/h2&gt;
&lt;p&gt;Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the Work and such
Derivative Works in Source or Object form.&lt;/p&gt;
&lt;h2 id=&#34;3-grant-of-patent-license&#34;&gt;3. Grant of Patent License&lt;/h2&gt;
&lt;p&gt;Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable (except as stated in this section) patent license to make, have
made, use, offer to sell, sell, import, and otherwise transfer the Work, where
such license applies only to those patent claims licensable by such Contributor
that are necessarily infringed by their Contribution(s) alone or by combination
of their Contribution(s) with the Work to which such Contribution(s) was
submitted. If You institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work or a
Contribution incorporated within the Work constitutes direct or contributory
patent infringement, then any patent licenses granted to You under this License
for that Work shall terminate as of the date such litigation is filed.&lt;/p&gt;
&lt;h2 id=&#34;4-redistribution&#34;&gt;4. Redistribution&lt;/h2&gt;
&lt;p&gt;You may reproduce and distribute copies of the Work or Derivative Works thereof
in any medium, with or without modifications, and in Source or Object form,
provided that You meet the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(a)&lt;/strong&gt; You must give any other recipients of the Work or Derivative Works a copy of
this License; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(b)&lt;/strong&gt; You must cause any modified files to carry prominent notices stating that You
changed the files; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(c)&lt;/strong&gt; You must retain, in the Source form of any Derivative Works that You distribute,
all copyright, patent, trademark, and attribution notices from the Source form
of the Work, excluding those notices that do not pertain to any part of the
Derivative Works; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(d)&lt;/strong&gt; If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.&lt;/p&gt;
&lt;h2 id=&#34;5-submission-of-contributions&#34;&gt;5. Submission of Contributions&lt;/h2&gt;
&lt;p&gt;Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.&lt;/p&gt;
&lt;h2 id=&#34;6-trademarks&#34;&gt;6. Trademarks&lt;/h2&gt;
&lt;p&gt;This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.&lt;/p&gt;
&lt;h2 id=&#34;7-disclaimer-of-warranty&#34;&gt;7. Disclaimer of Warranty&lt;/h2&gt;
&lt;p&gt;Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.&lt;/p&gt;
&lt;h2 id=&#34;8-limitation-of-liability&#34;&gt;8. Limitation of Liability&lt;/h2&gt;
&lt;p&gt;In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.&lt;/p&gt;
&lt;h2 id=&#34;9-accepting-warranty-or-additional-liability&#34;&gt;9. Accepting Warranty or Additional Liability&lt;/h2&gt;
&lt;p&gt;While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;END OF TERMS AND CONDITIONS&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;appendix-how-to-apply-the-apache-license-to-your-work&#34;&gt;APPENDIX: How to apply the Apache License to your work&lt;/h2&gt;
&lt;p&gt;To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets &lt;code&gt;[]&lt;/code&gt; replaced with your own identifying information. (Don&amp;rsquo;t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same “printed page” as the copyright notice for easier identification within third-party archives.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright [yyyy] [name of copyright owner]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you may not use this file except in compliance with the License.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You may obtain a copy of the License at
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  http://www.apache.org/licenses/LICENSE-2.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unless required by applicable law or agreed to in writing, software
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See the License for the specific language governing permissions and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;limitations under the License.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add this as a file called &lt;code&gt;apache-notice.txt&lt;/code&gt; to the root of your repo&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Webhooks</title>
      <link>https://jenkins-x.io/zh/v3/admin/troubleshooting/webhooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/v3/admin/troubleshooting/webhooks/</guid>
      <description>
        
        
        &lt;p&gt;当你做如下操作时，Webhooks 可以触发 &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合并提交记录到你的默认分支&lt;/li&gt;
&lt;li&gt;创建 Pull Request&lt;/li&gt;
&lt;li&gt;推送代码到 Pull Request 对应的分支&lt;/li&gt;
&lt;li&gt;在 Pull Request 上添加评论来触发 ChatOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的集群中的 webhooks 无效时，ChatOps 或者流水线将不会被触发。&lt;/p&gt;
&lt;h3 id=&#34;前置条件&#34;&gt;前置条件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ingress&lt;/code&gt; 中 &lt;code&gt;hook&lt;/code&gt; 关于 &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;lighthouse&lt;/a&gt; 配置正确是 webhooks 有效的前提。&lt;/p&gt;
&lt;p&gt;Ingress 默认会采用文件 &lt;code&gt;jx-requirements.yml&lt;/code&gt; 中 &lt;code&gt;ingress.domain&lt;/code&gt; 指定的域名。&lt;/p&gt;
&lt;h3 id=&#34;问题诊断&#34;&gt;问题诊断&lt;/h3&gt;
&lt;p&gt;你可以根据&lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/health/&#34;&gt;健康性指南&lt;/a&gt;来检查你系统以及 webhooks 是否健康。&lt;/p&gt;
&lt;p&gt;首先，请确保 ingress 正常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get ing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到 &lt;code&gt;hook&lt;/code&gt; 的合法域名地址。然后，使用 curl 命令做一下测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -v http://hook-jx.1.2.3.4.nip.io/hook
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查你的机器是否可以访问那个地址。另外，检查是否有一个运行中的 Pod &lt;code&gt;lighthouse-webhook-*&lt;/code&gt;？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pod -l app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lighthouse-webhooks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以通过 &lt;code&gt;jx ui&lt;/code&gt; 查看他们的状态、事件、日志等。&lt;/p&gt;
&lt;p&gt;如果看起来都正常的话，然后打开你集群的 git 仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get environments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，点击链接 &lt;code&gt;GIT URL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;打开你的 git 提供商的 &lt;strong&gt;Webbooks&lt;/strong&gt; 页面， 查看发送到 hook 地址的请求是否成功。对于 GitHub，你可以在 &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt;  &lt;strong&gt;Webhooks&lt;/strong&gt; 这里找到。&lt;/p&gt;
&lt;p&gt;如果你的 git 无法访问 ingress 地址的话，你可以设置一个转发通道。请查看&lt;a href=&#34;https://jenkins-x.io/v3/admin/platforms/on-premises/#enable-webhooks&#34;&gt;借助 ngrok 使用 webhooks&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;aws-相关的问题&#34;&gt;AWS 相关的问题&lt;/h3&gt;
&lt;p&gt;如果你在使用 AWS，你可以查看 &lt;a href=&#34;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-elb-load-balancer.html&#34;&gt;AWS 关于使用 ELB&lt;/a&gt; 的文档。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建自定义 Builder</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/create-custom-builder/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/create-custom-builder/</guid>
      <description>
        
        
        &lt;p&gt;在 Jenkins X 中，可以创建字段自定义的 Builder （也就是 &lt;a href=&#34;https://github.com/jenkinsci/kubernetes-plugin&#34;&gt;POD templates&lt;/a&gt;）或覆盖已有的。你只需要基于 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common&#34;&gt;builder-base&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;从零创建一个自定义-builder&#34;&gt;从零创建一个自定义 Builder&lt;/h2&gt;
&lt;h3 id=&#34;builder-镜像&#34;&gt;Builder 镜像&lt;/h3&gt;
&lt;p&gt;首先，您需要为 Builder 创建一个 docker 镜像。从 &lt;code&gt;Dockerfile&lt;/code&gt; 开始的一个实例可能类似于：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; jenkinsxio/builder-base:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install your tools and libraries&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; yum install -y gcc openssl-devel&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcc&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，您可以构建并发布这个镜像到您的 registry：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export BUILDER_IMAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUILDER_IMAGE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker push &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUILDER_IMAGE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;别担心，当新的镜像需要构建时，您无需每次手动执行这些步骤。Jenkins X 可以为您管理这些。您只需要把 &lt;code&gt;Dockerfile&lt;/code&gt; 推送到类似于&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-go&#34;&gt;这个&lt;/a&gt;代码仓库中。然后，根据您的组织名称来调整 &lt;code&gt;Jenkinsfile&lt;/code&gt; ，并使用下面的命令导入 Jenkins X 平台：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import --url &amp;lt;REPOSITORY_URL&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，您每次推送一个变更，Jenkins X 将会自动地构建和发布镜像。&lt;/p&gt;
&lt;h3 id=&#34;安装-builder&#34;&gt;安装 Builder&lt;/h3&gt;
&lt;p&gt;当您安装或者升级 Jenkins X 时就可以安装您的 Builder 了。&lt;/p&gt;
&lt;p&gt;在您的 &lt;code&gt;~/.jx/&lt;/code&gt; 目录下创建文件  &lt;code&gt;myvalues.yaml&lt;/code&gt; 并写入下面内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jenkins&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Agent&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PodTemplates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;MyBuilder&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mybuilder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-mybuilder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-docker-cfg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins/.docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;EnvVars&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;JENKINS_URL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://jenkins:8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_COMMITTER_EMAIL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x@googlegroups.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_AUTHOR_EMAIL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x@googlegroups.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_AUTHOR_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x-bot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_COMMITTER_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x-bot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;XDG_CONFIG_HOME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_CONFIG&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins/.docker/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;ServiceAccount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;Jnlp&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkinsci/jnlp-slave:3.14-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;RequestCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;RequestMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128Mi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Args&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;${computer.jnlpmac} ${computer.name}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;Dlang&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;YOUR_BUILDER_IMAGE&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Privileged&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;RequestCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;400m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;RequestMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;512Mi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;LimitCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;LimitMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1024Mi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Command&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh -c&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Args&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Tty&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据需要替换 Builder 名称和镜像。&lt;/p&gt;
&lt;p&gt;您可以继续安装 Jenkins X ，然后 Builder 将会自动添加到平台。&lt;/p&gt;
&lt;h3 id=&#34;使用-builder&#34;&gt;使用 Builder&lt;/h3&gt;
&lt;p&gt;现在，您的 Builder 已经在 Jenkins 中安装了，您可以在 &lt;code&gt;Jenkinsfile&lt;/code&gt; 中轻松地引用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Groovy&#34; data-lang=&#34;Groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipeline &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    agent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        label &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-mybuilder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stages &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Build&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        when &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        steps &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          container&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mybuilder&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;// your steps
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        always &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cleanWs&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;覆盖已有的-builder&#34;&gt;覆盖已有的 Builder&lt;/h2&gt;
&lt;p&gt;Jenkins X 自带了很多&lt;a href=&#34;https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/values.yaml&#34;&gt;预安装的 Builder&lt;/a&gt;，在安装或升级过程中可以根据需要覆盖。&lt;/p&gt;
&lt;p&gt;您只需要基于&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common&#34;&gt;基础 Builder&lt;/a&gt; 镜像或者&lt;a href=&#34;https://hub.docker.com/u/jenkinsxio/&#34;&gt;Builder 镜像&lt;/a&gt; 自定义。在上面查看细节。&lt;/p&gt;
&lt;p&gt;然后，您可以在目录 &lt;code&gt;~/.jx/&lt;/code&gt; 中创建文件 &lt;code&gt;myvalues.yaml&lt;/code&gt; ，并写入一下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jenkins&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Agent&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PodTemplates&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Maven&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;Maven&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_MAVEN_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Nodejs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;Nodejs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_NODEJS_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Go&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;Go&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_GO_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以继续安装 Jenkins X，这些 Builder 将会自动地添加到平台。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 配置</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/config/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/config/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 应该为你的云服务商提供默认可用的配置。例如：如果你使用 AWS 或 EKS，Jenkins X 自动地使用 ECR。&lt;/p&gt;
&lt;p&gt;然而，你可以修改 Jenkins X 使用的 helm charts 的配置。&lt;/p&gt;
&lt;p&gt;要做到这一点，你需要在运行命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; 或 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; 的目录下创建一个文件 &lt;code&gt;myvalues.yaml&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;然后，这个 YAML 文件可以覆盖 Jenkins X 中的任何 charts 中的 &lt;code&gt;values.yaml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&#34;nexus&#34;&gt;Nexus&lt;/h2&gt;
&lt;p&gt;例如：如果你希望在安装过程中禁用 Nexus，而使用不同主机上的一个独立的 Nexus，那么，你可以使用 &lt;code&gt;myvalues.yaml&lt;/code&gt; 中的服务链接来替代：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;nexus&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;nexusServiceLink&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;externalName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nexus.jx.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要禁用并使用 chart museum 的服务链接的话添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;chartmuseum&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;chartmuseumServiceLink&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;externalName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-x-chartmuseum.jx.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jenkins-镜像&#34;&gt;Jenkins 镜像&lt;/h2&gt;
&lt;p&gt;Jenkins X 中我们提供了一个默认的 Jenkins docker 镜像 &lt;a href=&#34;https://hub.docker.com/r/jenkinsxio/jenkinsx/&#34;&gt;jenkinsxio/jenkinsx&lt;/a&gt;，把我们所需要的所有插件包含在里面。&lt;/p&gt;
&lt;p&gt;如果你想添加自己的插件，你可以使用我们的基础镜像创建一个你自己的 Dockerfile 和镜像，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Dockerfile for adding plugins to Jenkins X&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; jenkinsxio/jenkinsx:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; /usr/local/bin/install-plugins.sh &amp;lt; /usr/share/jenkins/ref/openshift-plugins.txt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后以下面的形式将你所有自定义插件放到 &lt;code&gt;plugins.txt&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myplugin:1.2.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;anotherplugin:4.5.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦你通过 CI/CD 构建和发布了你的镜像，你就可以在安装 Jenkins X 时使用它：&lt;/p&gt;
&lt;p&gt;为了用你自定义的镜像配置 Jenkins X ，你可以在 &lt;code&gt;myvalues.yaml&lt;/code&gt; 文件中指定你的 Jenkins 镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jenkins&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Master&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acme/my-jenkinsx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ImageTag&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.2.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有一个开源项目的例子 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-openshift-image&#34;&gt;jenkins-x/jenkins-x-openshift-image&lt;/a&gt;，你可以以它为模板创建一个新的 Jenkins 镜像用来在 OpenShift 上使用 Jenkins X 时增加 OpenShift 特定的插件和配置。&lt;/p&gt;
&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;
&lt;p&gt;We try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.&lt;/p&gt;
&lt;p&gt;然而，你也可以在执行命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; 或 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; 时，通过选项 &lt;code&gt;--docker-registry&lt;/code&gt; 来指定。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create cluster gke --docker-registry eu.gcr.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，如果你使用了不同的 Docker Registry 的话，你可能需要&lt;a href=&#34;https://jenkins-x.io/docs/reference/components/docker-registry/#update-the-config-json-secret&#34;&gt;修改 secret 才能连接到 docker&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 安装过程中发生了什么</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/install-on-cluster-what-happens/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/install-on-cluster-what-happens/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 命令行在安装 Jenkins X 平台时会做如下事情：&lt;/p&gt;
&lt;h2 id=&#34;安装二进制客户端来管理你的集群&#34;&gt;安装二进制客户端来管理你的集群&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    如果您运行在 Mac OS X 上，Jenkins X 会使用 &lt;code&gt;Homebrew&lt;/code&gt; 来安装不同的命令行。不存在就会安装。

&lt;/div&gt;

&lt;h3 id=&#34;安装-kubectl&#34;&gt;安装 kubectl&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/kubectl/&#34;&gt;kubectl&lt;/a&gt; 是 Kubernetes 的命令行。它允许您和您的 Kubernetes 集群通过 API server 交互。&lt;/p&gt;
&lt;h3 id=&#34;安装-helm&#34;&gt;安装 Helm&lt;/h3&gt;
&lt;p&gt;Jenkins X 将会安装 &lt;a href=&#34;https://github.com/kubernetes/helm&#34;&gt;helm&lt;/a&gt; 客户端 - (可能是  helm &lt;em&gt;2.x&lt;/em&gt; 或 helm &lt;em&gt;3&lt;/em&gt;)，如果它不在您的环境变量里的话。Helm 是用于打包 Kubernetes 中的应用或资源（也叫做 charts），并迅速地成为标准。&lt;/p&gt;
&lt;h3 id=&#34;安装云提供商的命令行&#34;&gt;安装云提供商的命令行&lt;/h3&gt;
&lt;p&gt;如果您在使用公有云，会有相关的命令行来与之交互。当通过 &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;jx create cluster&lt;/a&gt; 命令来安装时，您的云提供商相关的二进制如果不在环境变量里的话，也会被安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AKS 集群（Azure）的 &lt;code&gt;az&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GKE 集群 (Google Cloud) 的 &lt;code&gt;gcloud&lt;/code&gt; for GKE cluster (Google Cloud)&lt;/li&gt;
&lt;li&gt;AWS 集群 (Amazon Web Services) 的 &lt;code&gt;kops&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; 集群的 &lt;code&gt;eksctl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OKS 集群 (Oracle Cloud) 的 &lt;code&gt;oci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您想要在本地通过 minikube 或 minishift 运行 Jenkins X 的话，下面的二进制会被添加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 minishift (OpenShift) 集群 的 &lt;code&gt;oc&lt;/code&gt; (OpenShift CLI) 和 &lt;code&gt;minishift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地 minikube 集群的 &lt;code&gt;minikube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，Jenkins X 将会根据需要安装 VM 驱动，通常 Mac OS X 上是 &lt;code&gt;xhyve&lt;/code&gt; 或 Windows 上是 &lt;code&gt;hyperv&lt;/code&gt; 。其他驱动则需要手动安装。&lt;/p&gt;
&lt;h2 id=&#34;创建-kubernetes-集群&#34;&gt;创建 Kubernetes 集群&lt;/h2&gt;
&lt;p&gt;之后，集群会通过云提供商的命令来创建（例如：Azure 的 &lt;code&gt;az aks create&lt;/code&gt; 命令）。&lt;/p&gt;
&lt;h2 id=&#34;设置-jenkins-x-平台&#34;&gt;设置 Jenkins X 平台&lt;/h2&gt;
&lt;h3 id=&#34;创建-jenkins-x-命名空间&#34;&gt;创建 Jenkins X 命名空间&lt;/h3&gt;
&lt;p&gt;然后，会为 Jenkins X 平台创建一个命名空间，用于存放 Jenkins X 基础组件。默认为：&lt;em&gt;jx&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;安装-tiller可选只有-helm-2-需要&#34;&gt;安装 Tiller（可选，只有 Helm 2 需要）&lt;/h3&gt;
&lt;p&gt;Tiller，也就是 Helm 的服务器端，会部署到命名空间 &lt;em&gt;kube-system&lt;/em&gt; 中。&lt;a href=&#34;https://www.helm.sh/&#34;&gt;Helm&lt;/a&gt; 是 Kubernetes 的包管理器，也用于部署 Jenkins X 的其他组件。&lt;/p&gt;
&lt;h3 id=&#34;设置-ingress-控制器&#34;&gt;设置 Ingress 控制器&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 集群中，Service 和 Pod 的 IP 只能在集群网络中访问。为了能够访问集群，必须要创建一个 Ingress。Ingress 是路由到集群内的 Service 的规则集。Ingress 规则是由 Kubernetes API 配置在 Ingress 资源中，而 Ingress Controller 是必要的。所有的这些 Jenkins X 都会替您做——为下面的 Service 设置一个 Ingress Controller 和相关联的后端 Ingress 规则（一旦部署完后）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chartmuseum&lt;/li&gt;
&lt;li&gt;docker-registry&lt;/li&gt;
&lt;li&gt;jenkins&lt;/li&gt;
&lt;li&gt;monocular&lt;/li&gt;
&lt;li&gt;nexus&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    默认，Jenkins X 将会通过域名 &lt;em&gt;nip.io&lt;/em&gt; 暴露 Ingress，并生成自签名的证书。当按照完后，您可以通过命令 &lt;code&gt;jx upgrade ingress --cluster&lt;/code&gt; 轻松地修改为您自己的域名和签名。

&lt;/div&gt;

&lt;h3 id=&#34;配置-git-仓库&#34;&gt;配置 git 仓库&lt;/h3&gt;
&lt;p&gt;Jenkins X 需要一个 Git 仓库提供商，以便能够插件环境仓库。如果您没有提供参数 &lt;em&gt;git-provider-url&lt;/em&gt; 的划，默认使用 GitHub。您需要提供用户名和 Token 来和 Git 交互，尤其是 Jenkins。&lt;/p&gt;
&lt;h2 id=&#34;创建管理员凭据&#34;&gt;创建管理员凭据&lt;/h2&gt;
&lt;p&gt;Jenkins X 为 Monocular/Nexus/Jenkins 生成管理员密码并保存到 Secret 中。当在 helm 安装的时候就会取出来使用（因此，密码可以用在流水线中）。&lt;/p&gt;
&lt;h3 id=&#34;检出云环境仓库&#34;&gt;检出云环境仓库&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/cloud-environments&#34;&gt;云环境仓库&lt;/a&gt;保存所有特定的配置以及加密的 Secret，这些将会应用在您的 Kubernetes 集群中的 Jenkins 平台。这些 Secret 将会由 Helm 包管理器来加解密。&lt;/p&gt;
&lt;h2 id=&#34;安装-jenkins-x-平台&#34;&gt;安装 Jenkins X 平台&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform&#34;&gt;Jenkins X 平台&lt;/a&gt;保存安装了的组件的 Helm Chart，用于提供 Jenins X 真正的 CD 解决方案。这包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkinsci/jenkins&#34;&gt;Jenkins&lt;/a&gt; 一个 CI/CD 流水线方案&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sonatype.com/nexus-repository-oss&#34;&gt;Nexus&lt;/a&gt; 一个制品仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/chartmuseum&#34;&gt;ChartMuseum&lt;/a&gt; 一个 Helm Chart 仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/monocular&#34;&gt;Monocular&lt;/a&gt; 提供了一个 Web UI 用于搜索和发现通过 Jenkins X 部署到您的集群中的 Chart。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 在 Kubernetes 上安装</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/install-on-cluster/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/install-on-cluster/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 可以在 Kubernetes 1.8 以及更高版本上安装。需要的依赖有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RBAC 是可用的&lt;/li&gt;
&lt;li&gt;启用 docker 私有仓库。这样的话，流水线可以在 Kubernetes 集群中使用 docker 仓库（通常不是公共的因此不支持 https）。后续，你可以修改你的流水线来使用其他仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通过-kops-启用私有仓库&#34;&gt;通过 kops 启用私有仓库&lt;/h3&gt;
&lt;p&gt;注意，如果你是在 AWS 环境中，你可能会想使用 &lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/create-cluster/&#34;&gt;jx create aws&lt;/a&gt; 命令来帮你自动化完成所有步骤！&lt;/p&gt;
&lt;p&gt;如果你是通过 &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; 创建的 kubernetes 集群，那么你可以这么做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kops edit cluster
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，确保在 YAML 文件的章节 &lt;code&gt;spec&lt;/code&gt; 中有 &lt;code&gt;docker&lt;/code&gt; 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;docker&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;insecureRegistry&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100.64.0.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;logDriver&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的 IP 范围 &lt;code&gt;100.64.0.0/10&lt;/code&gt; 是 AWS 上的，但你需要修改为其他 Kubernetes 集群的；它依赖于 Kubernetes 服务的 IP 范围。&lt;/p&gt;
&lt;p&gt;保存后，你可以参考下面的命令进行验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kops get cluster -oyaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后查找 &lt;code&gt;insecureRegistry&lt;/code&gt; 章节。&lt;/p&gt;
&lt;p&gt;现在，确保这些修改在你的集群类型上是激活的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kops update cluster --yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kops rolling-update cluster --yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你现在可以继续了！&lt;/p&gt;
&lt;h3 id=&#34;安装-jenkins-x&#34;&gt;安装 Jenkins X&lt;/h3&gt;
&lt;p&gt;为了在已有的 kubernetes 集群上安装 Jenkins X 你可以使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你知道提供商的话，可以通过命令行来指定。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx install --provider=aws
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 特色</title>
      <link>https://jenkins-x.io/zh/docs/concepts/features/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/features/</guid>
      <description>
        
        
        &lt;h2 id=&#34;命令行&#34;&gt;命令行&lt;/h2&gt;
&lt;p&gt;Jenkins X 带来了一个方便使用的命令行工具 &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/install/&#34;&gt;安装 Jenkins X&lt;/a&gt; 到你已经存在的 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/create-cluster/&#34;&gt;创建一个新的 kubernetes 集群&lt;/a&gt; 并把 Jenkins X 安装进去&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/developing/import&#34;&gt;导入项目&lt;/a&gt; 到 Jenkins X 中以及他们的持续部署流水线设置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/developing/create-spring&#34;&gt;创建新的 Spring Boot 应用&lt;/a&gt; 并导入 Jenkins X 中，以及他们的持续部署流水线设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线&#34;&gt;流水线&lt;/h2&gt;
&lt;p&gt;不必深入了解 Jenkins 流水线的内部，Jenkins X 会默认给你的项目提供一些很好的流水线——基于&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts&#34;&gt;DevOps 最佳实践&lt;/a&gt;实现了所有的持续集成和持续部署&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;环境指的是应用部署的地方。开发人员通常使用缩写来描述环境，例如：“测试中（Testing）、Staging/UAT或者生产（Production）”。&lt;/p&gt;
&lt;p&gt;在 Jenkins X 中每个团队都有一套自己的环境。默认情况下，Jenkins X 会给每个团队创建一个 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境，但你可以通过命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_environment/&#34;&gt;jx create environment&lt;/a&gt;创建一个新的环境。&lt;/p&gt;
&lt;p&gt;我们使用 GitOps 来管理要部署到每个环境中的 Kubernetes 资源的配置和版本。因此，每个环境都有自己的 git 仓库，应用在这个环境中运行需要的 Helm Charts、版本以及配置都在库中。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群中一个环境对应一个命名空间。当 Pull Requests 被合并到环境所在的 git 库后，该环境的流水线就会把 git 库中的 Helm Charts 应用到环境命名空间中。&lt;/p&gt;
&lt;p&gt;这意味着开发和运维都可以在同一个 git 库中，管理应用和资源在某个环境中的所有配置和版本，并且对环境的所有改变都可以在 git 中获取到。因此，这样很容易看到是谁作出的改变，而且，更重要的是当发生问题后很容易回滚改变。&lt;/p&gt;
&lt;h2 id=&#34;部署升级&#34;&gt;部署升级&lt;/h2&gt;
&lt;p&gt;部署升级是通过 GitOps 在环境关联的 git 库上发起一个 Pull Requests 来实现的，这样所有的改变都通过 git 来审查、批准，因此所有的改变的都很容易回滚。&lt;/p&gt;
&lt;p&gt;当环境所关联的 git 库上有新的变化合并到 master 后，环境的流水线就会触发，helm 就会把任何改变应用到资源上。&lt;/p&gt;
&lt;p&gt;Jenkins X 的持续部署流水线把改变了的版本自动做部署升级，这是需要把配置中的”部署升级策略“设置为”自动“。默认情况下，”Staging“环境使用自动部署升级，而”生产“环境使用”手动“部署升级。&lt;/p&gt;
&lt;p&gt;要手动把某个版本的应用部署升级到一个环境中的话，你可以使用&lt;a href=&#34;https://jenkins-x.io/developing/promote/&#34;&gt;jx promote&lt;/a&gt;命令。&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;预发环境&#34;&gt;预发环境&lt;/h2&gt;
&lt;p&gt;Jenkins X 允许你给 Pull Requests 设置一个预发环境，这样就可以在变更后并到 master 之前得到更多的反馈。这使你的变更在被合并以及发布之前更快得到反馈，并允许你避免在你的发版流水线中有人为的批准，加速变更在合并后的部署。&lt;/p&gt;
&lt;p&gt;当预发环境启动并运行后，Jenkins X 将会在你的 Pull Requests 中添加一个带链接的评论，这样你们团队的成员就可以点击来尝试它！&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;反馈&#34;&gt;反馈&lt;/h2&gt;
&lt;p&gt;正如在上面看到的，当你使用预发环境时，Jenkins X 会在你的 Pull Requests 上自动添加评论。&lt;/p&gt;
&lt;p&gt;如果你在提交日志中引用了 issues（例如：通过文本&lt;code&gt;fixes #123&lt;/code&gt;），那么，Jenkins X 流水线将会生成发版记录，例如： &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34;&gt;the jx releases&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同样地，在升级到&lt;code&gt;Staging&lt;/code&gt;或者&lt;code&gt;生产&lt;/code&gt;环境时，这些版本上也会在已修复的问题上自动添加对应环境可用的评论。例如：&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;应用&#34;&gt;应用&lt;/h2&gt;
&lt;p&gt;一些最好的软件工具已经被打包为 helm charts，部分预先集成在了 Jenkins X 中，例如：Nexus、ChartMuseum、Monocular、Prometheus、Grafana等等。&lt;/p&gt;
&lt;h3 id=&#34;插件&#34;&gt;插件&lt;/h3&gt;
&lt;p&gt;部分应用是内置的；例如：Nexus、ChartMuseum、Monocular。其他的则是作为“插件”提供的。&lt;/p&gt;
&lt;p&gt;要安装插件的话，使用命令&lt;a href=&#34;https://jenkins-x.io/commands/jx_create_addon/&#34;&gt;jx create addon&lt;/a&gt;。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create addon grafana
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 通过 GitOps 管理</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/manage-via-gitops/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/manage-via-gitops/</guid>
      <description>
        
        
        &lt;p&gt;我们推荐你使用 GitOps 管理你的 Jenkins X 设施，升级它、配置它、以及添加或移除扩展&lt;a href=&#34;https://jenkins-x.io/docs/contributing/addons/&#34;&gt;应用&lt;/a&gt;，这样容易审计谁在你的设施上做了什么变更并且容易恢复坏的变更。&lt;/p&gt;
&lt;p&gt;当前这仅在 AWS 和 Google 云可用，因为它要求我们的 vault 操作员（需要云存储和 KMS ）存储凭据，而所有其他配置都存储在开发环境 git 仓库中。&lt;/p&gt;
&lt;h2 id=&#34;使用-gitops-管理-jenkins-x&#34;&gt;使用 GitOps 管理 Jenkins X&lt;/h2&gt;
&lt;p&gt;如果你正在创建一个集群或者在已经存在的集群安装，这里有一种快速简便的方法来使用 GitOps 来管理 Jenkins X 本身。它是 &lt;code&gt;—ng&lt;/code&gt; ，为下一代 Jenkins X 而来。在我们今年晚些时候发布 Jenkins X 2.x 时，我们会将此功能标记设为默认选项。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;—ng&lt;/code&gt; 标记是这些标记的一个别名：&lt;code&gt;—gitops —vault —no-tiller —tekton&lt;/code&gt; 。所以它还附带了对 &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X 流水线&lt;/a&gt; - 基于 Tekton 的新式云原生流水线引擎的支持。&lt;/p&gt;
&lt;p&gt;如果你仍然想要使用Jenkins服务器作为 Jenkins X 中自动化 CI/CD 流水线的执行引擎，那么你可以使用 &lt;code&gt;—gitops —vault&lt;/code&gt; 代替。仍要注意是的即使使用了 &lt;code&gt;—ng&lt;/code&gt; 以及使用了由 Tekton 驱动的 &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X 流水线&lt;/a&gt;,你仍然需要创建你自己的&lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/custom-jenkins/&#34;&gt;自定义 Jenkins 服务器&lt;/a&gt;来运行传统的 Jenkins 任务和流水线。&lt;/p&gt;
&lt;p&gt;一旦你使用 GitOps 安装了 Jenkins X 来管理开发环境，那么表明安装了 Jenkins X 和它的附加应用程序，你将为 Dev，Staging，Production 环境获得一个额外的 git 仓库。它也意味着如果你用一个更新命令如 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx upgrade platform&lt;/a&gt; 或通过 &lt;a href=&#34;http://localhost:1313/commands/jx_add_app/&#34;&gt;jx add app&lt;/a&gt; 添加、更新、删除应用，那么那些命令将在开发环境的 git 存储库生成 Pull Request ，就像当你发布新版本的微服务时， promotion 是如何工作的。&lt;/p&gt;
&lt;h2 id=&#34;如果出现问题&#34;&gt;如果出现问题&lt;/h2&gt;
&lt;p&gt;一般来说，当使用 Tekton 时，Jenkins X 可以很容易地自我升级。但是，如果升级让 Jenkins X 无法实施 CI/CD ，那么使用 GitOps 回退更改将不起作用；）&lt;/p&gt;
&lt;p&gt;如果你在升级 Jenkins X 过程中遇到任何问题，这里有一种手动方法可以应用开发环境的 git 存储库的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone $MY_DEV_GIT_CLONE_URL jenkins-x-dev-env
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd jenkins-x-dev-env/env
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx step env apply
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 给 API 文档做贡献</title>
      <link>https://jenkins-x.io/zh/docs/contributing/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/documentation/apidocs/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 有两种类型的 API 文档：&lt;a href=&#34;https://jenkins-x.io/apidocs/&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; 和 &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34;&gt;Godoc&lt;/a&gt;。这两种类型都是由 &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jx&lt;/a&gt; 的代码生成。&lt;/p&gt;
&lt;h2 id=&#34;设置你的开发环境&#34;&gt;设置你的开发环境&lt;/h2&gt;
&lt;p&gt;最好在你的本地电脑上对 Jenkinx X 的代码进行修改。按照 &lt;a href=&#34;https://jenkins-x.io/development&#34;&gt;开发&lt;/a&gt; 指导文档进行配置。&lt;/p&gt;
&lt;h2 id=&#34;编写自定义资源文档&#34;&gt;编写自定义资源文档&lt;/h2&gt;
&lt;p&gt;自定义资源的文档大部分是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;go structs that define the custom
resources&lt;/a&gt; 上的注释以及融合了 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;introductory content&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;structure&lt;/a&gt; 而生成的。&lt;/p&gt;
&lt;h3 id=&#34;工具链&#34;&gt;工具链&lt;/h3&gt;
&lt;p&gt;自定义资源文档是由与 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34;&gt;同样的工具链&lt;/a&gt;而生成的，但是一系列的 &lt;code&gt;jx&lt;/code&gt; 的命令将其包装了起来，因此你不需要下载以及配置这些不同的工具。&lt;/p&gt;
&lt;p&gt;HTML 文档是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34;&gt;OpenAPI 说明&lt;/a&gt; 生成的，依次的由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34;&gt;Go 结构体&lt;/a&gt; 生成，而这些结构体是由代码的注释生成的。想要生成结构体和 OpenAPI 说明执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-openapi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-openapi&lt;/code&gt; 仅仅是对 &lt;code&gt;jx create client openapi&lt;/code&gt; 进行了包装，通过传入参数：从哪个包来生成、生成的目标包的名称和组（&lt;code&gt;jenkins.io&lt;/code&gt;）以及版本(&lt;code&gt;v1&lt;/code&gt;)来生成最终的文件。如果你愿意的话，也可以直接运行这个命令。

&lt;/div&gt;

&lt;p&gt;生成 HTML 运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-docs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-docs&lt;/code&gt; 仅仅是对 &lt;code&gt;jx create client docs&lt;/code&gt; 进行了包装。 Y如果你愿意的话，也可以直接运行这个命令。

&lt;/div&gt;

&lt;p&gt;当你对自定义资源进行了修改的话，应该运行 &lt;code&gt;make generate-openapi&lt;/code&gt;，并确认将所生成的修改添加到版本控制当中。这意味着对于其他人，在任意时刻都会有标记了版本的 OpenAPI 说明可供使用。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    你也可以运行 &lt;code&gt;make generate&lt;/code&gt; 它会进行所有 Jenins X（mocks、client 以及 OpenAPI）所需要的代码生成工作。

&lt;/div&gt;

&lt;p&gt;构建版本时会运行 &lt;code&gt;make generate-docs&lt;/code&gt;，并且对于每一个版本，更新都会自动的上传到 Jenkins X 的网站上。在版本构建结束的几分钟后会生效。&lt;/p&gt;
&lt;h3 id=&#34;对文档进行修改&#34;&gt;对文档进行修改&lt;/h3&gt;
&lt;p&gt;对于每一个你想要生成文档的文件必须要在 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;jenkins.io/v1&lt;/a&gt; 目录中，并且在文件的头部必须有下面的注释：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想要移除一个类型或者成员的话，添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对类型的注释会被忽略。结构体中的字段的注释会被作为其描述信息。
左侧的菜单栏是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;config.yaml&lt;/a&gt; 中的 &lt;code&gt;resource_categories&lt;/code&gt; 而生成。对于每一个种类的介绍文本信息由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;html&lt;/a&gt; 编写。&lt;/p&gt;
&lt;p&gt;样式风格也可以 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34;&gt;定制化&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;
&lt;p&gt;OpenAPI 说明是由代码生成的。其结构由结构体以及字段生成。&lt;code&gt;json&lt;/code&gt; &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;tags&lt;/a&gt; 被用于提供额外的信息包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; 由 &lt;code&gt;key&lt;/code&gt; 生成&lt;/li&gt;
&lt;li&gt;如果没有设置 &lt;code&gt;omitempty&lt;/code&gt; 的话，那么这个属性将是 &lt;code&gt;必需的&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;key&lt;/code&gt; 是 &lt;code&gt;-&lt;/code&gt; 的话，那么将会跳过这个字段&lt;/li&gt;
&lt;li&gt;如果设置了 &lt;code&gt;inline&lt;/code&gt; 的话，这些属性将会嵌入到父对象当中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，注释可以用于阻止某一属性被设置为 &lt;code&gt;必需项&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;metav1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeMeta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;,inline&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	// +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	metav1.ObjectMeta `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,1,opt,name=metadata&amp;#34;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Spec BuildPackSpec `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,2,opt,name=spec&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;openapi-扩展&#34;&gt;OpenAPI 扩展&lt;/h4&gt;
&lt;p&gt;在类型上， OpenAPI 说明也可以有扩展。想要在一个类型或者成员上添加一个或多个扩展的话，在类型/成员的注释行上添加 &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt;。一个类型/成员可以有多个扩展。在注释中的的其它的行会被作为 $VALUE 因此不需要躲避或者字符串加上引号。扩展可以用于向客户端或者文档生成器传入更多的信息。例如，一个类型在文档中可以有友好的名称用于展示或者用于客户端流畅的接口。&lt;/p&gt;
&lt;h4 id=&#34;自定义-openapi-类型定义&#34;&gt;自定义 OpenAPI 类型定义&lt;/h4&gt;
&lt;p&gt;自定义类型不会直接的映射到 OpenAPI 当中，而是会通过实现名为 &amp;ldquo;OpenAPIDefinition&amp;rdquo; 的方法如下面所示，来覆盖他们的 OpenAPI 说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k8s.io/kube-openapi/pkg/common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;:   []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，类型可以通过定义下面的方法来避免引用 &amp;ldquo;openapi&amp;rdquo;。下面的例子会和上面的例子产生相同的 OpenAPI 说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaType&lt;/span&gt;() []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;} }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaFormat&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编写-godoc&#34;&gt;编写 Godoc&lt;/h2&gt;
&lt;p&gt;Jenkins X 使用标准的方法来生成 Godoc，而且会由 &lt;a href=&#34;http://godoc.org&#34;&gt;godoc.org&lt;/a&gt; 自动生成。这一&lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34;&gt;博客&lt;/a&gt; 为编写 Godoc 提供了很好的介绍。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docker Registry</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/docker-registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/docker-registry/</guid>
      <description>
        
        
        &lt;p&gt;为了能够创建和发布 docker 镜像，我们需要使用 Docker Registry。&lt;/p&gt;
&lt;p&gt;默认，Jenkins X 会在系统命名空间中带一个 Docker Registry，以及 Jenkins 和 Nexus。当 Docker Registry 运行在你的 Kubernetes 集群中，它会在集群内部使用，它很难通过带有自签名证书的 HTTPS 暴露 —— 因此，在你的 Kubernetes 集群服务中，我们默认使用 insecure 的 Docker Registry。&lt;/p&gt;
&lt;h2 id=&#34;使用不同的-docker-registry&#34;&gt;使用不同的 Docker Registry&lt;/h2&gt;
&lt;p&gt;如果你使用公有云的话，可能希望利用你的云服务商的 Docker Registry；或者复用你已有的 Docker Registry。&lt;/p&gt;
&lt;p&gt;为了指定 Docker Registry 的主机、端口，你可以使用 Jenkins 控制台：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx console
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，定位到 &lt;code&gt;管理 Jenkins -&amp;gt; 系统配置&lt;/code&gt;，并修改环境变量 &lt;code&gt;DOCKER_REGISTRY&lt;/code&gt; 指向你选择的 Docker Registry。&lt;/p&gt;
&lt;p&gt;另一种方法是，把下面的内容添加到你的自定义 Jenkins X 平台 helm charts 的&lt;code&gt;values.yaml&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jenkins&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Servers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;Global&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;EnvVars&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_REGISTRY&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcr.io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;更新-configjson&#34;&gt;更新 config.json&lt;/h2&gt;
&lt;p&gt;下一步，你需要为 docker 更新 &lt;code&gt;config.json&lt;/code&gt; 中的认证。&lt;/p&gt;
&lt;p&gt;如果为你的 Docker Registry 创建一个 &lt;code&gt;config.json&lt;/code&gt; 文件，例如：Google 云的 GCR，它可能看起来像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;credHelpers&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gcr.io&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcloud&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;us.gcr.io&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcloud&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eu.gcr.io&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcloud&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;asia.gcr.io&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcloud&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;staging-k8s.gcr.io&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcloud&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 AWS 则像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;credsStore&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecr-login&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后需要更新凭据 &lt;code&gt;jenkins-docker-cfg&lt;/code&gt; ，你可以执行以下操作:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl delete secret jenkins-docker-cfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create secret generic jenkins-docker-cfg --from-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./config.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-docker-hub&#34;&gt;使用 Docker Hub&lt;/h2&gt;
&lt;p&gt;如果你想要发布你的镜像到 Docker Hub 当中 ，则需要修改你的 &lt;code&gt;config.json&lt;/code&gt; 像下面那样:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;auths&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;https://index.docker.io/v1/&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyDockerHubToken&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myemail@acme.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;为你的-registry-挂载凭证&#34;&gt;为你的 registry 挂载凭证&lt;/h3&gt;
&lt;p&gt;你的 docker registry 需要将凭证挂载到 &lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/&#34;&gt;Pod 模板&lt;/a&gt;当中。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 常见问题解答</title>
      <link>https://jenkins-x.io/zh/docs/overview/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/overview/faq/</guid>
      <description>
        
        
        &lt;p&gt;我们已经试图把一些常见的问题整理到这里。如果你遇到的问题没有在这里列出来，请&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;让我们知道&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;jenkins-x-是开源的吗&#34;&gt;Jenkins X 是开源的吗？&lt;/h2&gt;
&lt;p&gt;是的！Jenkins X 的所有源码和成品都是开源的；Apache 或 MIT 能保证这一点！&lt;/p&gt;
&lt;h2 id=&#34;jenkins-x-和-jenkins-相比如何呢&#34;&gt;Jenkins X 和 Jenkins 相比如何呢？&lt;/h2&gt;
&lt;p&gt;Jenkins X 通过&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#%E9%83%A8%E7%BD%B2%E5%8D%87%E7%BA%A7&#34;&gt;跨环境的 GitOps 部署升级&lt;/a&gt;和&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#%E9%A2%84%E5%8F%91%E7%8E%AF%E5%A2%83&#34;&gt; Pull Requests 预发环境&lt;/a&gt;为 Kubernetes 中的应用提供了&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#automated-pipelines&#34;&gt;自动化 CI + CD &lt;/a&gt;。
更多信息请参考&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/&#34;&gt;特性&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Jenkins是一个通用的 CI/CD 服务器，可以通过添加插件、更改配置和编写自己的流水线来配置它来做你喜欢的任何事情。&lt;/p&gt;
&lt;p&gt;对于 Jenkins X 仅仅&lt;a href=&#34;https://jenkins-x.io/zh/dosc/getting-started/&#34;&gt;安装 Jenkins X &lt;/a&gt;，它将自动配置所有各种不同的工具（ helm，docker registry，nexus 等等），然后&lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/using-jx/common-tasks/create-spring/&#34;&gt;创建&lt;/a&gt;/导入(/zh/docs/resources/guides/using-jx/common-tasks/import/)，你将获得全面的自动化 CI/CD 和预发环境。这使得当你委托 Jenkins X 管理您的 CI + CD 时，开发人员可以集中精力构建应用程序。&lt;/p&gt;
&lt;p&gt;Jenkins X 支持不同的执行引擎；因此它可以通过在 Docker 容器中重用 Jenkins 来为每个团队编排 Jenkins 服务器。然而当使用&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/jenkins-x-pipelines/&#34;&gt;无服务 Jenkins X 流水线&lt;/a&gt;时，我们使用 &lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt; 而不是 Jenkins 作为底层的 CI/CD 引擎来提供一个新式的、高可用的云原生架构。&lt;/p&gt;
&lt;h2 id=&#34;jenkins-x-是-jenkins-的分支吗&#34;&gt;Jenkins X 是 Jenkins 的分支吗？&lt;/h2&gt;
&lt;p&gt;不！ Jenkins X 可以通过在容器中重用 Jenkins 来编排 Jenkins ，并尽可能地用 kubernetes 原生方式配置它。&lt;/p&gt;
&lt;p&gt;然而当使用&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/jenkins-x-pipelines/&#34;&gt;无服务 Jenkins X 流水线&lt;/a&gt;时，我们使用 &lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt; 而不是 Jenkins 作为底层的 CI/CD 引擎来提供一个新式的、高可用的云原生架构。&lt;/p&gt;
&lt;h2 id=&#34;为什么要创建一个子项目&#34;&gt;为什么要创建一个子项目？&lt;/h2&gt;
&lt;p&gt;我们是 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 和云的超级粉丝，并认为是软件运行的未来趋势。&lt;/p&gt;
&lt;p&gt;然而，很多分支仍然想要通过：&lt;code&gt;java -jar jenkins.war&lt;/code &gt;以常规的方式来运行 Jenkins。&lt;/p&gt;
&lt;p&gt;因此，Jenkins X 子项目的想法，是为了100%关注在 Kubernetes 和云原生使用场景，并让 Jenkins 核心项目关注经典的 Java 方式。&lt;/p&gt;
&lt;p&gt;Jenkins 最强大的是它的灵活性和巨大的插件生态。分离 Jenkins X 子项目帮助社区并行地迭代并快速改进云原生和 Jenkins 经典的发行。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Git 服务器</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/git/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 默认使用 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;，用于开源项目的免费公共 git 托管方案。&lt;/p&gt;
&lt;p&gt;然而，在企业中工作时，你可能希望使用不同的 git 服务器。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_git/&#34;&gt;jx get git&lt;/a&gt; 列出配置好的 git 服务器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加一个新的-git-服务商&#34;&gt;添加一个新的 git 服务商&lt;/h2&gt;
&lt;p&gt;如果你在某个地方已经有了一个 git 服务，你可以通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_git_server/&#34;&gt;jx create git server&lt;/a&gt; 把它添加到 Jenkins X中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git server gitKind someURL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;gitKind&lt;/code&gt; 是某个 git 服务商，像 &lt;code&gt;github, gitea, gitlab, bitbucket&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;企业-github&#34;&gt;企业 GitHub&lt;/h2&gt;
&lt;p&gt;要添加一个企业 GitHub 服务，尝试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git server github https://github.foo.com -n GHE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;-n&lt;/code&gt; 是 git 服务的名称。&lt;/p&gt;
&lt;h2 id=&#34;bitbucket&#34;&gt;BitBucket&lt;/h2&gt;
&lt;p&gt;要添加 BitBucket ，尝试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git server bitbucket -n BitBucket https://bitbucket.org
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加用户-tokens&#34;&gt;添加用户 tokens&lt;/h3&gt;
&lt;p&gt;为了添加一个 git 服务，你需要通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_git_token/&#34;&gt;jx create git token&lt;/a&gt; 添加一个用户名和 API token：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git token -n myProviderName myUserName
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，就会提示你输入 API token&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-托管的-git-服务&#34;&gt;Kubernetes 托管的 git 服务&lt;/h3&gt;
&lt;p&gt;你可以安装 git 服务到运行 Jenkins X 的 Kubernetes 集群中。&lt;/p&gt;
&lt;p&gt;例如：有一个 &lt;a href=&#34;https://gitea.io/en-us/&#34;&gt;gitea&lt;/a&gt; 的插件，可以让你把 gitea 作为 Jenkins X 安装的一部分。&lt;/p&gt;
&lt;p&gt;要在 Jenkins X 中使用 &lt;a href=&#34;https://gitea.io/en-us/&#34;&gt;gitea&lt;/a&gt;，你需要在安装 Jenkins X 之前启用 &lt;code&gt;gitea&lt;/code&gt; 插件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx edit addon gitea -e true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_addons/&#34;&gt;jx get addons&lt;/a&gt; 查看启用的插件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get addons
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，当你 &lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/&#34;&gt;安装 Jenkins X&lt;/a&gt; 时，也会安装 &lt;code&gt;gitea&lt;/code&gt; 插件。&lt;/p&gt;
&lt;p&gt;无论什么时候，Jenkins X 需要为一个环境或者新项目创建一个 git 库时，gitea 服务都会出现在选择列表中。&lt;/p&gt;
&lt;h4 id=&#34;gitea-已知的限制&#34;&gt;gitea 已知的限制&lt;/h4&gt;
&lt;p&gt;在写本文时，&lt;a href=&#34;https://issues.jenkins-ci.org/browse/JENKINS-50459&#34;&gt;gitea plugin for Jenkins&lt;/a&gt;不能够正确地更新 Pull Request 和 git 提交构建状态，这会打断 GitOps 升级流水线。可以手工审核来升级；但是，流水线会报告失败。&lt;/p&gt;
&lt;p&gt;另一个问题是，由 &lt;code&gt;jx&lt;/code&gt; 在 &lt;code&gt;gitea&lt;/code&gt; 创建的新项目，无法使得 &lt;a href=&#34;https://github.com/go-gitea/go-sdk/issues/100&#34;&gt;在 Pull Requests 中合并按钮可用&lt;/a&gt;。要使得可用的话，当一个项目在 GitHub 中创建后，你到仓库的 &lt;code&gt;Settings&lt;/code&gt; 页面，在 &lt;code&gt;gitea&lt;/code&gt; 的 web 控制台中，启用合并按钮。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: IDE</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/ide/</guid>
      <description>
        
        
        &lt;p&gt;作为开发人员，我们经常在 IDE 上花大量的时间来编码。Jenkins X 完全是为了帮助开发人员快速交付商业价值的，因此，我们希望使得 Jenkins X 在你的 IDE 中更加容易使用。&lt;/p&gt;
&lt;p&gt;因此，我们有 IDE 插件来方便使用 Jenkins X。&lt;/p&gt;
&lt;h2 id=&#34;vs-code&#34;&gt;VS Code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; 是一个流行的来自微软的开源 IDE。&lt;/p&gt;
&lt;p&gt;我们已经为 VS Code 研发了插件 &lt;a href=&#34;https://github.com/jenkins-x/vscode-jx-tools&#34;&gt;vscode-jx-tools&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;code&gt;扩展&lt;/code&gt; 窗口把插件安装到 VS Code，搜索 &lt;code&gt;jx&lt;/code&gt; 应该能查到这个扩展。&lt;/p&gt;
&lt;p&gt;安装完后点击 &lt;code&gt;重新加载&lt;/code&gt;，你应该就能使用了。&lt;/p&gt;
&lt;p&gt;如果你展开 &lt;code&gt;JENKINS X&lt;/code&gt; 导航窗口，应该能看到你创建工程的实时更新界面，还有 Pull Request 被创建或者代码被合并到了 master。&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/vscode.png&#34;&gt;
&lt;h3 id=&#34;特色&#34;&gt;特色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;浏览你所在团队的所有流水线的实时更新，包括发布或者 Pull Request 流水线的开始和结束&lt;/li&gt;
&lt;li&gt;在 VS Code 终端内打开流水线构建日志&lt;/li&gt;
&lt;li&gt;轻松地浏览 Jenkins 流水线页面、git 仓库、构建日志或者应用
&lt;ul&gt;
&lt;li&gt;Jenkins X 浏览器的右键点击&lt;/li&gt;
&lt;li&gt;还有启动（停止）流水线！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过一个命令打开 &lt;a href=&#34;https://jenkins-x.io/zh/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; ，保持源码与云上的相同容器镜像和 pod 模板同步&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 常见问题解答</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/issues/</guid>
      <description>
        
        
        &lt;p&gt;我们已经试图把一些常见的问题整理到这里。如果你遇到的问题没有在这里列出来，请&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;让我们知道&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;无法创建-minikube-集群&#34;&gt;无法创建 minikube 集群&lt;/h3&gt;
&lt;p&gt;如果你使用的是 Mac，那么， &lt;code&gt;hyperkit&lt;/code&gt; 是最好的虚拟机驱动——但首先需要你安装最新的&lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker for Mac&lt;/a&gt;。之后，尝试 &lt;code&gt;jx create cluster minikube&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果，你的 minikube 启动失败，那么你可以尝试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;minikube delete
rm -rf ~/.minikube
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果运行 &lt;code&gt;rm&lt;/code&gt; 失败，你可能需要：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo rm -rf ~/.minikube
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，再试一次 &lt;code&gt;jx create cluster minikube&lt;/code&gt; ，这样有帮助吗？有时候，从安装的旧版本中一些过时的证书或者文件会导致 minikube 失败。&lt;/p&gt;
&lt;p&gt;有时候，当虚拟机出错时，重启可能会有帮助。&lt;/p&gt;
&lt;p&gt;另外，你还可以尝试下面的 minikube 指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube#installation&#34;&gt;安装 minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube#quickstart&#34;&gt;运行 minikube start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;minkube-和-hyperkit-无法找到-ip-地址&#34;&gt;Minkube 和 hyperkit: 无法找到 IP 地址&lt;/h3&gt;
&lt;p&gt;如果你在 Mac 上通过 hyperkit 使用 minikube，并发现 minikube 启动失败的日志如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Temporary Error: Could not find an IP address &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 46:0:41:86:41:6e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Temporary Error: Could not find an IP address &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 46:0:41:86:41:6e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Temporary Error: Could not find an IP address &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 46:0:41:86:41:6e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Temporary Error: Could not find an IP address &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 46:0:41:86:41:6e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里可能会给你提示，&lt;a href=&#34;https://github.com/kubernetes/minikube/issues/1926#issuecomment-356378525&#34;&gt;minikube 和 hyperkit 相关问题&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;解决的办法是请尝试下面的操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm ~/.minikube/machines/minikube/hyperkit.pid
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，再试一次。希望这次能够成功！&lt;/p&gt;
&lt;h3 id=&#34;无法访问-minikube-上的服务&#34;&gt;无法访问 minikube 上的服务&lt;/h3&gt;
&lt;p&gt;当运行 minikube，本地 &lt;code&gt;jx&lt;/code&gt; 默认使用 &lt;a href=&#34;http://nip.io/&#34;&gt;nip.io&lt;/a&gt; 作为服务的域名解析，并解决了大多数笔记本无法使用通配的 DNS。然而，有时候，&lt;a href=&#34;http://nip.io/&#34;&gt;nip.io&lt;/a&gt; 会出问题而无法工作。&lt;/p&gt;
&lt;p&gt;为了避免使用 &lt;a href=&#34;http://nip.io/&#34;&gt;nip.io&lt;/a&gt; 你可以进行以下操作：&lt;/p&gt;
&lt;p&gt;编辑文件 &lt;code&gt;~/.jx/cloud-environments/env-minikube/myvalues.yaml&lt;/code&gt;，并添加下面的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;expose&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Args&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - --&lt;span style=&#34;color:#ae81ff&#34;&gt;exposer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - --&lt;span style=&#34;color:#ae81ff&#34;&gt;http&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，再次运行 &lt;code&gt;jx install&lt;/code&gt; ，这将会把把服务暴露在 &lt;code&gt;node ports&lt;/code&gt;，不再使用 ingress 和 DNS。&lt;/p&gt;
&lt;p&gt;因此，如果你输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx open
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将会看到所有的 UR 格式 &lt;code&gt;http://$(minikube ip):somePortNumber&lt;/code&gt;，不再通过 &lt;a href=&#34;http://nip.io/&#34;&gt;nip.io&lt;/a&gt;。这就意味着 URL 使用难记忆的数字格式而不是简单的主机名。&lt;/p&gt;
&lt;h3 id=&#34;其他问题&#34;&gt;其他问题&lt;/h3&gt;
&lt;p&gt;请&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;让我们知道&lt;/a&gt; ，看我们是否可以提供帮助？祝你好运！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins 相关问题</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/jenkins/</guid>
      <description>
        
        
        &lt;h1 id=&#34;密码&#34;&gt;密码&lt;/h1&gt;
&lt;p&gt;安装在 Jenkins X 中的 Jenkins 没有提供修改管理员密码的页面，但是你可以通过配置文件 &lt;code&gt;~/.jx/jenkinsAuth.yaml&lt;/code&gt; 来获取密码。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes 上下文</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/kube-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/kube-context/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 命令行工具 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; 通过本地文件 &lt;code&gt;~/.kube/config&lt;/code&gt;（会在 &lt;code&gt;$KUBECONFIG&lt;/code&gt; 的文件） 记录你使用的 Kubernetes 集群和命名空间。&lt;/p&gt;
&lt;p&gt;如果你想要改变命名空间，你可以使用 kubectl 命令行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl config set-context&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;kubectl config current-context&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; --namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而 &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt; 还提供了很多有用的命令，用来改变集群、命名空间或环境：&lt;/p&gt;
&lt;h3 id=&#34;切换环境&#34;&gt;切换环境&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_environment/&#34;&gt;jx environment&lt;/a&gt; 来切换 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx environment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你将会看到当前团队的环境列表。使用方向键和回车来选择你想要切换的环境。或者按下 &lt;code&gt;Ctrl+C&lt;/code&gt; 终止，不切换环境。&lt;/p&gt;
&lt;p&gt;或者，如果你知道想要切换的环境，可以直接把它作为参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx env staging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;切换命名空间&#34;&gt;切换命名空间&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_namespace/&#34;&gt;jx namespace&lt;/a&gt; 在 Kubernetes 不同的命名空间之间进行切换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到 Kubernetes 集群中所有命名空间的列表。使用方向键和回车选择你想要切换的。或者，按下 &lt;code&gt;Ctrl+C&lt;/code&gt; 中断，不切换命名空间。&lt;/p&gt;
&lt;p&gt;或者，如果你知道想要切换的 Kubernetes 命名空间，可以直接把它作为参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx ns jx-production
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;切换集群&#34;&gt;切换集群&lt;/h3&gt;
&lt;p&gt;使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_context/&#34;&gt;jx context&lt;/a&gt; 在不同的 Kubernetes 集群（或者上下文）之间切换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx context
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会得到当前机器上所有上下文的列表。使用方向键或者回车选择你想要切换的。或者，按下 &lt;code&gt;Ctrl+C&lt;/code&gt; 中断，不切换集群。&lt;/p&gt;
&lt;p&gt;或者，如果你知道想要切换的 Kubernetes 集群，可以直接把它作为参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx ctx gke_jenkinsx-dev_europe-west2-a_myuserid-foo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx ctx minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;本地变化&#34;&gt;本地变化&lt;/h3&gt;
&lt;p&gt;当前你通过 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; 切换 Kubernetes 的命名空间或上下文，或上面提到的命令，那么 Kubernetes 会把 &lt;strong&gt;你所有的终端&lt;/strong&gt; 都进行切换，因为它更新的是共享文件 (&lt;code&gt;~/.kube/config&lt;/code&gt; 或 &lt;code&gt;$KUBECONFIG&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;这样很方便——但有时候会有危险。例如：如果你想要在生产集群上做一些事情；但是，忘记了，然后在另外一个终端上执行命令要删除你的开发命名空间上所有的 pod——但是你忘记来刚刚切换到来生产命名空间上！&lt;/p&gt;
&lt;p&gt;因此，如果通过一个 shell 命令来切换 Kubernetes 上下文或命名空间，有时候是很有帮助的。例如：如果你总是想要看一下集群中的生产环境，就只在那个 shell 中使用那个集群，这样可以减少事故。&lt;/p&gt;
&lt;p&gt;你可以使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_shell/&#34;&gt;jx shell&lt;/a&gt; 提示你选择不同的 Kubernetes 上下文，例如：&lt;a href=&#34;https://jenkins-x.io/commands/jx_context/&#34;&gt;jx context&lt;/a&gt; 命令。然而，这样切换命名空间或集群就只能在当前 shell 中有效！&lt;/p&gt;
&lt;p&gt;还有 &lt;a href=&#34;https://jenkins-x.io/commands/jx_shell/&#34;&gt;jx shell&lt;/a&gt; 通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_prompt/&#34;&gt;jx prompt&lt;/a&gt; 自动更新你的命令提示符，这样使得你的 shell 很清楚上下文或命名空间的修改。&lt;/p&gt;
&lt;h3 id=&#34;定制你的-shell&#34;&gt;定制你的 shell&lt;/h3&gt;
&lt;p&gt;你可以使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_prompt/&#34;&gt;jx prompt&lt;/a&gt; 把当前 Kubernetes 集群和命名空间添加到你的终端提示符中。&lt;/p&gt;
&lt;p&gt;要为 &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx 命令&lt;/a&gt; 添加命令自动补充，尝试 &lt;a href=&#34;https://jenkins-x.io/commands/jx_completion/&#34;&gt;jx 自动补充&lt;/a&gt; 。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pod 模板</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/pod-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/pod-templates/</guid>
      <description>
        
        
        &lt;p&gt;我们使用申明式（declarative）Jenkins 流水线实现 CI/CD ，每个应用或者环境的 git 库源码中有 &lt;code&gt;Jenkinsfile&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们使用 Jenkins 的 &lt;a href=&#34;https://github.com/jenkinsci/kubernetes-plugin&#34;&gt;kubernetes 插件&lt;/a&gt;，使得在 Kubernetes 中为每次构建启动一个新的 pod —— 感谢 Kubernetes 给了我们一个用于运行流水线的伸缩的代理池。&lt;/p&gt;
&lt;p&gt;Kubernetes 插件使用 &lt;em&gt;pod templates&lt;/em&gt; 定义用于运行 CI/CD 流水线的 pod，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个或多个构建容器，用于运行命令（例如：你的构建工具，像 &lt;code&gt;mvn&lt;/code&gt; 或 &lt;code&gt;npm&lt;/code&gt; ，还有流水线的其它部分的工具，像 &lt;code&gt;git, jx, helm, kubectl&lt;/code&gt; 等等&lt;/li&gt;
&lt;li&gt;永久存储卷&lt;/li&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;li&gt;可以写到 git 仓库、docker 注册表、maven/npm/helm 仓库等等的 secret&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考-pod-templates&#34;&gt;参考 Pod Templates&lt;/h2&gt;
&lt;p&gt;Jenkins X 带有一套给支持的语言和运行时的默认 pod 模板，在你的 &lt;a href=&#34;https://jenkins-x.io/zh/architecture/build-packs&#34;&gt;build packs&lt;/a&gt;中，命名类似于：&lt;code&gt;jenkins-$PACKNAME&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/&#34;&gt;maven build pack&lt;/a&gt; 使用的 pod 模板时是 &lt;code&gt;jenkins-maven&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后，我们就可以 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/Jenkinsfile#L1-L4&#34;&gt;在 Jenkinsfile 中引用 pod 模板名称&lt;/a&gt;，在申明式流水线中使用这样的语法 &lt;code&gt;agent { label &amp;quot;jenkins-$PACKNAME }&lt;/code&gt; ，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// my declarative Jenkinsfile
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipeline &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    agent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      label &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-maven&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    environment &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stages &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CI Build and push snapshot&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        steps &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          container&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;maven&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mvn deploy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;提交新的-pod-模板&#34;&gt;提交新的 Pod 模板&lt;/h2&gt;
&lt;p&gt;如果你正在使用一个新的 &lt;a href=&#34;https://jenkins-x.io/zh/architecture/build-packs&#34;&gt;build pack&lt;/a&gt;，那么，我们欢迎你 &lt;a href=&#34;https://jenkins-x.io/zh/docs/contributing/&#34;&gt;提交&lt;/a&gt; 一个新的 pod 模板，而且我们可以把它包含在 Jenkins X 的发行版中！&lt;/p&gt;
&lt;p&gt;现在遵循如何这个的指示 —— 如果有任何不清楚的话请&lt;a href=&#34;https://jenkins-x.io/zh/community/&#34;&gt;加入社区并提问&lt;/a&gt;，我们很高兴帮助你！&lt;/p&gt;
&lt;p&gt;为了提交一个新的 build pack：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派生 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/&#34;&gt;jenkins-x-platform&lt;/a&gt; 库&lt;/li&gt;
&lt;li&gt;增加你的 build pack 到 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431&#34;&gt;jenkins-x-platform 库中的 values.yaml 文件里&lt;/a&gt; 在 YAML 文件的 &lt;code&gt;jenkins.Agent.PodTemplates&lt;/code&gt; 这个区域&lt;/li&gt;
&lt;li&gt;你啃根想要从复制、粘贴开始大多数相似已经存在 pod 模板（例如：拷贝 &lt;code&gt;Maven&lt;/code&gt;，如果你使用基于 Java 的构建pod），并且，只是配置名称、标签和 &lt;code&gt;Image&lt;/code&gt; 等等。&lt;/li&gt;
&lt;li&gt;现在到 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/&#34;&gt;jenkins-x-platform&lt;/a&gt; 库为你的 pod 模板提交一个 Pull Request&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建容器&#34;&gt;构建容器&lt;/h3&gt;
&lt;p&gt;当使用 pod 模板和 Jenkins 流水线时，每个工具你可以用很多不同的容器。例如： &lt;code&gt;maven&lt;/code&gt; 容器和 &lt;code&gt;git&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;我们发现，在一个构建容器里有所有通用的工具会比较简单。这也意味着你可以使用 &lt;code&gt;kubectl exec&lt;/code&gt; 或 &lt;a href=&#34;https://jenkins-x.io/commands/jx_rsh/&#34;&gt;jx rsh&lt;/a&gt; 打开一个构建 pod 的 shell，当你调试、诊断有问题的流水线时里面有所有需要的工具。&lt;/p&gt;
&lt;p&gt;因此，我们有一个 &lt;a href=&#34;https://github.com/jenkins-x/builder-base&#34;&gt;builder-base&lt;/a&gt; 的 docker 镜像，&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common#L4-L15&#34;&gt;包含所有不同的工具&lt;/a&gt; ，我们倾向于在 CI/CD 流水线中使用像 &lt;code&gt;jx, skaffold, helm, git, updatebot&lt;/code&gt; 的工具。&lt;/p&gt;
&lt;p&gt;如果想要在你新的 pod 模板中使用单一的构建惊喜那个，那么，你可以使用 builder base 作为基础增加你自定义的工具。&lt;/p&gt;
&lt;p&gt;例如：&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven&#34;&gt;builder-maven&lt;/a&gt; 使用一个 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders/blob/master/builder-maven/Dockerfile#L1&#34;&gt;Dockerfile&lt;/a&gt; 引用基础构建。&lt;/p&gt;
&lt;p&gt;因此，最简单的就是拷贝一个简单的 builder —— 像 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven&#34;&gt;builder-maven&lt;/a&gt;，然后编辑 &lt;code&gt;Dockerfile&lt;/code&gt; 增加你需要的构建工具。&lt;/p&gt;
&lt;p&gt;我们欢迎 Pull Requests 和&lt;a href=&#34;https://jenkins-x.io/zh/docs/contributing/&#34;&gt;贡献&lt;/a&gt;，因此，请把你新的构建容器和 Pod 模板提交，我们很乐意&lt;a href=&#34;https://jenkins-x.io/zh/docs/contributing/&#34;&gt;帮助&lt;/a&gt;！&lt;/p&gt;
&lt;h2 id=&#34;增加你自己的-pod-模板&#34;&gt;增加你自己的 Pod 模板&lt;/h2&gt;
&lt;p&gt;为了保持简单，我们倾向于在 Jenkins 配置中定义 pod 模板，然后在 &lt;code&gt;Jenkinsfile&lt;/code&gt; 中通过名称来引用。&lt;/p&gt;
&lt;p&gt;尽管一个 pod 模板倾向于有很多开发环境定义在里面，像 secrets；如果需要的话，你可以尝试在 &lt;code&gt;Jenkinsfile&lt;/code&gt; 中用内联的形式定义 pod 模板，使变得简单。但我们更喜欢把大多数 pod 模板保留在你的开发环境源码中，而不是在每个应用中拷贝、粘贴。&lt;/p&gt;
&lt;p&gt;现在，添加新的 Pod 模板最简单的方式就是通过 Jenkins 控制台。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx console
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就会打开 Jenkins 控制台。然后，导航到&lt;code&gt;管理 Jenkins&lt;/code&gt;（在左侧菜单），然后&lt;code&gt;系统配置&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你将会面临大量的页面配置选项，Pod 模板通常在底部；你应该看到了当前所有的 pod 模板，像 maven、NodeJS 等等。&lt;/p&gt;
&lt;p&gt;你可以在那个页面编辑、增加、移除 pod 模板并点击保存。&lt;/p&gt;
&lt;p&gt;注意，长期来说，尽管我们希望&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/604&#34;&gt;通过 GitOps 维护你的开发环境，就像是我们做的 Staging 和 Production&lt;/a&gt; —— 也就意味着当你&lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;升级你的开发环境&lt;/a&gt;通过 Jenkins 界面做的修改可能会丢失。&lt;/p&gt;
&lt;p&gt;因此，我们希望把 Pod 模板添加到你的开发环境 git 库的 &lt;code&gt;values.yaml&lt;/code&gt; 文件中，就像我们在 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431&#34;&gt;jenkins-x-platform chart&lt;/a&gt; 做的一样。&lt;/p&gt;
&lt;p&gt;如果你正在使用开源工具创建 pod 模板，那么&lt;a href=&#34;#submitting-new-pod-templates&#34;&gt;在 Pull Request 中提交你的 pod 模板&lt;/a&gt;会比较简单，我们可以把它添加到 Jenkins X 未来的发行版中？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 分类问题</title>
      <link>https://jenkins-x.io/zh/docs/contributing/code/triage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/code/triage/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 项目主要的问题跟踪系统是 &lt;a href=&#34;https://github.com/jenkins-x/jx/issues&#34;&gt;https://github.com/jenkins-x/jx/issues&lt;/a&gt;。这旨在捕捉问题、想法和开发工作。如有疑问请提交一个问题，一名 Jenkins X 团队成员将考虑尽快给它分类。&lt;/p&gt;
&lt;p&gt;由于 Jenkins X 使用来自 Kubernetes 生态的 &lt;a href=&#34;https://jenkins-x.io/https://www.cloudbees.com/blog/serverless-jenkins-jenkins-x&#34;&gt;prow&lt;/a&gt;，我们认为，我们应该带领他们参与处理分类大量问题，以帮助和鼓励贡献者。我们正在重用标签的样式，包括颜色，以尝试在跨开源项目时创建熟悉度，并减少贡献的障碍。&lt;/p&gt;
&lt;h1 id=&#34;分类问题&#34;&gt;分类问题&lt;/h1&gt;
&lt;p&gt;所有可用标签列表请参考：https://github.com/jenkins-x/jx/labels&lt;/p&gt;
&lt;p&gt;当对问题进行分类时，来自 Jenkins X 团队的某个成员将分配标签用来描述问题的 &lt;strong&gt;area&lt;/strong&gt; 和 &lt;strong&gt;kind&lt;/strong&gt; 。有可能，他们还将增加一个 priority ，但是，在进一步分析或更广泛的可见性之后，这些 priority 可能会发生变化。&lt;/p&gt;
&lt;p&gt;标签通过 prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34;&gt;label&lt;/a&gt; 插件使用 GitHub 评论被添加。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/kind bug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/area prow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/priority important-soon
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/triage.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;分配问题&#34;&gt;分配问题&lt;/h1&gt;
&lt;p&gt;当进行分类时我们尝试将问题分配给某个人。这可能会随着调查或人员的可用性而改变。&lt;/p&gt;
&lt;h1 id=&#34;调查问题&#34;&gt;调查问题&lt;/h1&gt;
&lt;p&gt;当任何人在处理一个问题时，我们的目的是通过添加注释来捕获任何分析。这有助于人们学习如何调查类似问题的技巧，帮助人们理解思考过程，并通过 pull request 为任何链接修复提供上下文。&lt;/p&gt;
&lt;h1 id=&#34;新建标签&#34;&gt;新建标签&lt;/h1&gt;
&lt;p&gt;如果你想要请求创建一个新的标签，那么请提交一个问题并附带尽可能多的内容。&lt;/p&gt;
&lt;h1 id=&#34;陈旧的问题&#34;&gt;陈旧的问题&lt;/h1&gt;
&lt;p&gt;当我们鼓励广泛的问题类型，如一般的想法和想法，问题跟踪器可能增长得相当高。我们将启用 prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34;&gt;lifecycle&lt;/a&gt; 插件来帮助管理陈旧的问题。这并不意味着具有侵入性，而是允许我们不断地重新思考问题，并保持跨问题的势头。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建 GKE 集群</title>
      <link>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_cluster_gke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_cluster_gke/</guid>
      <description>
        
        
        &lt;p&gt;该 &lt;a href=&#34;https://www.youtube.com/watch?v=r8-J9Qg-p9U&#34;&gt;示例&lt;/a&gt; 使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster_gke/&#34;&gt;jx create cluster gke&lt;/a&gt; 来 &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;创建一个新的 Kubernetes 集群&lt;/a&gt;：&lt;/p&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/r8-J9Qg-p9U&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 创建 Spring</title>
      <link>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_spring/</guid>
      <description>
        
        
        &lt;p&gt;该 &lt;a href=&#34;https://www.youtube.com/watch?v=kPes3rvT1UM&#34;&gt;示例&lt;/a&gt; 使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx create spring&lt;/a&gt; 来 &lt;a href=&#34;https://jenkins-x.io/developing/create-spring/&#34;&gt;创建带有持续集成、部署流水线的 Spring Boot 应用&lt;/a&gt; 并使用 &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#promotion&#34;&gt;GitOps 提升&lt;/a&gt;：&lt;/p&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/kPes3rvT1UM&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 创建 Spring Boot</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/create-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/create-spring/</guid>
      <description>
        
        
        &lt;p&gt;如果你在开发基于Java的微服务，那么，你可能正在用流行的&lt;a href=&#34;https://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可以利用&lt;a href=&#34;http://start.spring.io/&#34;&gt;Spring Boot Initializr&lt;/a&gt;创建Spring Boot应用，然后通过执行命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; 来&lt;a href=&#34;https://jenkins-x.io/developing/import/&#34;&gt;导入Jenkins X&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然而，另外一个快速自动化的方式，是通过执行 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx create spring&lt;/a&gt; 命令实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create spring -d web -d actuator
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数 &lt;code&gt;-d&lt;/code&gt; 允许你指定希望添加到 Spring Boot 应用中的依赖。&lt;/p&gt;
&lt;p&gt;我们强烈建议你总是包括依赖 &lt;strong&gt;actuator&lt;/strong&gt; 到你的 Spring Boot 应用中，它可以为 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&#34;&gt;Liveness and Readiness probes&lt;/a&gt; 提供健康检查。&lt;/p&gt;
&lt;p&gt;命令 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx create spring&lt;/a&gt; 的步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在子目录中创建一个新的 Spring Boot 应用&lt;/li&gt;
&lt;li&gt;把你的源码加入到git库中&lt;/li&gt;
&lt;li&gt;在 git 服务，例如 &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;,添加 git 远程库&lt;/li&gt;
&lt;li&gt;推送代码到 git 远程库&lt;/li&gt;
&lt;li&gt;添加默认的文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 把你的应用构建为 docker 镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; 实现 CI / CD 流水线&lt;/li&gt;
&lt;li&gt;在 Kubernetes 中通过 helm chart 运行你的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为你的 Jenkins 在 git 远程库上注册 webhook&lt;/li&gt;
&lt;li&gt;为你的 Jenkins 添加 git 库&lt;/li&gt;
&lt;li&gt;首次触发流水线&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建集群</title>
      <link>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/getting-started/demos-talks-posts/create_cluster/</guid>
      <description>
        
        
        &lt;p&gt;该 &lt;a href=&#34;https://www.youtube.com/watch?v=ELA4tytdFeA&#34;&gt;示例&lt;/a&gt; 使用命令并行地 &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;创建了一个新的 Kubernetes 集群&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster_gke/&#34;&gt;jx create cluster gke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster_aks/&#34;&gt;jx create cluster aks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx create cluster minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ELA4tytdFeA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 升级</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/promote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/promote/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 的升级策略配置为 &lt;code&gt;Auto&lt;/code&gt; 时，持续部署流水线通过配置好的&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#promotion&#34;&gt;环境&lt;/a&gt;来自动化&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#promotion&#34;&gt;升级&lt;/a&gt;版本。默认情况下，&lt;code&gt;Staging&lt;/code&gt; 环境使用自动升级，&lt;code&gt;生产&lt;/code&gt;环境使用&lt;code&gt;手动&lt;/code&gt;升级。&lt;/p&gt;
&lt;p&gt;要手动升级应用的一个版本到特定环境上，可以使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_promote/&#34;&gt;jx promote&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx promote myapp --version 1.2.3 --env production
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令会等待升级完成，并记录过程的详细信息。你可以通过参数 &lt;code&gt;--timeeout&lt;/code&gt; 为升级等待设置超时时间。&lt;/p&gt;
&lt;p&gt;例如：等待5小时&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx promote myapp --version 1.2.3 --env production --timeout 5h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以使用类似 &lt;code&gt;20m&lt;/code&gt; 或 &lt;code&gt;10h30m&lt;/code&gt; 这样的时间表达式。&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h3 id=&#34;反馈&#34;&gt;反馈&lt;/h3&gt;
&lt;p&gt;如果提交注释中引用了问题（例如：通过文本 &lt;code&gt;fixes #123&lt;/code&gt;），那么，Jenkins X 流水线会自动生成类似 &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34;&gt;jx 发布&lt;/a&gt; 的发布记录。&lt;/p&gt;
&lt;p&gt;同样的，升级到 &lt;code&gt;Staging&lt;/code&gt; 或 &lt;code&gt;生产&lt;/code&gt; 环境中的提交日志中也会自动关联每个修复的问题，包括有发布日志和应用所运行环境的链接。&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 安装问题</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/setup/</guid>
      <description>
        
        
        &lt;h2 id=&#34;如何在-jenkins-x-的安装当中添加用户&#34;&gt;如何在 Jenkins X 的安装当中添加用户？&lt;/h2&gt;
&lt;p&gt;Jenkins X 假设每个用户都可以访问运行 Jenkins X 的 kubernetes 开发集群。&lt;/p&gt;
&lt;p&gt;如果您的用户无权访问 kubernetes 集群，我们需要设置他们的 &lt;code&gt;~/.kube/config&lt;/code&gt; 文件，以便他们可以访问它。&lt;/p&gt;
&lt;p&gt;如果您正在使用 Google 的 GKE ，那么您可以浏览 &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;GKE Console&lt;/a&gt; 以查看所有集群，然后单击开发集群旁边的 &lt;code&gt;Connect&lt;/code&gt; 按钮，然后可以运行复制/粘贴命令以连接到集群。&lt;/p&gt;
&lt;p&gt;对于其他集群，我们计划编写一些 &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/1406&#34;&gt;CLI 命令来导出和导入kube配置&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;当用户拥有了-kubernetes-集群的访问权限&#34;&gt;当用户拥有了 kubernetes 集群的访问权限&lt;/h3&gt;
&lt;p&gt;当用户拥有了 kubernetes 集群的访问权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/getting-started/setup/install/&#34;&gt;安装 jx 二进制文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Jenkins X 安装在命名空间 &lt;code&gt;jx&lt;/code&gt; 中，那么应该 &lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/using-jx/common-tasks/kube-context/&#34;&gt;切换你的上下文&lt;/a&gt; 到命名空间 &lt;code&gt;jx&lt;/code&gt; 当中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx ns jx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试安装成功可以输入下列命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx get env
jx open
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看环境和任何开发工具，如 Jenkins 或 Nexus 控制台。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 导入</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/import/</guid>
      <description>
        
        
        &lt;p&gt;如果你已经有一些源码，希望导入 Jenkins X，你可以使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; 命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd my-cool-app
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导入将会执行下面的动作（提示你按照这个方法来）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的源码还不在 git 库中，添加进去&lt;/li&gt;
&lt;li&gt;在给定的 git 服务上创建一个远程库，例如 &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;把你的代码推送到远程 git 服务&lt;/li&gt;
&lt;li&gt;添加任何需要的文件到你的工程中，如果不存在的话：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 把你的应用作为 docker 镜像进行构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; 实现持续集成、持续构建流水线&lt;/li&gt;
&lt;li&gt;helm chart 让你的应用在 Kubernetes 中运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为你们团队的 Jenkins 注册一个 webhook 到远程 git 仓库&lt;/li&gt;
&lt;li&gt;为你们团队的 Jenkins 添加这个 git 仓库&lt;/li&gt;
&lt;li&gt;首次触发流水线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;避免-docker--helm&#34;&gt;避免 docker + helm&lt;/h3&gt;
&lt;p&gt;如果你正在导入的仓库而不需要创建 docker 镜像，你可以使用命令参数 &lt;code&gt;--no-draft&lt;/code&gt; ，就不会使用 Draft 默认的 Dockerfile 和 helm chart。&lt;/p&gt;
&lt;h3 id=&#34;通过-url-导入&#34;&gt;通过 URL 导入&lt;/h3&gt;
&lt;p&gt;如果你希望导入的工程已经在 git 远程库中，那么，你可以使用参数 &lt;code&gt;--url&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import --url https://github.com/jenkins-x/spring-boot-web-example.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;导入-github-项目&#34;&gt;导入 GitHub 项目&lt;/h3&gt;
&lt;p&gt;如果你希望从 GitHub 组织中导入，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import --github --org myname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将会提示你需要导入的库。使用光标和空格键来选择（取消）要导入的库。&lt;/p&gt;
&lt;p&gt;如果你希望默认导入所有的库（那么反选你不想要的）添加 &lt;code&gt;--all&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import --github --org myname --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了过滤列表，你可以添加参数 &lt;code&gt;--filter&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx import --github --org myname --all --filter foo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 开发问题</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/faq/</guid>
      <description>
        
        
        &lt;h2 id=&#34;如何注入特定的环境配置&#34;&gt;如何注入特定的环境配置&lt;/h2&gt;
&lt;p&gt;Jenkins X 中的每个环境都在 git 存储库中定义; 我们使用 GitOps 来管理每个环境中的所有更改，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加/删除应用&lt;/li&gt;
&lt;li&gt;更改应用程序的版本（更新或回滚）&lt;/li&gt;
&lt;li&gt;使用环境特定值配置任何应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两个项在您环境的 git 存储库的 &lt;code&gt;env/requirements.yaml&lt;/code&gt; 文件中定义。 后者在 &lt;code&gt;env/values.yaml&lt;/code&gt; 文件中定义。&lt;/p&gt;
&lt;p&gt;Helm charts 使用 &lt;a href=&#34;https://github.com/helm/helm/blob/master/docs/chart_template_guide/values_files.md&#34;&gt;values.yaml文件&lt;/a&gt;，以便您可以覆盖 charts 中的任何配置以修改设置，例如任何资源或资源配置上的标签或注释（例如 &lt;code&gt;replicaCount&lt;/code&gt; ）或将环境变量等内容传递给 &lt;code&gt;Deployment&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以，如果你想改变 &lt;code&gt;staging&lt;/code&gt; 环境中应用 &lt;code&gt;foo&lt;/code&gt; 的 &lt;code&gt;replicaCount&lt;/code&gt; ，那么通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get env&lt;/a&gt; 查找 &lt;code&gt;staging&lt;/code&gt; 环境的 git 存储库，找到 git URL 。&lt;/p&gt;
&lt;p&gt;导航到 &lt;code&gt;env/values.yaml&lt;/code&gt; 文件并添加/编辑一些 YAML ，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;foo&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将该更改作为 Pull Request 提交，以便它可以通过 CI 测试并且进行任何同行评审/批准; 然后当它合并到它的 master 分支它将修改 &lt;code&gt;foo&lt;/code&gt; 应用程序的 &lt;code&gt;replicaCount&lt;/code&gt;（假设在 &lt;code&gt;env/requirements.yaml&lt;/code&gt; 文件中有一个名为 &lt;code&gt;foo&lt;/code&gt; 的 chart ）&lt;/p&gt;
&lt;p&gt;如果需要，可以使用 vanilla helm 来执行注入当前命名空间之类的操作。&lt;/p&gt;
&lt;p&gt;要查看如何使用 &lt;code&gt;values.yaml&lt;/code&gt; 文件注入 chart 的更复杂示例，请参阅我们如何使用这些文件&lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/managing-jx/common-tasks/config/&#34;&gt;配置 Jenkins X 本身&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何管理每个环境中的-secret-&#34;&gt;如何管理每个环境中的 Secret ？&lt;/h2&gt;
&lt;p&gt;我们自己使用封闭 Secrets 来管理我们所有 CI/CD 的 Jenkins X 安装 - 所以 Secret 被加密并检出到每个环境的 git 仓库。 我们使用 &lt;a href=&#34;https://github.com/futuresimple/helm-secrets&#34;&gt;helm-secrets&lt;/a&gt; 插件来执行此操作。&lt;/p&gt;
&lt;p&gt;虽然更好的方法是使用我们正在调研的 Vault Operator - 它可以通过 Vault 获取和填充密码（并回收它们等）。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 快速开始</title>
      <link>https://jenkins-x.io/zh/docs/getting-started/first-project/create-quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/getting-started/first-project/create-quickstart/</guid>
      <description>
        
        
        &lt;p&gt;你可以由预制的应用开始一个项目，而不是从头开始。&lt;/p&gt;
&lt;p&gt;你可以通过命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstart/&#34;&gt;jx create quickstart&lt;/a&gt; ，从我们预制的快速应用列表中创建一个新的应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create quickstart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，根据列表选择一个。&lt;/p&gt;
&lt;p&gt;如果你清楚列表中你所需要的语言，可以进行如下过滤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create quickstart  -l go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者使用文本过滤器对项目名称做过滤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create quickstart  -f http
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;当你选择快速开始时的细节&#34;&gt;当你选择快速开始时的细节&lt;/h3&gt;
&lt;p&gt;一旦你选择项目并命名后，下面的步骤会自动完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在子目录中创建应用&lt;/li&gt;
&lt;li&gt;把你的代码添加到 git 库中&lt;/li&gt;
&lt;li&gt;在 git 服务上添加远程库，例如： &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;推送代码到远程库&lt;/li&gt;
&lt;li&gt;添加默认文件：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 把你的应用构建为 docker 镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; 实现 CI / CD 流水线&lt;/li&gt;
&lt;li&gt;在 Kubernetes 中通过 helm chart 运行你的应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为你的 Jenkins 在 git 远程库上注册 webhook&lt;/li&gt;
&lt;li&gt;为你的 Jenkins 添加 git 库&lt;/li&gt;
&lt;li&gt;首次触发流水线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快速开始的原理&#34;&gt;快速开始的原理？&lt;/h3&gt;
&lt;p&gt;快速开始的源码托管在 &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34;&gt;the jenkins-quickstarts GitHub organisation&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当你创建完成后，我们根据工程源码的语言，使用 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; 来匹配最合适的构建。&lt;/p&gt;
&lt;p&gt;当你使用 &lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/create-cluster/&#34;&gt;jx create&lt;/a&gt;， &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/&#34;&gt;jx install&lt;/a&gt; 或者 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx init&lt;/a&gt; 时，&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; 会克隆到目录 &lt;code&gt;~/.jx/draft/packs&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;例如：你可以通过下面命令查看支持的所有语言：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -al ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以使用 &lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/using-jx/common-tasks/create-spring/&#34;&gt;jx create spring&lt;/a&gt; 或 &lt;a href=&#34;developing/import/&#34;&gt;jx import&lt;/a&gt; 来快速创建，这时 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;Jenkins X build packs&lt;/a&gt; 会进行下面的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到对应的语言包。当前包括 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34;&gt;list of language packs&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;当文件不存在时，语言包会实现默认的：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 将程序打包为 docker 镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; 使用申明式流水线（pipeline）实现持续构建、持续部署&lt;/li&gt;
&lt;li&gt;Helm Charts 在 Kubernetes 上部署程序，并且实现 &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;预发环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加你自己的快速开始&#34;&gt;添加你自己的快速开始&lt;/h2&gt;
&lt;p&gt;如果你想要提交一个新的快速开始给 Jenkins X，请把你 GitHub中的链接&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20quickstart&amp;amp;body=Please%20add%20this%20github%20quickstart:&#34;&gt;提交问题&lt;/a&gt; 到&lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34;&gt;快速开始组织&lt;/a&gt;，然后它就会出现在菜单 &lt;code&gt;jx create quickstart&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;或者，你是开源项目的一份子，希望管理一套你们项目的快速开始；你可以&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20quickstart&amp;amp;body=Please%20add%20this%20github%20quickstart:&#34;&gt;提交问题&lt;/a&gt;，把你们的GitHub组织详细信息给我们，然后我们会它作为默认的组织添加到命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstart/&#34;&gt;jx create quickstart&lt;/a&gt; 中。如果你把快速开始作为一个单独的 GitHub 组织来维护的话，对于 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_quickstart/&#34;&gt;jx create quickstart&lt;/a&gt; 会更容易些。&lt;/p&gt;
&lt;p&gt;在我们完成这些事情之前，你还是可以在命令 &lt;code&gt;jx create quickstart&lt;/code&gt; 中通过参数 &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--organisations&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create quickstart  -l go --organisations my-github-org
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;my-github-org&lt;/code&gt;中可以找到所有 Jenkins X 需要的快速开始。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 技术性问题</title>
      <link>https://jenkins-x.io/zh/docs/concepts/technology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/technology/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是-helm&#34;&gt;什么是 Helm?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.helm.sh/&#34;&gt;helm&lt;/a&gt; 是 Kubernetes 的开源包管理器。&lt;/p&gt;
&lt;p&gt;它和其他的包管理工具（brew, yum, npm等）类似，有一个或者更多的包仓库可以安装（在 helm 中叫做 &lt;code&gt;charts&lt;/code&gt; 和 kubernetes 的主题保持一致），可以搜索、安装和升级。&lt;/p&gt;
&lt;p&gt;一个 &lt;a href=&#34;https://docs.helm.sh/developing_charts/#charts&#34;&gt;helm chart 基本上是带版本的 kubernetes yaml 压缩包&lt;/a&gt; ，可以轻松地安装在任何 kubnernetes 集群上。&lt;/p&gt;
&lt;p&gt;Helm 通过文件 &lt;code&gt;requirements.yaml&lt;/code&gt; 支持组合（一个 chart 可以包含其他 charts）。&lt;/p&gt;
&lt;h2 id=&#34;什么是-skaffold&#34;&gt;什么是 Skaffold?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34;&gt;skaffold&lt;/a&gt; 是一个开源的工具，用于在 Kubernetes 集群中构建 docker 镜像，并通过 &lt;code&gt;kubectl&lt;/code&gt; 或 &lt;code&gt;helm&lt;/code&gt; 部署、升级。&lt;/p&gt;
&lt;p&gt;在 kubernetes 集群中构建 docker 镜像的挑战有几种方法来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用本地 docker daemon 和 kubernetes 集群的 socket&lt;/li&gt;
&lt;li&gt;使用一个云服务，例如：Google Cloud Builder&lt;/li&gt;
&lt;li&gt;使用无 docker-daemon，例如：&lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34;&gt;kaniko&lt;/a&gt; 不需要访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skaffold 的好处是把你的代码或 CLI 从细节中抽象出来；你可以在文件 &lt;code&gt;skaffold.yaml&lt;/code&gt; 中配置构建 docker 镜像的策略，切换 docker daemon、GCB 或 kaniko等。&lt;/p&gt;
&lt;p&gt;Skaffold 在 &lt;a href=&#34;https://jenkins-x.io/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; 中也很有用，当你改变代码后可以执行快速增量构建。&lt;/p&gt;
&lt;h2 id=&#34;helm-和-skaffold-比较&#34;&gt;Helm 和 Skaffold 比较？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;helm&lt;/code&gt; 允许你安装、升级叫做 charts 的包，使用一个或者多个在一些 docker registry 中的 docker 镜像以及一些 kubernetes YAML 文件来安装、升级 kubernetes 集群中的应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skaffold&lt;/code&gt; 是一个用于执行 docker 构建的工具，也可以通过 &lt;code&gt;kubectl&lt;/code&gt; 或 &lt;code&gt;helm&lt;/code&gt; 重启部署应用——或者在一个 CI/CD 流水线中以及本地开发中使用。&lt;/p&gt;
&lt;p&gt;Jenkins X 使用在它的 CI/CD 流水线中使用 &lt;code&gt;skaffold&lt;/code&gt; 创建 docker 镜像。我们在每次合并到 master 时发布版本化的 docker 镜像和 helm charts。然后，我们通过 &lt;code&gt;helm&lt;/code&gt; 升级环境。&lt;/p&gt;
&lt;h2 id=&#34;什么是-exposecontroller&#34;&gt;什么是 exposecontroller?&lt;/h2&gt;
&lt;p&gt;事实证明，在 Kubernetes 集群中暴露服务比较复杂。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用什么域名？&lt;/li&gt;
&lt;li&gt;你是否应该使用 TLS 和生成的证书，并把它们关联到域名上？&lt;/li&gt;
&lt;li&gt;你是否在使用 OpenShift，如果是的话，可能使用 &lt;code&gt;Route&lt;/code&gt; 会比 &lt;code&gt;Ingress&lt;/code&gt; 更好？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们在 Jenkins X 中通过把微服务代理到一个叫做 &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; 的服务上实现简化，它的职责就是处理上面的事情——把所有带有表明希望暴露到当前集群的 &lt;code&gt;Service&lt;/code&gt; 资源暴露，类似域名的命名空间的暴露规则，是否使用 TLS 以及 &lt;code&gt;Route&lt;/code&gt; 或 &lt;code&gt;Ingress&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;如果你看一下你的环境 git 仓库，可能会注意到两个 &lt;code&gt;exposecontroller&lt;/code&gt; &lt;a href=&#34;https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml&#34;&gt;默认是 charts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认有两个任务用来自动化生成或者清理 &lt;code&gt;Ingress&lt;/code&gt; 资源，以实现暴露标记了你希望从集群外部访问的 &lt;code&gt;Services&lt;/code&gt; 资源。例如：web 应用或者 rest 接口。&lt;/p&gt;
&lt;p&gt;你也可以不使用 exposecontroller —— 只要不在你的服务中使用 exposecontroller 标签即可。你也可以从环境中移除 exposecontroller 任务 —— 这么做的话，我们所有的快速开始（QuickStarts）都无法从集群外部访问！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 构建打包</title>
      <link>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/build-packs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/managing-jx/common-tasks/build-packs/</guid>
      <description>
        
        
        &lt;p&gt;我们使用 &lt;a href=&#34;https://draft.sh/&#34;&gt;draft&lt;/a&gt; 风格为不同的语言_构建打包_ ，我们通过&lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/using-jx/common-tasks/import/&#34;&gt;导入&lt;/a&gt;或者&lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/using-jx/common-tasks/create-spring/&#34;&gt;创建&lt;/a&gt;&lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/first-project/create-quickstart/&#34;&gt;他们&lt;/a&gt;，运行时和构建工具添加必要的配置文件，因此我们可以在 Kubernetes 中构建和部署他们。&lt;/p&gt;
&lt;p&gt;如果由于工程没有被创建或导入而不存在的话，构建包会默认使用下面的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 把代码构建为不可变的 docker 镜像，准备在 Kubernetes 中运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; 为应用使用申明式 Jenkins 流水线定义 CI/CD 步骤&lt;/li&gt;
&lt;li&gt;helm chart 在文件夹 &lt;code&gt;charts&lt;/code&gt; 中生成可以在 Kubernetes 中运行的 Kubernetes 资源&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;charts/preview&lt;/code&gt; 文件夹中的 &lt;em&gt;preview chart&lt;/em&gt; 定义了基于 Pull Request 部署一个&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt;的所有依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的构建包在 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&lt;/a&gt;，每个语言或者构建工具在一个文件夹中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jx&lt;/code&gt; 命令行克隆构建包到你的文件夹 &lt;code&gt;.~/.jx/draft/packs/&lt;/code&gt; ，并在你每次尝试创建或者到一个工程时通过 &lt;code&gt;git pull&lt;/code&gt; 来更新他们。&lt;/p&gt;
&lt;h2 id=&#34;创建新的构建&#34;&gt;创建新的构建&lt;/h2&gt;
&lt;p&gt;我们欢迎&lt;a href=&#34;https://jenkins-x.io/zh/community/&#34;&gt;贡献&lt;/a&gt;，因此，请考虑增加新的构建包和 &lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/&#34;&gt;pod 模板&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里有如何创建一个新的构建包的指导 —— 如果有任何不清楚的请&lt;a href=&#34;https://jenkins-x.io/zh/community/&#34;&gt;加入社区并提问&lt;/a&gt;，我们很乐意帮助！&lt;/p&gt;
&lt;p&gt;最好的开始就是 &lt;em&gt;快速开始&lt;/em&gt; 应用。你可以当作一个测试的样例工程。因此，创建或查找一个合适的例子工程，然后&lt;a href=&#34;https://jenkins-x.io/zh/developing/import&#34;&gt;导入&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后，如果不存在的话，手动添加 &lt;code&gt;Dockerfile&lt;/code&gt; 和 &lt;code&gt;Jenkinsfile&lt;/code&gt; 。你可以从&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34;&gt;当前构建包文件夹&lt;/a&gt;开始 —— 使用相似的语言或框架。&lt;/p&gt;
&lt;p&gt;如果你的构建包使用了 &lt;a href=&#34;https://jenkins-x.io/zh/architecture/pod-templates&#34;&gt;pod 模板&lt;/a&gt; 中不存在的构建工具，你需要&lt;a href=&#34;https://jenkins-x.io/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/#submitting-new-pod-templates&#34;&gt;提交一个新的 pod 模板&lt;/a&gt;，还可能需要一个新的构建容器景象。&lt;/p&gt;
&lt;p&gt;一旦你有了 pod 模板可以使用，例如你的 &lt;code&gt;Jenkinsfile&lt;/code&gt; 中引用到的 &lt;code&gt;jenkins-foo&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// my declarative Jenkinsfile
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipeline &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    agent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      label &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-foo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    environment &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stages &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CI Build and push snapshot&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        steps &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          container&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo deploy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦你的 &lt;code&gt;Jenkinsfile&lt;/code&gt; 可以在你的示例工程为你的语言实现 CI/CD 的话，我们因该把 &lt;code&gt;Dockerfile&lt;/code&gt;, &lt;code&gt;Jenkinsfile&lt;/code&gt; 和 charts 文件夹拷贝到你的派生 &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34;&gt;jenkins-x/draft-packs 仓库&lt;/a&gt; 中。&lt;/p&gt;
&lt;p&gt;你可以通过把他们添加到构建包的本地库 &lt;code&gt; ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs&lt;/code&gt; 中来尝试。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PACK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp Dockerfile Jenkinsfile  ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the charts will be in some folder charts/somefoo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp -r charts/somefoo ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK/charts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你的构建包在 &lt;code&gt;~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/&lt;/code&gt; 文件夹中，就可以通过命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; 来导入工程，使用编程语言来检测并查找最合适的构建包。如果你的构建包自定义检测逻辑的话，请让我们指导，我们可以帮助改进 &lt;a href=&#34;https://jenkins-x.io/commands/jx_import/&#34;&gt;jx import&lt;/a&gt; 使得在你的构建包上做的更好。例如：我们有一些自定义逻辑更好地处理 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/pkg/jx/cmd/import.go#L383-L397&#34;&gt;maven 和 Gradle&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你需要任何帮助 &lt;a href=&#34;https://jenkins-x.io/zh/community/&#34;&gt;请加入社区&lt;/a&gt; 。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 浏览</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/browsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/browsing/</guid>
      <description>
        
        
        &lt;p&gt;如果你之前用过 Kubernetes，你可能使用过 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; 命令查看 Kubernetes 资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jenkins X 的命令行工具，&lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt;，和 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; 看起来相似，并且可以让你看到所有的 Jenkins X 资源。&lt;/p&gt;
&lt;h3 id=&#34;查看-jenkins-控制台&#34;&gt;查看 Jenkins 控制台&lt;/h3&gt;
&lt;p&gt;如果你熟悉 Jenkins 控制台，那么你可以使用 &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx console&lt;/a&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx console
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就会打开一个浏览器。&lt;/p&gt;
&lt;h3 id=&#34;流水线&#34;&gt;流水线&lt;/h3&gt;
&lt;p&gt;要查看当前流水线使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_pipelines/&#34;&gt;jx get pipelines&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get pipelines
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;流水线构建日志&#34;&gt;流水线构建日志&lt;/h3&gt;
&lt;p&gt;通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_build_log/&#34;&gt;jx get build logs&lt;/a&gt; 查看当前流水线构建日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get build logs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你当前看到的是所有能看到的流水线。&lt;/p&gt;
&lt;p&gt;你可以通过下面快速过滤&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get build logs -f myapp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者，你希望指定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get build logs myorg/myapp/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;流水线活动&#34;&gt;流水线活动&lt;/h3&gt;
&lt;p&gt;为了查看当前流水线的活动 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_activities/&#34;&gt;jx get activities&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get activities
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你想要观察你的应用 &lt;code&gt;myapp&lt;/code&gt;，你可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get activities -f myapp -w
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样将会观察流水线的活动，并无论任何重要的改变发生（例如：发版完成，一个 PR 被创建开始&lt;a href=&#34;https://jenkins-x.io/zh/developing/promote&#34;&gt;升级&lt;/a&gt; 等等）都会更新屏幕。&lt;/p&gt;
&lt;h3 id=&#34;应用程序&#34;&gt;应用程序&lt;/h3&gt;
&lt;p&gt;为了查看你的团队所有环境的所有应用的URL和 pod 数量，使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_applications/&#34;&gt;jx get applications&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get applications
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你想要隐藏 URL 或者 pod 数量，你可以使用 &lt;code&gt;u&lt;/code&gt; 或 &lt;code&gt;-p&lt;/code&gt;。例如：为了隐藏 URL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get applications -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者隐藏 pod 数量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get applications -p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你还可以根据环境来过滤应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get applications -e staging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;
&lt;p&gt;为了查看你们团队中的 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt;，使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get environments&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get environments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你还可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_environment/&#34;&gt;jx create environment&lt;/a&gt; 创建一个新的环境&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_edit_environment/&#34;&gt;jx edit environment&lt;/a&gt; 编辑环境&lt;/li&gt;
&lt;li&gt;通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_delete_environment/&#34;&gt;jx delete environment&lt;/a&gt; 删除环境&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 源码</title>
      <link>https://jenkins-x.io/zh/docs/contributing/components/source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/components/source/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 建立在巨人的肩膀上，并且拥有许多不同的源码仓库，从 CLI 工具、Docker 镜像、Helm 图表到&lt;a href=&#34;https://jenkins-x.io/docs/contributing/addons/&#34;&gt;插件应用&lt;/a&gt;来做各种各样的事情。&lt;/p&gt;
&lt;p&gt;这个页面列出了主要的组织和仓库。&lt;/p&gt;
&lt;h2 id=&#34;组织&#34;&gt;组织&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x&#34;&gt;jenkins-x&lt;/a&gt; 源码的主要组织&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-apps&#34;&gt;jenkins-x-apps&lt;/a&gt; 包括 Jenkins X 的标准&lt;a href=&#34;https://jenkins-x.io/docs/contributing/addons/&#34;&gt;插件应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-buildpacks&#34;&gt;jenkins-x-buildpacks&lt;/a&gt; 包括可用的&lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/build-packs/&#34;&gt;构建打包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-charts&#34;&gt;jenkins-x-charts&lt;/a&gt; 我们分发的主要 helm 图表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-images&#34;&gt;jenkins-x-images&lt;/a&gt; 包括一些自定义的 docker 镜像构建&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34;&gt;jenkins-x-quickstarts&lt;/a&gt; 通过&lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;创建快速开始&lt;/a&gt;使用的快速开始项目&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-test-projects&#34;&gt;jenkins-x-test-projects&lt;/a&gt; 我们在测试用例中使用的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;仓库&#34;&gt;仓库&lt;/h2&gt;
&lt;p&gt;在这里我们列出上面组织的一些主要仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jenkins-x/jx&lt;/a&gt; 创建 &lt;code&gt;jx&lt;/code&gt; CLI 和可重用的流水线步骤的主要仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx-docs&#34;&gt;jenkins-x/jx-docs&lt;/a&gt; 基于 Hugo 的文档，用来生成网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34;&gt;jenkins-x/bdd-jx&lt;/a&gt;  我们用来验证平台变更以及用来验证 &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jenkins-x/jx&lt;/a&gt; 上 PR 的 BDD 测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform&#34;&gt;jenkins-x/jenkins-x-platform&lt;/a&gt; Jenkins X 平台主要合成物的 helm 图表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;jenkins-x/jenkins-x-versions&lt;/a&gt; 包括&lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;版本流&lt;/a&gt; - 所有 &lt;em&gt;图表&lt;/em&gt; 和 CLI &lt;em&gt;包&lt;/em&gt; 的稳定版本&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/cloud-environments&#34;&gt;jenkins-x/cloud-environments&lt;/a&gt; 不同 cloud providers 的 helm 配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建-pods-和-镜像&#34;&gt;构建 pods 和 镜像&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders&#34;&gt;jenkins-x/jenkins-x-builders&lt;/a&gt; 生成静态 jenkins 服务的构建 pod 和 docker 镜像&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-image&#34;&gt;jenkins-x/jenkins-x-image&lt;/a&gt; 为我们默认使用的静态 jenkins 服务器生成 docker 镜像&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless&#34;&gt;jenkins-x/jenkins-x-serverless&lt;/a&gt; 当使用 &lt;a href=&#34;https://jenkins-x.io/architecture/prow/&#34;&gt;prow&lt;/a&gt; 时生成 &lt;a href=&#34;https://jenkins-x.io/news/serverless-jenkins/&#34;&gt;serverless jenkins&lt;/a&gt; docker 镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工具&#34;&gt;工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;jenkins-x/exposecontroller&lt;/a&gt; 用来生成或更新 &lt;code&gt;Ingress&lt;/code&gt; 资源（或 OpenShift 中的 &lt;code&gt;Route&lt;/code&gt; ）的 &lt;code&gt;Deployment&lt;/code&gt; 或 &lt;code&gt;Job&lt;/code&gt;。如果你修改了你的 DNS 域或开启了 TLS ，它可以通过 &lt;code&gt;ConfigMap&lt;/code&gt; 注入用来注入外部 URLs 到你的应用中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/updatebot&#34;&gt;jenkins-x/updatebot&lt;/a&gt; 一个我们用来为库、可执行文件、图表和镜像执行持续交付的命令行机器人。例如：当一个新的上游发布完成后，我们在下游依赖的 git 仓库中生成 Pull Requests。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 研发</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/devpods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/devpods/</guid>
      <description>
        
        
        &lt;p&gt;如何使用 Jenkins X 产生持续交付价值。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 组件</title>
      <link>https://jenkins-x.io/zh/docs/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/components/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 安装的包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个团队一个开发环境，也就是 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes 命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;零或多个其它 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;永久环境&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;为每个团队获取各自开箱即用的 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境&lt;/li&gt;
&lt;li&gt;每个团队可以按照需要有很多环境，并依据习惯命名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选的 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，每个环境会关联对应不同的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes 命名空间&lt;/a&gt; ，以确保环境之间干净隔离。&lt;/p&gt;
&lt;p&gt;尽管从技术上讲，两个团队可以共享同样的基础命名空间，比如 &lt;code&gt;Staging&lt;/code&gt;，尽管我们建议分开以保持简单——不然的话，在同一个 git 库中配置相同的命名空间可能会发生冲突；例如：服务资源名称或者 DNS 会冲突。如果你希望两个团队共享基础微服务，使用 &lt;code&gt;服务链接&lt;/code&gt; 在一个命名空间中连接另外一个会比较简单，这样它们可以通过本地 DNS 以本地服务的形式出现。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;p&gt;在开发环境中，我们安装了很多必要的最小核心应用，才能启动基于 Kubernetes 的 CI/CD。&lt;/p&gt;
&lt;p&gt;我们还支持 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#applications&#34;&gt;addons&lt;/a&gt; 扩展核心套件。&lt;/p&gt;
&lt;p&gt;Jenkins X 的配置把这些服务连接起来，就可以直接工作了。这样就神奇地把 Kubernetes 的密码、环境遍历和配置文件全部配置好并可以工作了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;  — 提供 CI 和 CD 自动化。这样对 Jenkins 的解耦变得更加云原生，并利用 Kubernetes 的概念，例如：CRDs（自定义资源定义）、存储和伸缩。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nexus&lt;/strong&gt; — 作为 NodeJS 和 Java 程序的依赖缓存，可以减少构建时间。一个 SpringBoot 应用的初始化构建后，构建时间能从12分钟减少到4分钟。我们还没有实现，但是已经计划很快用 Artifactory 来替换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker registry&lt;/strong&gt;  — 一个集群中的 docker 注册表（registry），用于我们的流水线推送应用的镜像，我们将很快使用原生的云提供商，例如：Google Container Registry, Azure Container Registry 或 Amazon Elastic Container Registry (ECR)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChartMuseum&lt;/strong&gt; — 一个发布 Helm charts 的 registry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monocular&lt;/strong&gt;  — 一个用于发现和运行 Helm charts 的 UI&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;永久环境&#34;&gt;永久环境&lt;/h2&gt;
&lt;p&gt;这些&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt;，像 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;Production&lt;/code&gt; 使用 GitOps 来管理他们，因此，每个都有一个包含配置所有应用和服务以及要部署的位置信息的源码的 git 仓库。&lt;/p&gt;
&lt;p&gt;通常，我们使用 git 仓库中的 Helm charts 来定义哪些 charts 要被安装，它们的版本，环境的具体配置，以及附加资源（例如：Secrets 或 像 Prometheus 可运行的应用等）&lt;/p&gt;
&lt;h2 id=&#34;预览环境&#34;&gt;预览环境&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt; 和&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;永久环境&lt;/a&gt; 类似，都在源码中使用 Helm charts 定义。&lt;/p&gt;
&lt;p&gt;主要的不同之处，是预览环境配置在应用的源码的 &lt;code&gt;./chart/preview&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;而且，它们不是固定的，而是由一个应用的 git 仓库的 Pull Request 创建，而且后面会被删除（手动或者通过垃圾回收自动）。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自定义资源</title>
      <link>https://jenkins-x.io/zh/docs/contributing/components/custom-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/components/custom-resources/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes 提供了一个叫做&lt;a href=&#34;https://kubernetes.io/docs/concepts/api-extension/custom-resources/&#34;&gt;自定义资源&lt;/a&gt;的扩展机制，它允许微服务扩展 Kubernetes 平台来解决更高级的问题。&lt;/p&gt;
&lt;p&gt;因此，在 Jenkins X 中定义了若干个自定义资源来扩展 Kubernetes 支持 CI/CD：&lt;/p&gt;
&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;
&lt;p&gt;Jenkins X 原生地支持&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt;，允许为你们团队定义环境，并通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get environments&lt;/a&gt; 查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get environments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下的命令都使用 Kubernetes 自定义资源&lt;code&gt;环境&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因此，你还可以通过 &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34;&gt;kubectl&lt;/a&gt; 查询环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get environments
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者你想要通过 &lt;code&gt;YAML&lt;/code&gt; 直接编辑它们的话：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl edit env staging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尽管，你使用命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_edit_environment/&#34;&gt;jx edit environment&lt;/a&gt; 会更容易。&lt;/p&gt;
&lt;h3 id=&#34;发版&#34;&gt;发版&lt;/h3&gt;
&lt;p&gt;Jenkins X 流水线生成了一个自定义资源 &lt;code&gt;发版&lt;/code&gt;，我们可以用来跟踪：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本、git 标签、git 地址映射到 Kubernetes/Helm 中的发版&lt;/li&gt;
&lt;li&gt;Jenkins 流水线地址和执行日志用于执行发布&lt;/li&gt;
&lt;li&gt;提交日志、问题和 Pull Requests 是每次发版的一部分，因此我们可以实现&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#feedback&#34;&gt;在 Staging/生产环境中修复的问题反馈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流水线活动&#34;&gt;流水线活动&lt;/h3&gt;
&lt;p&gt;该资源保存了基于 Jenkins 流水线阶段以及 &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#promotion&#34;&gt;升级活动&lt;/a&gt; 的流水线状态&lt;/p&gt;
&lt;p&gt;该资源还会被命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_activities/&#34;&gt;jx get activities&lt;/a&gt; 用到&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 问题</title>
      <link>https://jenkins-x.io/zh/docs/using-jx/common-tasks/issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/using-jx/common-tasks/issues/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 默认使用你的 git 提供商中的问题跟踪系统来创建和浏览问题。&lt;/p&gt;
&lt;p&gt;例如：如果你在 GitHub 项目中的源码中，那么你可以输入 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_issue/&#34;&gt;jx create issue&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create issue -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lets make things more awesome&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个新的问题就会在 GitHub 上被创建。&lt;/p&gt;
&lt;p&gt;你可以在你的项目上通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_issues/&#34;&gt;jx get issues&lt;/a&gt; 列出打开的问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get issues
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用不同的问题跟踪&#34;&gt;使用不同的问题跟踪&lt;/h3&gt;
&lt;p&gt;如果你希望在项目中使用 JIRA，你首先需要添加一个 JIRA 服务。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_tracker_server/&#34;&gt;jx create tracker server&lt;/a&gt; 注册你的 JIRA服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create tracker server jira https://mycompany.atlassian.net/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，你就可以通过 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_tracker/&#34;&gt;jx get tracker&lt;/a&gt; 来查看你的问题追踪了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get tracker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，通过下面添加一个用户和 token：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create tracker token -n jira  myEmailAddress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;配置项目的问题跟踪&#34;&gt;配置项目的问题跟踪&lt;/h3&gt;
&lt;p&gt;在你项目的源码中使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx_edit_config/&#34;&gt;jx edit config&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx edit config -k issues
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你有多个问题跟踪系统，选择一个用于当前项目&lt;/li&gt;
&lt;li&gt;在问题跟踪系统中输入项目名称（例如：大写的 JIRA 项目名称）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你的项目中一个叫做 &lt;code&gt;jenkins-x.xml&lt;/code&gt; 的文件会被修改，这个文件应该被加到你的 git 库中。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 预览</title>
      <link>https://jenkins-x.io/zh/docs/reference/preview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/reference/preview/</guid>
      <description>
        
        
        &lt;p&gt;我们强烈建议使用 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt; ，使得在变更合并到 master 之前尽快地得到反馈。&lt;/p&gt;
&lt;p&gt;通常，预览环境是由 Jenkins X 的流水线中自动创建的。&lt;/p&gt;
&lt;p&gt;然而，你可以使用 &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt; 通过命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_preview/&#34;&gt;jx preview&lt;/a&gt; 手动创建一个&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx preview
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;创建预览环境时都做了什么&#34;&gt;创建预览环境时都做了什么&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个新的 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt; ，例如 &lt;code&gt;预览&lt;/code&gt; 被创建时，一个 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes 命名空间&lt;/a&gt; 会在 &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get environments&lt;/a&gt; 出现， 使用 &lt;a href=&#34;https://jenkins-x.io/zh/developing/kube-context&#34;&gt;jx 环境和 jx 命名空间命令&lt;/a&gt; 你可以看到那个预览环境是活跃的，并可以进入查看。&lt;/li&gt;
&lt;li&gt;Pull Request 会作为预览 Docker 镜像和 chart 构建，并被部署到预览环境中&lt;/li&gt;
&lt;li&gt;添加一条注释到 Pull Request 中，让你们团队知道该预览应用已经准备好可以测试了，并带有打开应用的链接。因此，只要点击一下就可以让你们团队成员体验预览环境！&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://jenkins-x.io/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – 给 Jenkins X 项目做贡献</title>
    <link>https://jenkins-x.io/zh/docs/contributing/</link>
    <description>Recent content in 给 Jenkins X 项目做贡献 on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	  <atom:link href="https://jenkins-x.io/zh/docs/contributing/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Components in Jenkins X</title>
      <link>https://jenkins-x.io/zh/docs/contributing/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/components/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 贡献代码</title>
      <link>https://jenkins-x.io/zh/docs/contributing/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Jenkins X 是由众多&lt;a href=&#34;https://github.com/jenkins-x/jx/graphs/contributors&#34;&gt;开发者&lt;/a&gt;开发的开源项目。还有很多 &lt;a href=&#34;https://github.com/jenkins-x/jx/issues&#34;&gt;open issues&lt;/a&gt;，我们需要你的帮助来使 Jenkins X 变得更棒。即使你不是一个 Go 语言的专家，也可以对项目的开发贡献力量。&lt;/p&gt;
&lt;h2 id=&#34;假设&#34;&gt;假设&lt;/h2&gt;
&lt;p&gt;本篇指导文档将帮助新接触 Jenkins X 的读者逐步熟悉它，因此我们假定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你是刚刚接触 Git 或者开源项目&lt;/li&gt;
&lt;li&gt;你是 Jenkins X 的爱好者并乐于对项目的发展贡献力量&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    如果在阅读此指导文档过程中有任何问题，请向 Jenkins X 社区的&lt;a href=&#34;https://jenkins-x.io/community/&#34;&gt;讨论组&lt;/a&gt;寻求帮助。

&lt;/div&gt;

&lt;h2 id=&#34;安装-go&#34;&gt;安装 Go&lt;/h2&gt;
&lt;p&gt;Go 语言环境的安装仅需要几分钟。并且多种方式可供选择。&lt;/p&gt;
&lt;p&gt;如果在安装过程当中遇到问题，请查阅 &lt;a href=&#34;http://www.golangbootcamp.com/book/get_setup&#34;&gt;Go Bootcamp,which contains setups for every platform&lt;/a&gt; 或者向 Jenkins X &lt;a href=&#34;https://discourse.jenkins-x.io&#34;&gt;论坛&lt;/a&gt;中寻求帮助。&lt;/p&gt;
&lt;h3 id=&#34;从源码安装-go&#34;&gt;从源码安装 Go&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;下载最新版 Go 源码&lt;/a&gt;并通过官方&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;安装文档&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;p&gt;安装完成后，确认是否一切工作正常。打开一个新的终端或者在 Windows 上的命令行并输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在终端的窗口上可以看到类似如下的信息。注意 &lt;code&gt;version&lt;/code&gt; 表示的是在在更新此文档时最新的 Go 的版本信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go version go1.8 darwin/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下一步，确保&lt;a href=&#34;https://golang.org/doc/code.html#Workspaces&#34;&gt;根据安装文档&lt;/a&gt; 设置了 &lt;code&gt;GOPATH&lt;/code&gt; 环境变量。
通过 &lt;code&gt;echo $GOPATH&lt;/code&gt; 输出 &lt;code&gt;GOPATH&lt;/code&gt;。应该是指向了你的合法的 Go 的工作目录的非空字符串，如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;/Users/&amp;lt;yourusername&amp;gt;/Code/go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-homebrew-安装-go&#34;&gt;使用 Homebrew 安装 Go&lt;/h3&gt;
&lt;p&gt;如果你是 MacOS 用户并且安装了 &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;，安装过程将会很简单，在终端中执行以下命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-gvm-安装-go&#34;&gt;通过 GVM 安装 GO&lt;/h3&gt;
&lt;p&gt;更有经验的用户可以使用 &lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;Go Version Manager&lt;/a&gt; (GVM)。GVM 允许你在 &lt;em&gt;同一台机器上&lt;/em&gt; 安装并切换使用多种版本的 Go 语言环境。如果你是初学者，可能不太需要这个功能。然而， GVM 通过几条命令可以很简单的更新到新发布版本的 Go 语言。&lt;/p&gt;
&lt;p&gt;在开发 Jenkins X很长一段时间后，GVM 使用起来将会特别的方便。Jenkins X 之后的版本将会用最新版版的 Go 语言进行编译，因此如果想与社区开发同步的话，将会需要更新 Go 环境。&lt;/p&gt;
&lt;h2 id=&#34;创建一个-github-账号&#34;&gt;创建一个 GitHub 账号&lt;/h2&gt;
&lt;p&gt;如果你想要贡献代码的话，需要创建一个 Github 账号。登录 &lt;a href=&#34;https://github.com/join&#34;&gt;www.github.com/join&lt;/a&gt; 注册个人账号。&lt;/p&gt;
&lt;h2 id=&#34;在你的系统上安装-git&#34;&gt;在你的系统上安装 Git&lt;/h2&gt;
&lt;p&gt;Jenkins X 开发过程当中需要在本机安装 Git 客户端。Git 的使用学习不包含在 Jenkins X 的文档中，如果你不确定从哪里开始的话，我们推荐通过 &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git book&lt;/a&gt; 学习使用 Git 的基本知识。使用的词汇将会通过注解进行解释。&lt;/p&gt;
&lt;p&gt;Git 是一个&lt;a href=&#34;https://en.wikipedia.org/wiki/Version_control&#34;&gt;版本控制系统&lt;/a&gt;，用于跟踪源代码的变化。为了不重复造轮子，Jenkins X 使用了第三方的软件包来扩展功能。&lt;/p&gt;
&lt;p&gt;Go 提供了 &lt;code&gt;get&lt;/code&gt; 的子命令来帮助下载软件包以配置工作环境。这些软件包的源码信息在 Git 中记录。&lt;code&gt;get&lt;/code&gt; 会与承载这些软件包的 Git 服务器端进行交互来下载所有的依赖。&lt;/p&gt;
&lt;p&gt;回到终端中，输入 &lt;code&gt;git version&lt;/code&gt; 并按回车，检验是否安装 Git。如果返回的是一个版本号信息，那么可以跳过下面的配置。否则的话&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;下载&lt;/a&gt;最新版的 Git 并根据&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;安装文档&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;p&gt;最后，再一次输入 &lt;code&gt;git version&lt;/code&gt; 检验 Git 是否已经安装。&lt;/p&gt;
&lt;h3 id=&#34;git-图形化前端&#34;&gt;Git 图形化前端&lt;/h3&gt;
&lt;p&gt;有一些&lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;图形界面客户端&lt;/a&gt;可以帮助操作 Git。并不是所有的客户端在所有的操作系统上都有相应的版本，而且不同的客户端的使用方法也可能不同。因此，在以下的操作中，我们会以使用命令行的方式为基准。&lt;/p&gt;
&lt;h3 id=&#34;在你的系统上安装-hub可选&#34;&gt;在你的系统上安装 Hub（可选）&lt;/h3&gt;
&lt;p&gt;在与 GitHub 协同开发时，Hub 是个很好的工具。请访问 &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub.github.com&lt;/a&gt;，来安装体验这个封装了 Git 的小工具。&lt;/p&gt;
&lt;p&gt;在 Mac 系统上，可以通过 &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; 来安装 &lt;a href=&#34;https://github.com/github/hub&#34;&gt;Hub&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装之后，在 Bash 中创建&lt;a href=&#34;http://tldp.org/LDP/abs/html/aliases.html&#34;&gt;快捷键&lt;/a&gt;，以方便我们在执行 &lt;code&gt;git&lt;/code&gt; 的时候，实际上执行的是 &lt;code&gt;hub&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alias git=&amp;#39;hub&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认安装配置是否正确：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git version 2.6.3
hub version 2.2.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;设置你的工作副本&#34;&gt;设置你的工作副本&lt;/h2&gt;
&lt;p&gt;工作副本是在你的电脑中进行本地设置的。你将会对它进行编辑，编译以及最终推送回到 GitHub。主要的步骤是在远端对源 Git 代码库创建你的分支仓库并之后在本地进行克隆。&lt;/p&gt;
&lt;h3 id=&#34;克隆仓库&#34;&gt;克隆仓库&lt;/h3&gt;
&lt;p&gt;我们假定你已经设置了 &lt;code&gt;GOPATH&lt;/code&gt;（如果不确定的话查阅上面的相应部分）环境变量，现在以可以下载 Jenkins X 的代码库到本地电脑中。这一过程就是被称作“克隆仓库”。GitHub 的&lt;a href=&#34;https://help.github.com/articles/cloning-a-repository/&#34;&gt;帮助文档&lt;/a&gt;对其进行了简短的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you create a repository on GitHub， it exists as a remote repository. You can create a local clone of your repository on your computer and sync between the two locations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们会克隆 Jenkins X 代码库的&lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;主版本&lt;/a&gt;。由于你还没有对代码库的提交代码的权限，这看上去有些违反常理。但是这一步骤在 Go 的工作流当中是必须的一项。你将会在主版本的副本中进行工作，将修改的部分提交到你在 GitHub 上的仓库当中。&lt;/p&gt;
&lt;p&gt;首先，我们克隆主版本库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get -v -u github.com/jenkins-x/jx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jenkins X 使用 &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;Testify&lt;/a&gt; 进行 Go 代码的测试。如果还没有安装的话，使用下面的方式获得 Testify 测试工具：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go get github.com/stretchr/testify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;派生仓库&#34;&gt;派生仓库&lt;/h3&gt;
&lt;p&gt;如果对这个术语感到陌生的话，GitHub 的&lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;帮助文档&lt;/a&gt; 提供了简单的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;手工派生&#34;&gt;手工派生&lt;/h4&gt;
&lt;p&gt;打开 &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;Jenkins X 仓库&lt;/a&gt;，点击右上角的 &amp;ldquo;Fork&amp;rdquo; 按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/forking-a-repository.png&#34; alt=&#34;Fork button&#34;&gt;
现在打开你在 GitHub 中创建出的派生仓库， 拷贝远端连接。你可以在 HTTPS 和 SSH 协议间进行选择。 HTTPS 适用于任何情况。如果你不确定的话， 请&lt;a href=&#34;https://help.github.com/articles/which-remote-url-should-i-use/&#34;&gt;查阅&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/copy-remote-url.png&#34; alt=&#34;Copy remote url&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换到命令窗口中，进入到刚才所克隆的主版本库的工作目录当中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd $GOPATH/src/github.com/jenkins-x/jx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在 Git 需要知道我们刚刚创建出来的分之仓库的地址信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git remote add &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;COPIED REMOTE-URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用-hub-派生&#34;&gt;使用 Hub 派生&lt;/h4&gt;
&lt;p&gt;相类似的，可以使用 Git 的封装工具 Hub 进行操作。Hub 使得创建分之仓库变得容易：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git fork
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一命令会使用你的账号登录到 GitHub 中，并对当前所在的工作目录的主仓库创建派生仓库，在之后会将新创建的连接信息添加到你的工作副本当中。&lt;/p&gt;
&lt;h4 id=&#34;验证&#34;&gt;验证&lt;/h4&gt;
&lt;p&gt;让我们通过列出所有已有的 remote 来检查是否一切就绪：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出应该类似如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;digitalcraftsman    git@github.com:digitalcraftsman/hugo.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
digitalcraftsman    git@github.com:digitalcraftsman/hugo.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
origin  https://github.com/jenkins-x/jx &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
origin  https://github.com/jenkins-x/jx &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jenkins-x-git-贡献流程&#34;&gt;Jenkins X Git 贡献流程&lt;/h2&gt;
&lt;h3 id=&#34;创建新的分支&#34;&gt;创建新的分支&lt;/h3&gt;
&lt;p&gt;永远不要在 &amp;ldquo;master&amp;rdquo; 分支上进行代码的开发。开发团队也不会接受在此之上的 pull request。相反， 应该创建一个有描述信息的分之并在其之上进行开发。&lt;/p&gt;
&lt;p&gt;首先， 你需要获取在主版本上进行的最新的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout master
git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，为你的附加功能创建一个新的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout -b &amp;lt;BRANCH-NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过 &lt;code&gt;git branch&lt;/code&gt; 来检查你当前所在的分支。你可以看到一个包含所有本地分支的列表。在当前所操作的版本之前会有 “*” 标识。&lt;/p&gt;
&lt;h3 id=&#34;贡献文档&#34;&gt;贡献文档&lt;/h3&gt;
&lt;p&gt;也许你想先从 Jenkins X 的文档开始贡献。如果这样的话，你可以省略下面大部分的步骤，仅关注在刚克隆的代码库的 &lt;code&gt;/docs&lt;/code&gt; 目录中的文件即可。 通过执行 &lt;code&gt;cd docs&lt;/code&gt; 进入文档目录中。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;hugo server&lt;/code&gt; 启动 Jenxins X 内置的服务。 通过浏览器访问 &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; 进行浏览。Hugo 会监测所有文件内容的修改，并将其在浏览器中进行显示。&lt;/p&gt;
&lt;p&gt;想了解更多的信息，包括 Jenkins X 文档是如何构建、组织以及由众多像你一样无私的人如何对其进行改进的，请&lt;a href=&#34;docscontrib&#34;&gt;参阅&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;构建-jenkins-x&#34;&gt;构建 Jenkins X&lt;/h3&gt;
&lt;p&gt;在代码库上进行更改的同时，创建相应的二进制文件来进行测试是很好的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go build -o hugo main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;有时对代码的修改可能会带来没有注意到的负面影响。或者是并不像预期的那样工作。大部分的功能都有其相对应的测试用例。这些测试文件都以 &lt;code&gt;_test.go&lt;/code&gt; 结尾。&lt;/p&gt;
&lt;p&gt;请确保 &lt;code&gt;go test ./...&lt;/code&gt; 命令通过没有异常以及 &lt;code&gt;go build&lt;/code&gt; 执行完毕。&lt;/p&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;p&gt;Go 语言的代码格式也许根据人的意识会有所不同，但是不论是由谁编写的代码，Go 本身会确保代码看上去一致。Go 提供了格式化工具，使我们的修改风格统一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go fmt ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果进行了修改，请确保遵循我们的&lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/CONTRIBUTING.MD&#34;&gt;代码贡献指导说明&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add all changed files&lt;/span&gt;
git add --all
git commit --message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR COMMIT MESSAGE&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码的提交记录信息应该描述提交做了那些工作（如，添加功能 XYZ）而不是描述如何完成的。&lt;/p&gt;
&lt;h3 id=&#34;修改提交&#34;&gt;修改提交&lt;/h3&gt;
&lt;p&gt;你也许注意到了一些提交记录信息并不遵守贡献指导说明或者你是在某些文件中忘记了什么。没关系，Git 提供了相应的工具来解决类似这样的问题。下面的两种方法将会覆盖所有的常见问题。&lt;/p&gt;
&lt;p&gt;如果你不确定如何使用这些命令的话也可以保留不行改正，在之后提交 Pull Request 的时候，我们会对提交信息进行修改。&lt;/p&gt;
&lt;h4 id=&#34;修改最后一次提交&#34;&gt;修改最后一次提交&lt;/h4&gt;
&lt;p&gt;让我们以你想要修改最后的一次提交信息为例。执行下面的命令以替换之前的提交信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git commit --amend -m&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新的提交信息&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查历史提交记录，查询修改信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git log
&lt;span style=&#34;color:#75715e&#34;&gt;# 输入 q 退出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在做了最后的修改后，你也许忘记了什么。没有必要创建新的提交。只需要将最新的修改添加到 Git 记录当中并在之后将其合并到之前的修改中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git add --all
git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;修改多次提交&#34;&gt;修改多次提交&lt;/h4&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Be Careful Modifying Multiple Commits&lt;/h4&gt;

    对此章节中介绍的修改，可能会造成不可意料的后果。如果不确定的如何使用的话，跳过下面的部分！

&lt;/div&gt;

&lt;p&gt;这一部分的操作需要更高的技能。Git 允许你对多次提交进行&lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;修改&lt;/a&gt;。换句话说：它允许你对历史的提交进行修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git rebase --interactive @~6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令结尾处的 &lt;code&gt;6&lt;/code&gt; 表示的是想要进行修改的提交的编号。它会打开一个编辑器，其内容是之前6次的历史提交信息列表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smoke test&amp;#34;&lt;/span&gt;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hasPrefix
pick 911c35b Add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How to contribute to Jenkins X&amp;#34;&lt;/span&gt; tutorial
pick 33c8973 Begin workflow
pick 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上面的例子中，我们应该将最后的提交到本文档之间的提交(&lt;code&gt;Add &amp;quot;How to contribute to Jenkins X&amp;quot; tutorial&lt;/code&gt;)历史提交进行合并。你可以“压缩”提交， 如，将两个及以上的提交合并为一个。
在提交信息之前，所有的操作都将会执行。替换 &lt;code&gt;pick&lt;/code&gt; 为想要进行的操作。在这个例子当中我们使用 &lt;code&gt;squash&lt;/code&gt; 或者其省略版 &lt;code&gt;s&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smoke test&amp;#34;&lt;/span&gt;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hasPrefix
pick 911c35b Add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How to contribute to Jenkins X&amp;#34;&lt;/span&gt; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据代码贡献指导文档，在历史提交中的第三个提交忘记了添加前缀 &amp;ldquo;docs:&amp;quot;，因此想要对其进行修改。修改一个提交的操作是 &lt;code&gt;reword&lt;/code&gt; 或者其省略版 &lt;code&gt;r&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;修改后，应该是类似如下的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pick 80d02a1 tpl: Add hasPrefix to the template funcs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smoke test&amp;#34;&lt;/span&gt;
pick aaee038 tpl: Sort the smoke tests
pick f0dbf2c tpl: Add the other test &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hasPrefix
reword 911c35b Add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How to contribute to Jenkins X&amp;#34;&lt;/span&gt; tutorial
squash 33c8973 Begin workflow
squash 3502f2e Refactoring and typo fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时关闭编辑器。它会打开新的窗口，将会有文本指导你对之前的两次提交进行的合并（即，“压缩”）设置新的提交信息。输入 &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt; 保存文件关闭编辑器。&lt;/p&gt;
&lt;p&gt;再一次，将会打开新的窗口。输入新的提交信息并且保存。你的终端将会显示如下类似的状态信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Successfully rebased and updated refs/heads/&amp;lt;BRANCHNAME&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查提交记录以确保修改成功。如果发生了错误的话，可以通过执行 &lt;code&gt;git rebase --abort&lt;/code&gt; 来撤销操作。&lt;/p&gt;
&lt;h3 id=&#34;推送提交&#34;&gt;推送提交&lt;/h3&gt;
&lt;p&gt;我们需要指定目标地址以使得将我们的提交推送回到在Github中的分支版本库。目标地址由 &lt;code&gt;remote&lt;/code&gt; 和 &lt;code&gt;branch&lt;/code&gt;名称所构成。在之前的操作中，&lt;code&gt;remote&lt;/code&gt; 地址与我们的GitHub账号所对应，以我为例是 &lt;code&gt;digitalcraftsman&lt;/code&gt;。分支（branch）应该和我们本地的一样。 这就使得识别相应的分支变得简单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git push --set-upstream &amp;lt;YOUR-GITHUB-USERNAME&amp;gt; &amp;lt;BRANCHNAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在Git知道了目标地址。在此之后，想要进行提交的时候，只需要输入 &lt;code&gt;git push&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你在上一步骤对历史提交记录进行了修改，GitHub 会拒绝你的推送。这是一个保护功能，因为历史提交记录不一致以及新的提交不能像往常一样进行追加。你可以通过 &lt;code&gt;git push --force&lt;/code&gt; 强制的进行提交。&lt;/p&gt;
&lt;h2 id=&#34;打开一个-pull-request&#34;&gt;打开一个 Pull Request&lt;/h2&gt;
&lt;p&gt;做的很好，我们有了很大的进展。在这一步，我们将会提出合并请求来提交我们的附加功能。在浏览器中打开 &lt;a href=&#34;https://github.com/jenkins-x/jx/&#34;&gt;Jenkins X 主代码库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你会发现一个绿色按钮，上面标识 “New pull request”。GitHub 很智能，很有可能像如下图所示的那样，在一个米黄色窗口中建议你开 pull request：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/open-pull-request.png&#34; alt=&#34;Open a pull request&#34;&gt;&lt;/p&gt;
&lt;p&gt;在新的页面当中，将会包含你的 pull request 中的重要信息。滚动鼠标你会发现所有的提交信息。确保所有的一切与构想的一致并点击按钮 “Create pull request”。&lt;/p&gt;
&lt;h3 id=&#34;同意贡献者授权协议&#34;&gt;同意贡献者授权协议&lt;/h3&gt;
&lt;p&gt;最后也同样重要的是，你应该同意贡献者授权协议（CLA）。一个新的评论信息应该会自动的添加到你的 pull request 当中。点击黄色的徽章，同意协议并用你自己的 GitHub 账号进行认证。它仅需要几步点击之后即可完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/accept-cla.png&#34; alt=&#34;Accept the CLA&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动化构建&#34;&gt;自动化构建&lt;/h3&gt;
&lt;p&gt;我们使用 &lt;a href=&#34;https://travis-ci.org/jenkins-x/jx&#34;&gt;Travis CI loop&lt;/a&gt; (Linux 和 OS X) 以及 &lt;a href=&#34;https://ci.appveyor.com/project/jenkins-x/jx/branch/master&#34;&gt;AppVeyor&lt;/a&gt; (Windows) 来对包含有你的提交的 Jenkins X 进行编译。 这可以确保在合并你的 pull request 之前，所有的都与所设想的工作一致。大部分情况下，如果你对 Jenkins X 的代码库进行了修改的话，这将很有意义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/ci-errors.png&#34; alt=&#34;Automic builds and their status&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上图中，你可以看到 Travis 不能够对这个 pull request 进行编译。点击 “Details” 来查看失败的原因。但是这个错误并不一定是由你的提交所导致的。大部分情况下，我们使用 &lt;code&gt;master&lt;/code&gt; 分支来作为基础来验证你的 pull request 是没有问题的。&lt;/p&gt;
&lt;p&gt;如果你遇到问题的话，在 pull request 当中进行评论。我们愿意对你进行帮助。&lt;/p&gt;
&lt;h2 id=&#34;从哪里开始&#34;&gt;从哪里开始？&lt;/h2&gt;
&lt;p&gt;感谢你阅读了本篇贡献指导文档。希望我们可以在 GitHub 中再次看到你。有很多 &lt;a href=&#34;https://github.com/jenkins-x/jx/issues&#34;&gt;open issues&lt;/a&gt; 需要你的帮助。&lt;/p&gt;
&lt;p&gt;如果你认为发现了 bug 或者有新的想法可以改进 Jenkins X，请随时的 &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;open an issue&lt;/a&gt;，我们很乐于听取你的声音。&lt;/p&gt;
&lt;h2 id=&#34;学习-git-和-golang-的参考&#34;&gt;学习 Git 和 Golang 的参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-git&#34;&gt;Codecademy&amp;rsquo;s Free &amp;ldquo;Learn Git&amp;rdquo; Course&lt;/a&gt; (免费)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://try.github.io/levels/1/challenges/1&#34;&gt;Code School and GitHub&amp;rsquo;s &amp;ldquo;Try Git&amp;rdquo; Tutorial&lt;/a&gt; (免费)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;The Git Book&lt;/a&gt; (免费)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golangbootcamp.com/book/get_setup&#34;&gt;Go Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thinkful.com/learn/github-pull-request-tutorial/&#34;&gt;GitHub Pull Request Tutorial, Thinkful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 文档贡献</title>
      <link>https://jenkins-x.io/zh/docs/contributing/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/documentation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;创建派生库&#34;&gt;创建派生库&lt;/h2&gt;
&lt;p&gt;最好在你本地的机器上修改 Jenkins X 文档，检查视觉风格一致。确保你已经在 GitHub 上派生了 &lt;a href=&#34;https://github.com/jenkins-x/jx-docs&#34;&gt;jx-docs&lt;/a&gt;，并在你的机器上克隆了这个库。更多信息，你可以查看 &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;GitHub 的&amp;quot;派生&amp;quot;文档&lt;/a&gt; 或者按照 &lt;a href=&#34;https://jenkins-x.io/community/code/&#34;&gt;Jenkins X 开发贡献指导&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后，你可以创建一个独立的分支。一定要选择符合内容类型的描述性分支名称。下面的一个示例分支的名称，你可以用于添加一个新的网站用于展示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git checkout -b jon-doe-showcase-addition
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加新的内容&#34;&gt;添加新的内容&lt;/h2&gt;
&lt;p&gt;Jenkins X 文档重用 Jenkins X 的[骨架][archetypes]特点。在 Jenkins X 文档中所有内容章节都分配了骨架。&lt;/p&gt;
&lt;p&gt;向 Jenkins X 中添加新的内容遵循下面相似的模式，不用考虑内容章节：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new &amp;lt;DOCS-SECTION&amp;gt;/&amp;lt;new-content-lowercase&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;语法标准&#34;&gt;语法标准&lt;/h3&gt;
&lt;p&gt;Jenkins X 文档中所有的页面，使用典型的三个反引号这样的语法。如果你不想花额外的时间来遵循下面的代码块简码，请使用标准的 GitHub 风格的 markdown。Jenkins X 使用 &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; 的一组语言。&lt;/p&gt;
&lt;p&gt;你可选的语言是 &lt;code&gt;xml&lt;/code&gt;/&lt;code&gt;html&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;/&lt;code&gt;golang&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;/&lt;code&gt;markdown&lt;/code&gt;/&lt;code&gt;mkd&lt;/code&gt;, &lt;code&gt;handlebars&lt;/code&gt;, &lt;code&gt;apache&lt;/code&gt;, &lt;code&gt;toml&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;asciidoc&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt;/&lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;scss&lt;/code&gt;, &lt;code&gt;sh&lt;/code&gt;/&lt;code&gt;zsh&lt;/code&gt;/&lt;code&gt;bash&lt;/code&gt;/&lt;code&gt;git&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;/&lt;code&gt;https&lt;/code&gt;, 和 &lt;code&gt;javascript&lt;/code&gt;/&lt;code&gt;js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Hello world!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;块引用&#34;&gt;块引用&lt;/h2&gt;
&lt;p&gt;块引用可以通过 &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes&#34;&gt;典型的 Markdown 块引用语法&lt;/a&gt; 添加到 Jenkins X 文档中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&amp;gt; Without the threat of punishment, there is no joy in flight.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的块引用会在 Jenkins X 文档中渲染为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without the threat of punishment, there is no joy in flight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，你可以简单快速地添加一个 &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; 元素（通过 JavaScript 在客户端添加），通过在连字符两边添加空格来区分你的块引用和参考。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&amp;gt; Without the threat of punishment, there is no joy in flight. - [Kobo Abe](https://en.wikipedia.org/wiki/Kobo_Abe)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样会在 Jenkins X 文档中渲染为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without the threat of punishment, there is no joy in flight. - &lt;a href=&#34;https://en.wikipedia.org/wiki/Kobo_Abe&#34;&gt;Kobo Abe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – 文档贡献</title>
    <link>https://jenkins-x.io/zh/docs/contributing/documentation/</link>
    <description>Recent content in 文档贡献 on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	  <atom:link href="https://jenkins-x.io/zh/docs/contributing/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 给 API 文档做贡献</title>
      <link>https://jenkins-x.io/zh/docs/contributing/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/contributing/documentation/apidocs/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 有两种类型的 API 文档：&lt;a href=&#34;https://jenkins-x.io/apidocs/&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; 和 &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34;&gt;Godoc&lt;/a&gt;。这两种类型都是由 &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jx&lt;/a&gt; 的代码生成。&lt;/p&gt;
&lt;h2 id=&#34;设置你的开发环境&#34;&gt;设置你的开发环境&lt;/h2&gt;
&lt;p&gt;最好在你的本地电脑上对 Jenkinx X 的代码进行修改。按照 &lt;a href=&#34;https://jenkins-x.io/development&#34;&gt;开发&lt;/a&gt; 指导文档进行配置。&lt;/p&gt;
&lt;h2 id=&#34;编写自定义资源文档&#34;&gt;编写自定义资源文档&lt;/h2&gt;
&lt;p&gt;自定义资源的文档大部分是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;go structs that define the custom
resources&lt;/a&gt; 上的注释以及融合了 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;introductory content&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;structure&lt;/a&gt; 而生成的。&lt;/p&gt;
&lt;h3 id=&#34;工具链&#34;&gt;工具链&lt;/h3&gt;
&lt;p&gt;自定义资源文档是由与 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34;&gt;同样的工具链&lt;/a&gt;而生成的，但是一系列的 &lt;code&gt;jx&lt;/code&gt; 的命令将其包装了起来，因此你不需要下载以及配置这些不同的工具。&lt;/p&gt;
&lt;p&gt;HTML 文档是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34;&gt;OpenAPI 说明&lt;/a&gt; 生成的，依次的由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34;&gt;Go 结构体&lt;/a&gt; 生成，而这些结构体是由代码的注释生成的。想要生成结构体和 OpenAPI 说明执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-openapi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-openapi&lt;/code&gt; 仅仅是对 &lt;code&gt;jx create client openapi&lt;/code&gt; 进行了包装，通过传入参数：从哪个包来生成、生成的目标包的名称和组（&lt;code&gt;jenkins.io&lt;/code&gt;）以及版本(&lt;code&gt;v1&lt;/code&gt;)来生成最终的文件。如果你愿意的话，也可以直接运行这个命令。

&lt;/div&gt;

&lt;p&gt;生成 HTML 运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-docs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-docs&lt;/code&gt; 仅仅是对 &lt;code&gt;jx create client docs&lt;/code&gt; 进行了包装。 Y如果你愿意的话，也可以直接运行这个命令。

&lt;/div&gt;

&lt;p&gt;当你对自定义资源进行了修改的话，应该运行 &lt;code&gt;make generate-openapi&lt;/code&gt;，并确认将所生成的修改添加到版本控制当中。这意味着对于其他人，在任意时刻都会有标记了版本的 OpenAPI 说明可供使用。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    你也可以运行 &lt;code&gt;make generate&lt;/code&gt; 它会进行所有 Jenins X（mocks、client 以及 OpenAPI）所需要的代码生成工作。

&lt;/div&gt;

&lt;p&gt;构建版本时会运行 &lt;code&gt;make generate-docs&lt;/code&gt;，并且对于每一个版本，更新都会自动的上传到 Jenkins X 的网站上。在版本构建结束的几分钟后会生效。&lt;/p&gt;
&lt;h3 id=&#34;对文档进行修改&#34;&gt;对文档进行修改&lt;/h3&gt;
&lt;p&gt;对于每一个你想要生成文档的文件必须要在 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;jenkins.io/v1&lt;/a&gt; 目录中，并且在文件的头部必须有下面的注释：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;想要移除一个类型或者成员的话，添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对类型的注释会被忽略。结构体中的字段的注释会被作为其描述信息。
左侧的菜单栏是由 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;config.yaml&lt;/a&gt; 中的 &lt;code&gt;resource_categories&lt;/code&gt; 而生成。对于每一个种类的介绍文本信息由 &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;html&lt;/a&gt; 编写。&lt;/p&gt;
&lt;p&gt;样式风格也可以 &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34;&gt;定制化&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;
&lt;p&gt;OpenAPI 说明是由代码生成的。其结构由结构体以及字段生成。&lt;code&gt;json&lt;/code&gt; &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;tags&lt;/a&gt; 被用于提供额外的信息包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; 由 &lt;code&gt;key&lt;/code&gt; 生成&lt;/li&gt;
&lt;li&gt;如果没有设置 &lt;code&gt;omitempty&lt;/code&gt; 的话，那么这个属性将是 &lt;code&gt;必需的&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;key&lt;/code&gt; 是 &lt;code&gt;-&lt;/code&gt; 的话，那么将会跳过这个字段&lt;/li&gt;
&lt;li&gt;如果设置了 &lt;code&gt;inline&lt;/code&gt; 的话，这些属性将会嵌入到父对象当中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，注释可以用于阻止某一属性被设置为 &lt;code&gt;必需项&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;metav1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeMeta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;,inline&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	// +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	metav1.ObjectMeta `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,1,opt,name=metadata&amp;#34;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Spec BuildPackSpec `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,2,opt,name=spec&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;openapi-扩展&#34;&gt;OpenAPI 扩展&lt;/h4&gt;
&lt;p&gt;在类型上， OpenAPI 说明也可以有扩展。想要在一个类型或者成员上添加一个或多个扩展的话，在类型/成员的注释行上添加 &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt;。一个类型/成员可以有多个扩展。在注释中的的其它的行会被作为 $VALUE 因此不需要躲避或者字符串加上引号。扩展可以用于向客户端或者文档生成器传入更多的信息。例如，一个类型在文档中可以有友好的名称用于展示或者用于客户端流畅的接口。&lt;/p&gt;
&lt;h4 id=&#34;自定义-openapi-类型定义&#34;&gt;自定义 OpenAPI 类型定义&lt;/h4&gt;
&lt;p&gt;自定义类型不会直接的映射到 OpenAPI 当中，而是会通过实现名为 &amp;ldquo;OpenAPIDefinition&amp;rdquo; 的方法如下面所示，来覆盖他们的 OpenAPI 说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k8s.io/kube-openapi/pkg/common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;:   []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，类型可以通过定义下面的方法来避免引用 &amp;ldquo;openapi&amp;rdquo;。下面的例子会和上面的例子产生相同的 OpenAPI 说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaType&lt;/span&gt;() []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;} }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaFormat&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编写-godoc&#34;&gt;编写 Godoc&lt;/h2&gt;
&lt;p&gt;Jenkins X 使用标准的方法来生成 Godoc，而且会由 &lt;a href=&#34;http://godoc.org&#34;&gt;godoc.org&lt;/a&gt; 自动生成。这一&lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34;&gt;博客&lt;/a&gt; 为编写 Godoc 提供了很好的介绍。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

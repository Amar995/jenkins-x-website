<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – 概念</title>
    <link>https://jenkins-x.io/zh/docs/concepts/</link>
    <description>Recent content in 概念 on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 21 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://jenkins-x.io/zh/docs/concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 特色</title>
      <link>https://jenkins-x.io/zh/docs/concepts/features/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/features/</guid>
      <description>
        
        
        &lt;h2 id=&#34;命令行&#34;&gt;命令行&lt;/h2&gt;
&lt;p&gt;Jenkins X 带来了一个方便使用的命令行工具 &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/install/&#34;&gt;安装 Jenkins X&lt;/a&gt; 到你已经存在的 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/docs/getting-started/setup/create-cluster/&#34;&gt;创建一个新的 kubernetes 集群&lt;/a&gt; 并把 Jenkins X 安装进去&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/developing/import&#34;&gt;导入项目&lt;/a&gt; 到 Jenkins X 中以及他们的持续部署流水线设置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/zh/developing/create-spring&#34;&gt;创建新的 Spring Boot 应用&lt;/a&gt; 并导入 Jenkins X 中，以及他们的持续部署流水线设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流水线&#34;&gt;流水线&lt;/h2&gt;
&lt;p&gt;不必深入了解 Jenkins 流水线的内部，Jenkins X 会默认给你的项目提供一些很好的流水线——基于&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts&#34;&gt;DevOps 最佳实践&lt;/a&gt;实现了所有的持续集成和持续部署&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;环境指的是应用部署的地方。开发人员通常使用缩写来描述环境，例如：“测试中（Testing）、Staging/UAT或者生产（Production）”。&lt;/p&gt;
&lt;p&gt;在 Jenkins X 中每个团队都有一套自己的环境。默认情况下，Jenkins X 会给每个团队创建一个 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境，但你可以通过命令 &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_environment/&#34;&gt;jx create environment&lt;/a&gt;创建一个新的环境。&lt;/p&gt;
&lt;p&gt;我们使用 GitOps 来管理要部署到每个环境中的 Kubernetes 资源的配置和版本。因此，每个环境都有自己的 git 仓库，应用在这个环境中运行需要的 Helm Charts、版本以及配置都在库中。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群中一个环境对应一个命名空间。当 Pull Requests 被合并到环境所在的 git 库后，该环境的流水线就会把 git 库中的 Helm Charts 应用到环境命名空间中。&lt;/p&gt;
&lt;p&gt;这意味着开发和运维都可以在同一个 git 库中，管理应用和资源在某个环境中的所有配置和版本，并且对环境的所有改变都可以在 git 中获取到。因此，这样很容易看到是谁作出的改变，而且，更重要的是当发生问题后很容易回滚改变。&lt;/p&gt;
&lt;h2 id=&#34;部署升级&#34;&gt;部署升级&lt;/h2&gt;
&lt;p&gt;部署升级是通过 GitOps 在环境关联的 git 库上发起一个 Pull Requests 来实现的，这样所有的改变都通过 git 来审查、批准，因此所有的改变的都很容易回滚。&lt;/p&gt;
&lt;p&gt;当环境所关联的 git 库上有新的变化合并到 master 后，环境的流水线就会触发，helm 就会把任何改变应用到资源上。&lt;/p&gt;
&lt;p&gt;Jenkins X 的持续部署流水线把改变了的版本自动做部署升级，这是需要把配置中的”部署升级策略“设置为”自动“。默认情况下，”Staging“环境使用自动部署升级，而”生产“环境使用”手动“部署升级。&lt;/p&gt;
&lt;p&gt;要手动把某个版本的应用部署升级到一个环境中的话，你可以使用&lt;a href=&#34;https://jenkins-x.io/developing/promote/&#34;&gt;jx promote&lt;/a&gt;命令。&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;预发环境&#34;&gt;预发环境&lt;/h2&gt;
&lt;p&gt;Jenkins X 允许你给 Pull Requests 设置一个预发环境，这样就可以在变更后并到 master 之前得到更多的反馈。这使你的变更在被合并以及发布之前更快得到反馈，并允许你避免在你的发版流水线中有人为的批准，加速变更在合并后的部署。&lt;/p&gt;
&lt;p&gt;当预发环境启动并运行后，Jenkins X 将会在你的 Pull Requests 中添加一个带链接的评论，这样你们团队的成员就可以点击来尝试它！&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;反馈&#34;&gt;反馈&lt;/h2&gt;
&lt;p&gt;正如在上面看到的，当你使用预发环境时，Jenkins X 会在你的 Pull Requests 上自动添加评论。&lt;/p&gt;
&lt;p&gt;如果你在提交日志中引用了 issues（例如：通过文本&lt;code&gt;fixes #123&lt;/code&gt;），那么，Jenkins X 流水线将会生成发版记录，例如： &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34;&gt;the jx releases&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同样地，在升级到&lt;code&gt;Staging&lt;/code&gt;或者&lt;code&gt;生产&lt;/code&gt;环境时，这些版本上也会在已修复的问题上自动添加对应环境可用的评论。例如：&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;应用&#34;&gt;应用&lt;/h2&gt;
&lt;p&gt;一些最好的软件工具已经被打包为 helm charts，部分预先集成在了 Jenkins X 中，例如：Nexus、ChartMuseum、Monocular、Prometheus、Grafana等等。&lt;/p&gt;
&lt;h3 id=&#34;插件&#34;&gt;插件&lt;/h3&gt;
&lt;p&gt;部分应用是内置的；例如：Nexus、ChartMuseum、Monocular。其他的则是作为“插件”提供的。&lt;/p&gt;
&lt;p&gt;要安装插件的话，使用命令&lt;a href=&#34;https://jenkins-x.io/commands/jx_create_addon/&#34;&gt;jx create addon&lt;/a&gt;。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create addon grafana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 技术性问题</title>
      <link>https://jenkins-x.io/zh/docs/concepts/technology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/technology/</guid>
      <description>
        
        
        &lt;h2 id=&#34;什么是-helm&#34;&gt;什么是 Helm?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.helm.sh/&#34;&gt;helm&lt;/a&gt; 是 Kubernetes 的开源包管理器。&lt;/p&gt;
&lt;p&gt;它和其他的包管理工具（brew, yum, npm等）类似，有一个或者更多的包仓库可以安装（在 helm 中叫做 &lt;code&gt;charts&lt;/code&gt; 和 kubernetes 的主题保持一致），可以搜索、安装和升级。&lt;/p&gt;
&lt;p&gt;一个 &lt;a href=&#34;https://docs.helm.sh/developing_charts/#charts&#34;&gt;helm chart 基本上是带版本的 kubernetes yaml 压缩包&lt;/a&gt; ，可以轻松地安装在任何 kubnernetes 集群上。&lt;/p&gt;
&lt;p&gt;Helm 通过文件 &lt;code&gt;requirements.yaml&lt;/code&gt; 支持组合（一个 chart 可以包含其他 charts）。&lt;/p&gt;
&lt;h2 id=&#34;什么是-skaffold&#34;&gt;什么是 Skaffold?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34;&gt;skaffold&lt;/a&gt; 是一个开源的工具，用于在 Kubernetes 集群中构建 docker 镜像，并通过 &lt;code&gt;kubectl&lt;/code&gt; 或 &lt;code&gt;helm&lt;/code&gt; 部署、升级。&lt;/p&gt;
&lt;p&gt;在 kubernetes 集群中构建 docker 镜像的挑战有几种方法来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用本地 docker daemon 和 kubernetes 集群的 socket&lt;/li&gt;
&lt;li&gt;使用一个云服务，例如：Google Cloud Builder&lt;/li&gt;
&lt;li&gt;使用无 docker-daemon，例如：&lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34;&gt;kaniko&lt;/a&gt; 不需要访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skaffold 的好处是把你的代码或 CLI 从细节中抽象出来；你可以在文件 &lt;code&gt;skaffold.yaml&lt;/code&gt; 中配置构建 docker 镜像的策略，切换 docker daemon、GCB 或 kaniko等。&lt;/p&gt;
&lt;p&gt;Skaffold 在 &lt;a href=&#34;https://jenkins-x.io/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; 中也很有用，当你改变代码后可以执行快速增量构建。&lt;/p&gt;
&lt;h2 id=&#34;helm-和-skaffold-比较&#34;&gt;Helm 和 Skaffold 比较？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;helm&lt;/code&gt; 允许你安装、升级叫做 charts 的包，使用一个或者多个在一些 docker registry 中的 docker 镜像以及一些 kubernetes YAML 文件来安装、升级 kubernetes 集群中的应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skaffold&lt;/code&gt; 是一个用于执行 docker 构建的工具，也可以通过 &lt;code&gt;kubectl&lt;/code&gt; 或 &lt;code&gt;helm&lt;/code&gt; 重启部署应用——或者在一个 CI/CD 流水线中以及本地开发中使用。&lt;/p&gt;
&lt;p&gt;Jenkins X 使用在它的 CI/CD 流水线中使用 &lt;code&gt;skaffold&lt;/code&gt; 创建 docker 镜像。我们在每次合并到 master 时发布版本化的 docker 镜像和 helm charts。然后，我们通过 &lt;code&gt;helm&lt;/code&gt; 升级环境。&lt;/p&gt;
&lt;h2 id=&#34;什么是-exposecontroller&#34;&gt;什么是 exposecontroller?&lt;/h2&gt;
&lt;p&gt;事实证明，在 Kubernetes 集群中暴露服务比较复杂。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用什么域名？&lt;/li&gt;
&lt;li&gt;你是否应该使用 TLS 和生成的证书，并把它们关联到域名上？&lt;/li&gt;
&lt;li&gt;你是否在使用 OpenShift，如果是的话，可能使用 &lt;code&gt;Route&lt;/code&gt; 会比 &lt;code&gt;Ingress&lt;/code&gt; 更好？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我们在 Jenkins X 中通过把微服务代理到一个叫做 &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; 的服务上实现简化，它的职责就是处理上面的事情——把所有带有表明希望暴露到当前集群的 &lt;code&gt;Service&lt;/code&gt; 资源暴露，类似域名的命名空间的暴露规则，是否使用 TLS 以及 &lt;code&gt;Route&lt;/code&gt; 或 &lt;code&gt;Ingress&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;如果你看一下你的环境 git 仓库，可能会注意到两个 &lt;code&gt;exposecontroller&lt;/code&gt; &lt;a href=&#34;https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml&#34;&gt;默认是 charts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认有两个任务用来自动化生成或者清理 &lt;code&gt;Ingress&lt;/code&gt; 资源，以实现暴露标记了你希望从集群外部访问的 &lt;code&gt;Services&lt;/code&gt; 资源。例如：web 应用或者 rest 接口。&lt;/p&gt;
&lt;p&gt;你也可以不使用 exposecontroller —— 只要不在你的服务中使用 exposecontroller 标签即可。你也可以从环境中移除 exposecontroller 任务 —— 这么做的话，我们所有的快速开始（QuickStarts）都无法从集群外部访问！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 组件</title>
      <link>https://jenkins-x.io/zh/docs/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/docs/concepts/components/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X 安装的包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个团队一个开发环境，也就是 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes 命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;零或多个其它 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;永久环境&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;为每个团队获取各自开箱即用的 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;生产&lt;/code&gt; 环境&lt;/li&gt;
&lt;li&gt;每个团队可以按照需要有很多环境，并依据习惯命名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可选的 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，每个环境会关联对应不同的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes 命名空间&lt;/a&gt; ，以确保环境之间干净隔离。&lt;/p&gt;
&lt;p&gt;尽管从技术上讲，两个团队可以共享同样的基础命名空间，比如 &lt;code&gt;Staging&lt;/code&gt;，尽管我们建议分开以保持简单——不然的话，在同一个 git 库中配置相同的命名空间可能会发生冲突；例如：服务资源名称或者 DNS 会冲突。如果你希望两个团队共享基础微服务，使用 &lt;code&gt;服务链接&lt;/code&gt; 在一个命名空间中连接另外一个会比较简单，这样它们可以通过本地 DNS 以本地服务的形式出现。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;开发环境&lt;/h2&gt;
&lt;p&gt;在开发环境中，我们安装了很多必要的最小核心应用，才能启动基于 Kubernetes 的 CI/CD。&lt;/p&gt;
&lt;p&gt;我们还支持 &lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#applications&#34;&gt;addons&lt;/a&gt; 扩展核心套件。&lt;/p&gt;
&lt;p&gt;Jenkins X 的配置把这些服务连接起来，就可以直接工作了。这样就神奇地把 Kubernetes 的密码、环境遍历和配置文件全部配置好并可以工作了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;  — 提供 CI 和 CD 自动化。这样对 Jenkins 的解耦变得更加云原生，并利用 Kubernetes 的概念，例如：CRDs（自定义资源定义）、存储和伸缩。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nexus&lt;/strong&gt; — 作为 NodeJS 和 Java 程序的依赖缓存，可以减少构建时间。一个 SpringBoot 应用的初始化构建后，构建时间能从12分钟减少到4分钟。我们还没有实现，但是已经计划很快用 Artifactory 来替换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker registry&lt;/strong&gt;  — 一个集群中的 docker 注册表（registry），用于我们的流水线推送应用的镜像，我们将很快使用原生的云提供商，例如：Google Container Registry, Azure Container Registry 或 Amazon Elastic Container Registry (ECR)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChartMuseum&lt;/strong&gt; — 一个发布 Helm charts 的 registry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monocular&lt;/strong&gt;  — 一个用于发现和运行 Helm charts 的 UI&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;永久环境&#34;&gt;永久环境&lt;/h2&gt;
&lt;p&gt;这些&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;环境&lt;/a&gt;，像 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;Production&lt;/code&gt; 使用 GitOps 来管理他们，因此，每个都有一个包含配置所有应用和服务以及要部署的位置信息的源码的 git 仓库。&lt;/p&gt;
&lt;p&gt;通常，我们使用 git 仓库中的 Helm charts 来定义哪些 charts 要被安装，它们的版本，环境的具体配置，以及附加资源（例如：Secrets 或 像 Prometheus 可运行的应用等）&lt;/p&gt;
&lt;h2 id=&#34;预览环境&#34;&gt;预览环境&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#preview-environments&#34;&gt;预览环境&lt;/a&gt; 和&lt;a href=&#34;https://jenkins-x.io/zh/about/concepts/features/#environments&#34;&gt;永久环境&lt;/a&gt; 类似，都在源码中使用 Helm charts 定义。&lt;/p&gt;
&lt;p&gt;主要的不同之处，是预览环境配置在应用的源码的 &lt;code&gt;./chart/preview&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;而且，它们不是固定的，而是由一个应用的 git 仓库的 Pull Request 创建，而且后面会被删除（手动或者通过垃圾回收自动）。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – FAQ</title>
    <link>https://jenkins-x.io/es/docs/using-jx/faq/</link>
    <description>Recent content in FAQ on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    
	  <atom:link href="https://jenkins-x.io/es/docs/using-jx/faq/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Preguntas sobre Pipelines</title>
      <link>https://jenkins-x.io/es/docs/using-jx/faq/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/es/docs/using-jx/faq/pipelines/</guid>
      <description>
        
        
        &lt;p&gt;Para obtener más información, consulte la guía sobre los &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/&#34;&gt;Pipelines Serverless Jenkins X&lt;/a&gt; con &lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt;. También está la referencia de &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/&#34;&gt;sintaxis de Pipelines en Jenkins X&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-agrego-un-paso-personalizado&#34;&gt;¿Cómo agrego un paso personalizado?&lt;/h2&gt;
&lt;p&gt;Para agregar un nuevo paso personalizado a su fichero &lt;code&gt;jenkins-x.yml&lt;/code&gt;, vea &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/#personalizar-el-pipelines&#34;&gt;cómo utilizar jx create step&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-modifico-un-paso&#34;&gt;¿Cómo modifico un paso?&lt;/h2&gt;
&lt;p&gt;Si hay un paso con nombre en el pipeline que desea modificar, puede agregar las líneas YAML a su fichero &lt;code&gt;jenkins-x.yml&lt;/code&gt; de la siguiente manera:&lt;/p&gt;
&lt;p&gt;En este caso, vamos a reemplazar el paso llamado &lt;code&gt;helm-release&lt;/code&gt; en el pipeline &lt;code&gt;release&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pipelineConfig:
  pipelines:
    overrides:
      - pipeline: release
        name: helm-release
        step:
          image: busybox
          sh: echo &amp;quot;this command is replaced&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Puede ver el efecto de este cambio localmente antes de enviarlo a Git mediante el comando &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_syntax_effective/&#34;&gt;jx step syntax effective&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ jx step syntax effective -s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Puede anular etapas enteras o reemplazar un paso específico con un solo paso o una secuencia de pasos. También puede agregar pasos antes/después de otro paso.&lt;/p&gt;
&lt;p&gt;Para obtener más detalles, consulte &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines&#34;&gt;cómo modificar los pasos&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-puedo-modificar-la-imagen-predeterminada-del-contenedor&#34;&gt;¿Cómo puedo modificar la imagen predeterminada del contenedor?&lt;/h2&gt;
&lt;p&gt;Como puede ver arriba, puede modificar cualquier paso en cualquier paquete de compilación; pero también puede modificar la imagen del contenedor utilizada de forma predeterminada en todos los pasos agregando este YAML a su &lt;code&gt;jenkins-x.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pipelineConfig:
  agent:
    label: jenkins-go
    container: somerepo/my-container-image:1.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Puede ver el efecto de este cambio localmente antes de enviarlo a Git mediante el comando &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_syntax_effective/&#34;&gt;jx step syntax effective&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ jx step syntax effective -s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para obtener más detalles, consulte &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines&#34;&gt;cómo modificar los pasos&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-se-comparan-los-pipelines-de-jenkins-x-con-los-pipelines-de-jenkins&#34;&gt;¿Cómo se comparan los pipelines de Jenkins X con los pipelines de Jenkins?&lt;/h2&gt;
&lt;p&gt;Vea las &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/#diferencias-con-los-pipelines-de-jenkins&#34;&gt;diferencias entre los Pipelines de ambos sistemas: Jenkins X y Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-obtengo-el-completamiento-de-ide-editando-jenkins-xyml&#34;&gt;¿Cómo obtengo el completamiento de IDE editando &lt;code&gt;jenkins-x.yml&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;Vea la guía de IDE para &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/#modificaciones-en-idea&#34;&gt;IDEA&lt;/a&gt; y &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/#modificaciones-en-vs-code&#34;&gt;VS Code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;qué-variables-de-entorno-están-disponibles-por-defecto-dentro-de-un-pipeline&#34;&gt;¿Qué variables de entorno están disponibles por defecto dentro de un pipeline?&lt;/h2&gt;
&lt;p&gt;Vea las &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/jenkins-x-pipelines/#variables-de-entorno-predeterminadas&#34;&gt;variables de entorno preestablecidas creadas para los pasos de los pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;hay-alguna-referencia-para-la-sintaxis&#34;&gt;¿Hay alguna referencia para la sintaxis?&lt;/h2&gt;
&lt;p&gt;Vea la &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/&#34;&gt;sintaxis de referencia para los Pipelines de Jenkins x&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-se-monta-un-secret-o-configmap&#34;&gt;¿Cómo se monta un Secret o ConfigMap?&lt;/h2&gt;
&lt;p&gt;Cada paso del pipeline de Jenkins X en el fichero &lt;code&gt;jenkins-x.yml&lt;/code&gt; es básicamente un &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#container-v1-core&#34;&gt;contenedor&lt;/a&gt; de Kubernetes para que pueda especificar la imagen, los límites de recursos, las variables de entorno y montar &lt;code&gt;ConfigMap&lt;/code&gt; o &lt;code&gt;Secret&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Puede ver un ejemplo de &lt;a href=&#34;https://jenkins-x.io/docs/reference/pipeline-syntax-reference/#full-pipeline-definition-in-jenkins-x-yml&#34;&gt;cómo montar un Secret en una variable de entorno aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si está dentro de un script de shell, también puede usar el comando &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx step credential&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;puedo-montar-un-volumen-persistente-en-mi-pipeline&#34;&gt;¿Puedo montar un volumen persistente en mi pipeline?&lt;/h2&gt;
&lt;p&gt;Tekton ya monta un Persistent Volumen separado para cada pod construido en &lt;code&gt;/workspace&lt;/code&gt;, por lo que los resultados de la compilación se mantienen durante un tiempo hasta que se recolecta la basura.&lt;/p&gt;
&lt;p&gt;En la mayoría de los clústeres de Kubernetes, no puede compartir fácilmente un solo volumen persistente en varios pods; Por lo tanto, tener un PV compartido en varias compilaciones generalmente no es fácil ni compatible. Sin embargo, puede agregar un paso para llenar su PV al inicio desde un bucket de la nube y al final de un pipeline copiar datos en un bucket para acelerar el almacenamiento en caché.&lt;/p&gt;
&lt;p&gt;También puede hacer cosas como utilizar Nexus como caché de red para obtener dependencias de Maven (que ocurre OOTB con las compilaciones de Maven en Jenkins X) o agregar el proxy Athens para Go.&lt;/p&gt;
&lt;p&gt;Esperemos que la comunidad de Tekton encuentre algunas soluciones de almacenamiento en caché aún mejores para acelerar las compilaciones.&lt;/p&gt;
&lt;h2 id=&#34;cómo-defino-una-variable-de-entorno-dentro-de-un-paso-para-otros-pasos&#34;&gt;¿Cómo defino una variable de entorno dentro de un paso para otros pasos?&lt;/h2&gt;
&lt;p&gt;Los archivos son el enfoque más fácil ya que el directorio &lt;code&gt;/workspace&lt;/code&gt; se comparte con todos los pasos. Entonces escriba en un paso y use el valor de otros pasos, etc.&lt;/p&gt;
&lt;p&gt;La otra opción es montar un &lt;code&gt;ConfigMap&lt;/code&gt; como variables de entorno en cada paso y modificarlo en un paso; pero los archivos son realmente más fáciles.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Preguntas sobre ChatOps</title>
      <link>https://jenkins-x.io/es/docs/using-jx/faq/chatops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/es/docs/using-jx/faq/chatops/</guid>
      <description>
        
        
        &lt;h2 id=&#34;qué-es-chatops&#34;&gt;¿Qué es ChatOps?&lt;/h2&gt;
&lt;p&gt;Usamos la frase &lt;em&gt;ChatOps&lt;/em&gt; para referirnos a los cambios en el código operativo y la promoción de GitOps a través del chat. Más específicamente, esto generalmente se hace comentando los Pull Requests en el sitio web de su proveedor de Git; aunque en el futuro esto podría ser a través de Slack o consolas web también.&lt;/p&gt;
&lt;h2 id=&#34;cuáles-son-los-beneficios-de-chatops&#34;&gt;¿Cuáles son los beneficios de ChatOps?&lt;/h2&gt;
&lt;p&gt;ChatOps ayuda a los desarrolladores a colaborar en los PR y acelera la mezcla de los PR. Queremos poder mezclar los cambios lo más rápido posible en la rama master para que podamos integrar continuamente el código y minimizar las desventajas de las ramas a largo plazo.&lt;/p&gt;
&lt;p&gt;ChatOps (y &lt;a href=&#34;#qu%C3%A9-hace-hook&#34;&gt;tide en particular&lt;/a&gt;) también ayuda a automatizar y acelerar las tareas, p.ej.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los desarrolladores no tienen que seguir presionando recargar en una página de PR esperando que se pasen todas las pruebas para que puedan hacer clic en &lt;code&gt;Merge&lt;/code&gt;. Simplemente agregue un comentario &lt;code&gt;/lgtm&lt;/code&gt; o apruebe la revisión del código y el PR se fusionará automáticamente una vez que sus pruebas se vuelvan verdes. ¡Esto también evita que los desarrolladores presionen accidentalmente el botón &lt;code&gt;Merge&lt;/code&gt; antes de que pasen todas las pruebas!&lt;/li&gt;
&lt;li&gt;todas los PR se vuelven a clasificar automáticamente y se prueban contra la rama master antes de mezclarsse, lo que garantiza que no rompamos la rama master accidentalmente&lt;/li&gt;
&lt;li&gt;la mezcla por lotes de los PR es compatible para acelerar la mezcla de los PRs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ampliar los detalles vea &lt;a href=&#34;#qu%C3%A9-hace-hook&#34;&gt;qué es lo que tide hace&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;qué-tipos-de-webhook-admiten-chatops&#34;&gt;¿Qué tipos de webhook admiten ChatOps?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; y &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; admiten webhooks y ChatOps, mientras que Jenkins solo admite webhooks.&lt;/p&gt;
&lt;h2 id=&#34;cómo-vuelvo-a-activar-un-pr-de-un-pipeline&#34;&gt;¿Cómo vuelvo a activar un PR de un pipeline?&lt;/h2&gt;
&lt;p&gt;Si un pipeline falla debido a algún error de compilación o falla en la prueba, corrija el código y envíe sus cambios y el pipeline del PR se volverá a ejecutar.&lt;/p&gt;
&lt;p&gt;Si cree que el pipeline falló debido a alguna razón de infraestructura temporal, puede usar ChatOps para reactivar el pipeline comentando el PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/retest&lt;/code&gt; vuelve a ejecutar solamente los pipelines fallidos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/test all&lt;/code&gt; vuelve a a ejecutar todos los pipelines fallidos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/test foo&lt;/code&gt; vuelve a ejecutar todos los pipelines con nombre &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tenga en cuenta que debe estar en el archivo &lt;code&gt;OWNERS&lt;/code&gt; como &lt;a href=&#34;#por-qu%C3%A9-un-pull-request-no-tiene-un-pipeline-activado&#34;&gt;aprobador para que esto funcione&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cómo-agrego-múltiples-pipelines-paralelos-a-un-proyecto&#34;&gt;¿Cómo agrego múltiples pipelines paralelos a un proyecto?&lt;/h2&gt;
&lt;p&gt;Puede ser útil tener varios pipelines para realizar diferentes tipos de pruebas de ejecución prolongada en PR. p.ej. ejecutar el mismo conjunto de pruebas utilizando diferentes bases de datos, configuraciones de microservicios o infraestructura subyacente.&lt;/p&gt;
&lt;p&gt;En Jenkins X puede crear un recurso personalizado &lt;code&gt;Scheduler&lt;/code&gt; en su configuración &lt;a href=&#34;https://jenkins-x.io/es/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt;, en el fichero &lt;code&gt;env/templates/myscheduler.yaml&lt;/code&gt;, que puede agregar múltiples contextos con nombre en la sección &lt;code&gt;presubmits&lt;/code&gt;. Luego, para cada nombre de contexto, asegúrese de tener un fichero llamado &lt;code&gt;jenkins-x-${context}.yml&lt;/code&gt; en su proyecto.&lt;/p&gt;
&lt;p&gt;Entonces Jenkins X invocará cada contexto a pedido a través de &lt;code&gt;/test mycontext&lt;/code&gt; o automáticamente si habilita &lt;code&gt;alwaysRun: true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Puede ver cómo definimos muchos &lt;a href=&#34;https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/f377a72498282de9ee49b807b4d5ba74321a4fab/env/templates/jx-versions-scheduler.yaml#L18&#34;&gt;contextos de prueba paralelas en la secuencia de versiones aquí&lt;/a&gt;, que todos se ejecutan en paralelo e informan su estado en cada PR en la &lt;a href=&#34;https://jenkins-x.io/es/about/concepts/version-stream/&#34;&gt;secuencia de versiones&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Consulte también &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/setup/#how-do-i-map-sourcerepository-to-a-custom-scheduler&#34;&gt;¿Cómo asigno SourceRepository a un Scheduler personalizado?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;qué-hace-hook&#34;&gt;¿Qué hace hook?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hook&lt;/code&gt; es el nombre del microservicio en &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; y el enlace http en &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; que escucha los webhooks provenientes de su proveedor Git que luego se procesa como un comando ChatOps o como un disparador de un pipeline.&lt;/p&gt;
&lt;h2 id=&#34;qué-hace-tide&#34;&gt;¿Qué hace tide?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tide&lt;/code&gt; es un microservicio en &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; que periódicamente consulta los Pull Request abiertos en los repositorios que ha importado a Jenkins X. Luego realiza la siguiente lógica:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si un PR ha pasado todas sus pruebas de revisión + CI (p.ej, ha aplicado las etiquetas &lt;code&gt;approved&lt;/code&gt; y/o &lt;code&gt;lgtm&lt;/code&gt; o ha pasado una revisión del código github) y es verde y se basa en la rama master, se mezcla automáticamente.&lt;/li&gt;
&lt;li&gt;si un PR ha pasado todas sus pruebas de revisión + CI pero no se basa en la rama master, sus pipelines se vuelven a activar en función de la rama master para garantizar que el PR sea válido si se mezclara.&lt;/li&gt;
&lt;li&gt;si el procesamiento por lotes está habilitado y hay varias PRs pendientes que están aprobadas y en verde, se activa un pipeline de lote que mezcla múltiples PRs en un solo cambio: si todas esos pipelines se vuelven verdes, todas las PRs se mezclan a la vez y se cierran . Esto acelera enormemente las mezclas de múltiples PRs (ya que evita volver a activar las pruebas de cada RP después de fusionar cada una).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cómo-puedo-hacer-chatops-ha&#34;&gt;¿Cómo puedo hacer ChatOps HA?&lt;/h2&gt;
&lt;p&gt;Para hacer que ChatOps sea altamente accesible, amplíe los despliegues que escuchan las solicitudes http hasta, por ejemplo, 3 réplicas.&lt;/p&gt;
&lt;p&gt;Cuando se utiliza &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; significa modificar las réplicas para el despliegue de &lt;code&gt;lighthouse&lt;/code&gt;. p.ej. en su repositorio git &lt;a href=&#34;https://jenkins-x.io/es/docs/getting-started/setup/boot/&#34;&gt;boot&lt;/a&gt; intente cambiar el fichero &lt;code&gt;env/lighthouse/values.tmpl.yaml&lt;/code&gt; a:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cuando utilice &lt;a href=&#34;https://jenkins-x.io/es/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt;, debe escalar los servicios &lt;code&gt;hook&lt;/code&gt; y &lt;code&gt;pipelinerunner&lt;/code&gt;. p.ej. en su repositorio Git boot intente cambiar el fichero &lt;code&gt;env/prow/values.tmpl.yaml&lt;/code&gt; a:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;hook&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;pipelinerunner&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;debo-usar-prow-o-lighthouse&#34;&gt;¿Debo usar prow o lighthouse?&lt;/h2&gt;
&lt;p&gt;Si está utilizando un servidor Git que no sea &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt;, le recomendamos &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si está utilizando &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt; recomendamos por ahora &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt;, ya que ha tenido más pruebas que &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aunque &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; es nuestra dirección estratégica. Estamos comenzando a mover gradualmente nuestros repositorios de código abierto a &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;. En algún momento en el futuro, una vez que hayamos estado usando &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; en producción para todos nuestros repositorios de código abierto y comerciales, &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; se convertirá en nuestra solución recomendada para todos los proveedores Git para que podamos tener una base de código única, más simple y más pequeña para mantener.&lt;/p&gt;
&lt;h2 id=&#34;cómo-manejar-un-pipeline-dañado&#34;&gt;¿Cómo manejar un pipeline dañado?&lt;/h2&gt;
&lt;p&gt;Si tiene un PR pendiente que está bloqueado debido a que alguna de las pruebas falla; puede usar ChatOps para anular su estado a través del comando ChatOps: &lt;code&gt;/override nameOfPipeline&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;por-qué-un-pull-request-no-tiene-un-pipeline-activado&#34;&gt;¿Por qué un Pull Request no tiene un pipeline activado?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; y &lt;a href=&#34;https://jenkins-x.io/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; usan un archivo &lt;code&gt;OWNERS&lt;/code&gt; almacenado en cada repositorio Git para definir qué desarrolladores pueden revisar y aprobar cambios. Incluso puede limitar esos roles a diferentes carpetas.&lt;/p&gt;
&lt;p&gt;Si un no revisor envía una PR, no activará los pipelines de CI de forma predeterminada hasta que un revisor agregue un comentario &lt;code&gt;/ok-to-test&lt;/code&gt; en el PR.&lt;/p&gt;
&lt;p&gt;Si tiene repositorios públicos de Git, esto también evita el problema de seguridad de un no aprobador que envía una PR para cambiar el pipeline para enviarles por correo electrónico sus credenciales de seguridad en al pipeline CI ;)&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

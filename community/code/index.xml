<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Contribute code</title>
    <link>https://jenkins-x.io/community/code/</link>
    <description>Recent content in Contribute code on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/community/code/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Community: DNS</title>
      <link>https://jenkins-x.io/community/code/contribute_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/code/contribute_dns/</guid>
      <description>
        
        
        &lt;p&gt;Some features and issues require DNS to be configured. The domain name &lt;code&gt;jenkins-x.rocks&lt;/code&gt; is available for
use. Jenkins X can either manage your DNS for you or you can manage the DNS manually. Read more about how
&lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/dns/&#34;&gt;Jenkins X manages your DNS for you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In both scenarios you can reuse the domain name if you delete the old cluster that was using it and create a new one. If
you run both clusters at the same time you will need a domain name for each.&lt;/p&gt;
&lt;p&gt;We cover both scenarios here as you may be debugging an issue that requires a particular setup - check the issue to find out what the user did! If you are unsure or it doesn&amp;rsquo;t seem relevant to the issue then the External DNS setup is easier to manage and we recommend you follow that.&lt;/p&gt;
&lt;h2 id=&#34;with-external-dns-on-google-cloud-platform&#34;&gt;With External DNS on Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;To add records, visit &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones/jenkins-x-rocks?project=jenkins-x-rocks&amp;amp;organizationId=41792434410&#34;&gt;the Google Cloud DNS dashboard&lt;/a&gt; for the jenkins-x-rocks project.
If you need access please contact one of the project maintainers.&lt;/p&gt;
&lt;p&gt;Once you have access, you can use the &lt;code&gt;Add record set&lt;/code&gt; button to add entries. External DNS will automatically update the
records if you reuse the domain name, so if you delete the old cluster and create a new one there is no need to go through
this process again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose a unique DNS name; you can use nested domains (e.g. &lt;code&gt;demo.example.pmuir.jenkins-x.rocks&lt;/code&gt;). We recommend using
&lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; so you can easily identify domains created by you. Enter this in the
&lt;code&gt;DNS Name&lt;/code&gt; field using the format &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x-rocks.&lt;/code&gt; (note that you can&amp;rsquo;t change the
the &lt;code&gt;jenkins-x.rocks&lt;/code&gt; suffix and it is prefilled for you).&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;jx create domain gke --domain &amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt;. Make a note of the nameservers printed out.&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;Resource Record Type&lt;/code&gt; to &lt;code&gt;NS&lt;/code&gt;) and use the default values for &lt;code&gt;TTL&lt;/code&gt; (&lt;code&gt;5&lt;/code&gt;) and &lt;code&gt;TTL Unit&lt;/code&gt; (&lt;code&gt;minutes&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add the first nameserver to the &lt;code&gt;Name server&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add item&lt;/code&gt; and add the second nameserver. Do the same for rest of the nameservers&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tell Jenkins X about the name.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;jx install --external-dns&lt;/code&gt; then paste &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; into the prompt where you paused earlier&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;jx boot&lt;/code&gt; then edit &lt;code&gt;jx-requirements.yml&lt;/code&gt;, and update the &lt;code&gt;domain&lt;/code&gt; field (in &lt;code&gt;ingress&lt;/code&gt;)
to &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; and run &lt;code&gt;jx boot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;without-external-dns-on-google-cloud-platform&#34;&gt;Without External DNS on Google Cloud Platform&lt;/h2&gt;
&lt;p&gt;To add records, visit &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones/jenkins-x-rocks?project=jenkins-x-rocks&amp;amp;organizationId=41792434410&#34;&gt;the Google Cloud DNS dashboard&lt;/a&gt; for the jenkins-x-rocks project.
If you need access please contact one of the project maintainers.&lt;/p&gt;
&lt;p&gt;Once you have access, you can use the &lt;code&gt;Add record set&lt;/code&gt; button to add entries or the pencil to edit entries.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose a unique DNS name; you can use nested domains (e.g. &lt;code&gt;demo.example.pmuir.jenkins-x.rocks&lt;/code&gt;). We recommend using
&lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; so you can easily identify domains created by you. Enter this in the
&lt;code&gt;DNS Name&lt;/code&gt; field using the format &lt;code&gt;*.&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x-rocks.&lt;/code&gt; (note that you can&amp;rsquo;t change the
the &lt;code&gt;jenkins-x.rocks&lt;/code&gt; suffix and it is prefilled for you).&lt;/li&gt;
&lt;li&gt;Find the cluster IP. The way to do this varies.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If you used &lt;code&gt;jx install&lt;/code&gt; then you &lt;strong&gt;must&lt;/strong&gt; configure this during install. When you are prompted if you want to use
the default &lt;code&gt;.nip.io&lt;/code&gt; domain copy the IP. You &lt;strong&gt;must&lt;/strong&gt; now wait until your domain name is ready.&lt;/li&gt;
&lt;li&gt;If you used jx boot then you can do this at any time. The domain name is present in the domain name and can be found
in &lt;code&gt;jx-requirements.yml&lt;/code&gt;. Copy the IP.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Use the default values for &lt;code&gt;Resource Record Type&lt;/code&gt; (&lt;code&gt;A&lt;/code&gt;), &lt;code&gt;TTL&lt;/code&gt; (&lt;code&gt;5&lt;/code&gt;) and &lt;code&gt;TTL Unit&lt;/code&gt; (&lt;code&gt;minutes&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Paste the IP address you found above into the &lt;code&gt;IPv4 Address&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check if the DNS has propagated to wherever you are running the &lt;code&gt;jx&lt;/code&gt; command. Run
&lt;code&gt;watch dig +short A test-dns.&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt;. Once the output changes to the IP address
you found above the DNS has propagated. If you are using a Mac &lt;code&gt;watch&lt;/code&gt; can be installed using &lt;code&gt;brew install watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tell Jenkins X about the name.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;jx install&lt;/code&gt; then paste &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; into the prompt where you paused earlier&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;jx boot&lt;/code&gt; then edit &lt;code&gt;jx-requirements.yml&lt;/code&gt;, and update the &lt;code&gt;domain&lt;/code&gt; field (in &lt;code&gt;ingress&lt;/code&gt;)
to &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; and run &lt;code&gt;jx boot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you prefer to use the gcloud CLI you can find instructions for usage on the &amp;ldquo;Create record set&amp;rdquo; screen.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Pull Request Reviews</title>
      <link>https://jenkins-x.io/community/code/pullrequestreview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/code/pullrequestreview/</guid>
      <description>
        
        
        &lt;p&gt;The pull request is the main place we gate changes in Jenkins X. It&amp;rsquo;s here we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run the tests (&lt;code&gt;make test-slow-integration&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;execute &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34;&gt;end to end tests&lt;/a&gt; against static jenkins and Tekton&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/linter.sh&#34;&gt;check the change&lt;/a&gt; for linting issues&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/gofmt.sh&#34;&gt;check the code&lt;/a&gt; for formatting issues&lt;/li&gt;
&lt;li&gt;validate that &lt;a href=&#34;https://jenkins-x.io/community/code/#code-generation&#34;&gt;all generated code&lt;/a&gt; (mocks, kubernetes clients, kubernetes openapi structs) are up to date&lt;/li&gt;
&lt;li&gt;validate that we can &lt;a href=&#34;//community/code/#code-generation&#34;&gt;generate the apidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;validate that your &lt;a href=&#34;https://jenkins-x.io/community/code/#the-commit-message&#34;&gt;commits are conventional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our philosophy is to automate the checks as much as possible - there are some that must still be done by a human but we
plan to reduce those as far as possible.&lt;/p&gt;
&lt;p&gt;These review guidelines apply to all github repos in &lt;a href=&#34;https://github.com/jenkins-x,&#34;&gt;https://github.com/jenkins-x,&lt;/a&gt; &lt;a href=&#34;https://github.com/jenkins-x-charts,&#34;&gt;https://github.com/jenkins-x-charts,&lt;/a&gt;
&lt;a href=&#34;https://github.com/jenkins-x-apps,&#34;&gt;https://github.com/jenkins-x-apps,&lt;/a&gt; &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34;&gt;https://github.com/jenkins-x-quickstarts&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x-buildpacks&#34;&gt;https://github.com/jenkins-x-buildpacks&lt;/a&gt;.
A repository with the &lt;code&gt;proof-of-concept&lt;/code&gt; label does not have to follow these guidelines. If we decide that the proof
of concept is going to become the longterm solution the &lt;code&gt;proof-of-concept&lt;/code&gt; label should be removed and the code in the
repository should be reviewed to ensure that these guidelines are met (and any remedial action needed added to the issue
tracker and scheduled).&lt;/p&gt;
&lt;h1 id=&#34;getting-your-pr-merged&#34;&gt;Getting your PR merged&lt;/h1&gt;
&lt;p&gt;In order to get your PR merged you&amp;rsquo;ll need to get a pass on all the automated checks. You&amp;rsquo;ll also need a maintainer to
approve the change using &lt;code&gt;/lgtm&lt;/code&gt;. In order to get an &lt;code&gt;/lgtm&lt;/code&gt; it helps to give a little bit of context to your PR in the
body of the PR - an essay is not necessary (or helpful!).&lt;/p&gt;
&lt;p&gt;We believe that the person who knows the most about the change is the author of the change and that the role of the approver
is to try to spot any functional or non-functional problems that the change might introduce. We&amp;rsquo;ll cover this in more
detail in &amp;ldquo;Approving a PR&amp;rdquo;. If you are uncertain about a part (or all) of the change please do mention this either in
the PR or as an inline comment as this means the approver can focus on the right part.&lt;/p&gt;
&lt;p&gt;All PRs are approved by a maintainer, and for all non-experimental repositories that maintainer must be a different
individual to the author.&lt;/p&gt;
&lt;p&gt;And above all, remember that as a PR author it&amp;rsquo;s your responsibility to get your PR merged!&lt;/p&gt;
&lt;h1 id=&#34;approving-a-pr&#34;&gt;Approving a PR&lt;/h1&gt;
&lt;p&gt;Your five principal tasks as an approver are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;verify that the change is of overall benefit to Jenkins X&lt;/li&gt;
&lt;li&gt;spot potential functional or non-functional problems with a PR&lt;/li&gt;
&lt;li&gt;ensure any non-automated checks pass&lt;/li&gt;
&lt;li&gt;signal when a PR needs security review by applying the &lt;code&gt;needs-security-review&lt;/code&gt; label and wait with the approval
until a security person reviews the changes and removes the label&lt;/li&gt;
&lt;li&gt;identify when a PR requires some documentation by adding the &lt;code&gt;needs-docs&lt;/code&gt; label and also request to author
to create a follow up issue with label &lt;code&gt;area/docs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verifying that the change is of &lt;strong&gt;overall benefit&lt;/strong&gt; is your most important responsibility as a PR approver. By default
we assume that changes are beneficial and that it is the responsibility of the approver to identify if the change would
be detrimental (rather than requiring the author to prove or assert benefit in all cases).&lt;/p&gt;
&lt;p&gt;If, as a PR approver, you feel that a PR is detrimental to Jenkins X you should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place the PR on hold using the &lt;code&gt;/hold&lt;/code&gt; command, with the comment &amp;ldquo;I want to discuss whether this PR is beneficial or
not before approving. I&amp;rsquo;ll start a discussion in the #jenkins-x-dev channel shortly to discuss my concerns.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Once you have started a discussion, add a comment with a PR with a link to the discussion&lt;/li&gt;
&lt;li&gt;Once you have have reached mutual agreement update the PR:
&lt;ul&gt;
&lt;li&gt;Summarize the discussion on the PR&lt;/li&gt;
&lt;li&gt;If you agree that the PR is ok or mostly ok (but need some changes) follow the standard approval process outlined in
this document&lt;/li&gt;
&lt;li&gt;If you agree that the PR is not ok close it with a the comment &amp;ldquo;We&amp;rsquo;ve agreed to not merge this PR&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These sorts of discussions have the potential to become heated. Whilst we advise starting a discussion on slack we would
strongly encourage you to have a quick call with anyone interested if you can&amp;rsquo;t quickly (quickly means a couple of
messages, a minute discussion or a few sentances) reach agreement with the PR author to hash out what to do. You may also
want to consider asking a third developer to act as a facilitator/moderator to help you stay on track with the discussion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This process is intentionally onerous on the approver as we feel change creates opportunity and that there must be a
good reason to prevent change that you can justify and explain. That does not diminish the responsibility on every
approver to ensure that a change is of benefit, and you will have the full support of all members of the project in
challenging the benefit even if some of the members disagree with your challenge!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Functional problems&lt;/strong&gt; are might potentially cause the code to not function as described on one of the PR, an attached issue,
an external document or PR against the docs repo. Examples might include missing prompts or questions, incomplete or
misleading helptext or an API that doesn&amp;rsquo;t make sense.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-functional problems&lt;/strong&gt; are that set of problems that don&amp;rsquo;t affect the functioning of the program but are known to cause
problems. An exhaustive list of non-functional problems the reviewer should check for is maintained here, and this list
must be updated when new non-functional areas for review are identified.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too many files in a package. Go uses a lot of memory at compilation time and large packages can cause compilation to
crash. This is particularly a problem when running a test suite as we like to run tests in parallel for speed. Approvers
should use their discretion but as a rule of thumb any new functionality should go in it&amp;rsquo;s own package and not be
added to an existing package as a number (e.g. &lt;code&gt;kube&lt;/code&gt;, &lt;code&gt;util&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;) are already far too large&lt;/li&gt;
&lt;li&gt;Duplicated functionality. The codebase is large, and has many dependencies. When writing a new feature it&amp;rsquo;s often easy
to miss existing functions or dependency that do what you need, and add a new function or dependency. Approvers should
try to identify a duplicated dependencies or functions and ask for them to be consolidated.&lt;/li&gt;
&lt;li&gt;Excessive custom resource creation. Etcd struggles with too many custom resources being created (e.g. we saw 50k created)
by some errant code in one day recently. Approvers should check that the code won&amp;rsquo;t result in too many custom resources
being created - think about the complexity (is it linear, polynomial, exponential etc.). If a lot of custom resources are
being created, then ensure there is some form of garbage collection.&lt;/li&gt;
&lt;li&gt;Pushing secrets to source control. Validate that the code doesn&amp;rsquo;t risk pushing secrets&lt;/li&gt;
&lt;li&gt;Non-intuitive behavior that doesn&amp;rsquo;t have a comment. We don&amp;rsquo;t require comments for code that is logical and makes sense
but sometimes we have to write code in a certain way to deal with external circumstances. You can easily identify this
kind of code - if your reactions is &amp;ldquo;WTF&amp;rdquo; then it probably needs a comment. On the other hand if your reaction is
&amp;ldquo;I don&amp;rsquo;t understand this&amp;rdquo; then that&amp;rsquo;s not a good indication of non-intuitive code!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security review&lt;/strong&gt; should be requested for any changes in security sensitive areas such as secrets handling with or without
vault, authentication/authorization, cloud service accounts and permissions, commands dealing with credentials, changes to
RBAC rules in various helm charts, changes to TLS configuration and so on.&lt;/p&gt;
&lt;p&gt;Non automated checks currently include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for a PR that includes a new feature, ensure that there is an associated PR for documentation&lt;/li&gt;
&lt;li&gt;That the commit message type (i.e. &lt;code&gt;fix&lt;/code&gt;, &lt;code&gt;chore&lt;/code&gt;, &lt;code&gt;feat&lt;/code&gt; or &lt;code&gt;BREAKING CHANGE&lt;/code&gt;) is correct as this will affect the release number used.&lt;/li&gt;
&lt;li&gt;Changes introduced to debug or test the PR being committed (e.g. changes to the test repo in use)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an approver there are a number of traps it&amp;rsquo;s very easy to fall into when reviewing a pull request. We regard these as
bad behaviors and a PR author or another community member should call out an approver if one of these behaviors is noticed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;requesting stylistic changes - &amp;ldquo;That&amp;rsquo;s not how &lt;strong&gt;I&lt;/strong&gt; would have done it!&amp;rdquo;, &amp;ldquo;Could you rename that variable/func/package
to &lt;code&gt;XXX&lt;/code&gt;&amp;rdquo;. As an approver you normally have the ability to edit the PR directly, you should make any changes like this
yourself.&lt;/li&gt;
&lt;li&gt;requesting trivial changes. As an approver you normally have the ability to edit the PR directly, you should make any
changes like this yourself.&lt;/li&gt;
&lt;li&gt;Requesting clarification of how something works. This is unhelpful as PR discussions are essentially lost when the PR
is merged. If you don&amp;rsquo;t understand how something works, puzzle over it for 5 minutes, clone the branch, run a test and
use your debugger. If you are still struggling then ask the author on slack and explain why you can&amp;rsquo;t understand it. The
author should then update the PR either with some comments or different code. You should also post a short summary back
on to the PR, focusing on the &amp;ldquo;why&amp;rdquo; - in other words why were you confused and why did the change fix it.&lt;/li&gt;
&lt;li&gt;Discussions about a change. If you need to discuss a change, then use #jenkins-x-dev on slack or do a call
(advertising it on slack ideally). Once you&amp;rsquo;ve got a conclusion make a quick note of that on the PR.&lt;/li&gt;
&lt;li&gt;Tangents. There are many problems in the codebase, but don&amp;rsquo;t be tempted to try to solve all of them in a review. Focus
on what problems this PR will cause.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above all, remember that as an approver your role is not to make the code into something that you would have written
but to check it won&amp;rsquo;t cause a problem.&lt;/p&gt;
&lt;h1 id=&#34;future-enhancements-planned&#34;&gt;Future Enhancements Planned&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Switch config on all repos to use &lt;code&gt;lgtm&lt;/code&gt; plugin not &lt;code&gt;approval&lt;/code&gt; plugin, except those with the &lt;code&gt;proof-of-concept&lt;/code&gt; label&lt;/li&gt;
&lt;li&gt;Consider using something like &lt;a href=&#34;https://pullpanda.com/assigner&#34;&gt;https://pullpanda.com/assigner&lt;/a&gt; to allocate reviewers automatically&lt;/li&gt;
&lt;li&gt;Add code coverage tools and implement a ratchet. For example, if the overall coverage is 40% then the coverage of the
change would have to be 50%. We will decide the size of the ratchet as part of this. The goal here is to steadily
improve the coverage&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Continuous Integrating JX itself</title>
      <link>https://jenkins-x.io/community/code/continuous-integrating-jx-itself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/code/continuous-integrating-jx-itself/</guid>
      <description>
        
        
        &lt;p&gt;You may be wondering how Jenkins X introduce changes to Jenkins X. Of course, Jenkins X is built using Jenkins X itself! That means that new changes to the project go through a CI process, and are built and tested using pipelines that run on a Jenkins X Kubernetes cluster.&lt;/p&gt;
&lt;h2 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h2&gt;
&lt;p&gt;A Pull Request in the &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jx repository&lt;/a&gt; will automatically trigger some jobs to do CI. The jobs are triggered &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;by Prow&lt;/a&gt;, and we can &lt;a href=&#34;https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932&#34;&gt;configure which jobs to execute&lt;/a&gt;. The jobs with always_run configured to be true, will be ran when the PR is opened. All jobs (independently of havingÂ always_run set to true or false) can be manually triggered writing a comment in the PR. The comment needed to trigger the job is also in the configuration, in the trigger key. For example, to trigger the end-to-end tests manually, you may write a new comment in the PR containing &amp;ldquo;/test bdd&amp;rdquo;, and the bdd job will be triggered.&lt;/p&gt;
&lt;p&gt;The jobs all have a name and a context &lt;a href=&#34;https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932&#34;&gt;in the configuration&lt;/a&gt;. The name is the name what will show up on GitHub, and the context is the Jenkins X pipeline to execute.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/ci-jobs.png&#34; alt=&#34;Jobs executed during CI&#34;&gt;&lt;/p&gt;
&lt;p&gt;These pipelines are defined in the root of the jx repository. For example, &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml&#34;&gt;here you can see the bdd pipeline&lt;/a&gt;Â that executes the end-to-end (e2e) tests that will get triggered when we tell Prow to execute the bdd job.&lt;/p&gt;
&lt;p&gt;The pipelines that are executed are &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X pipelines&lt;/a&gt;, that underneath use &lt;a href=&#34;https://cloud.google.com/tekton/&#34;&gt;Tekton pipelines&lt;/a&gt;. These pipelines execute tests to make sure everything still works. Typically, they execute unit tests and functional e2e tests.&lt;/p&gt;
&lt;p&gt;Following our bdd pipeline example, here are the steps executed as part of &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml&#34;&gt;the bdd pipeline&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/bdd-pipeline.png&#34; alt=&#34;BDD Pipeline&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;end-to-end-tests&#34;&gt;End to end tests&lt;/h2&gt;
&lt;p&gt;For the e2e tests, the application binary is compiled with the changes on the pull request so that the tests use these changes. Docker images are also published to Google Cloud Registry (GCR) with the changes on the pull request, so testing locally is easier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34;&gt;The e2e tests live on a different repository&lt;/a&gt;, and they are ran using &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jx/scripts/ci.sh&#34;&gt;a bash script&lt;/a&gt;, that will be executed inside a container (like all the other steps in all the other pipelines). The bash script reads some secrets from the Kubernetes cluster where this job is running, and prepares the container where the step is being ran to run the tests configuring the Git client locally, creating a valid kubeconfig file to be able to talk to a Kubernetes cluster, etc.&lt;/p&gt;
&lt;p&gt;One of the most common e2e test is to create a new application, push it to a new GitHub repository, and deploy it using jx. These repositories created for testing are created on &lt;a href=&#34;https://github.beescloud.com/&#34;&gt;a GitHub Enterprise instance called beescloud&lt;/a&gt;. Credentials to do that are read from the Kubernetes cluster, and passed as parameters while invoking the tests.&lt;/p&gt;
&lt;p&gt;The last command on the bash script is actually running the tests using theÂ jx step bdd command, that basically clones &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34;&gt;the tests repository&lt;/a&gt; and runs a &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx/blob/master/Makefile&#34;&gt;Makefile target in that repository&lt;/a&gt;. Some of the logic executed by Jenkins X during the e2e tests is executed using the jx binary that we compiled on the first step of the pipeline. But not all. Other parts of the logic is executed inside the containers used on the steps of the pipeline.&lt;/p&gt;
&lt;p&gt;The containers used as part of the Jenkins X pipelines are called builders. If we want our pull request changes to be used in the builder containers too, we need to tell Jenkins X to use the container images published on a previous step of the pipeline, which contain the pull request changes. Fortunately, &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/config/&#34;&gt;Jenkins X allows you to pass a file that will override the &amp;ldquo;values.yaml&amp;rdquo; file used to install Helm charts as part of the Jenkins X installation&lt;/a&gt;. If you don&amp;rsquo;t use a custom values file, &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml&#34;&gt;this is the default used when installing Jenkins X&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The jx step bdd command allows you to create a new jx cluster to run the e2e tests, or use an existing one. When creating a new cluster, the different components that make up a Jenkins X cluster are installed. By default latest versions for those components would be installed, so two consecutive installations could yield different behaviors because a change on some component between the two. That&amp;rsquo;s not suited for testing, where deterministic scenarios are preferred. That&amp;rsquo;s why the jx step bdd command uses &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;a versions repository&lt;/a&gt; which specifies which version to use for every Jenkins X cluster component. The jx step bdd command may receive a &amp;ldquo;config&amp;rdquo; parameter pointing to &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions/blob/master/jx/bdd/tekton/cluster.yaml&#34;&gt;a configuration file&lt;/a&gt; that specifies how the cluster will be created. If no config parameter is passed, then the Kubernetes cluster referenced in the kubeconfig file that was created before executing the jx step bdd command will be used.&lt;/p&gt;
&lt;h2 id=&#34;release&#34;&gt;Release&lt;/h2&gt;
&lt;p&gt;If all tests pass and the pull request is merged, a new version of jx &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34;&gt;will be released&lt;/a&gt;. Not everyone can approve pull requests, only people whose names appear on &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/OWNERS&#34;&gt;the OWNERS file&lt;/a&gt; can approve them. Remember, every merged pull request generates a new jx version. By default, new versions increment the patch part of the version string. This is done automatically, so when merging a pull request if jx is currently at version 1.3.152, after merging the pull request, the version 1.3.53 will be released. But when breaking changes are merged, the minor or major parts of the version string may be manually increased.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Triaging issues</title>
      <link>https://jenkins-x.io/community/code/triage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/code/triage/</guid>
      <description>
        
        
        &lt;p&gt;The main issue tracker for the Jenkins X project is &lt;a href=&#34;https://github.com/jenkins-x/jx/issues&#34;&gt;https://github.com/jenkins-x/jx/issues&lt;/a&gt;.  This aims to capture issues, ideas and development work.  If in doubt please raise an issue and a Jenkins X team member will look to triage it as soon as possible.&lt;/p&gt;
&lt;p&gt;As Jenkins X is using &lt;a href=&#34;https://www.cloudbees.com/blog/serverless-jenkins-jenkins-x&#34;&gt;prow&lt;/a&gt; from the Kubernetes ecosystem we figured we&amp;rsquo;d take their lead in triaging a large number of issues to aid and encourage contributions.  We are reusing the style of labels including colours in an attempt to create familiarity across open source projects and reduce the barrier to contributing.&lt;/p&gt;
&lt;h1 id=&#34;triaging-issues&#34;&gt;Triaging issues&lt;/h1&gt;
&lt;p&gt;For a full list of available labels please see &lt;a href=&#34;https://github.com/jenkins-x/jx/labels&#34;&gt;https://github.com/jenkins-x/jx/labels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When triaging an issue, someone from the Jenkins X team will assign labels to describe the &lt;strong&gt;area&lt;/strong&gt; and &lt;strong&gt;kind&lt;/strong&gt; of issue.  Where possible they will also add a priority however these are subject to change after further analysis or wider visibility.&lt;/p&gt;
&lt;p&gt;Labels are added via the prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34;&gt;label&lt;/a&gt; plugin using GitHub comments.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;/kind bug
/area prow
/priority important-soon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/triage.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;assigning-issues&#34;&gt;Assigning issues&lt;/h1&gt;
&lt;p&gt;When triaging we will attempt to assign someone to the issue.  This may change depending on the investigation or availability of people.&lt;/p&gt;
&lt;h1 id=&#34;investigating-issues&#34;&gt;Investigating issues&lt;/h1&gt;
&lt;p&gt;When anyone is working on an issue we aim to capture any analysis by adding comments.  This helps people learn tips on how to investigate similar problems, helps people understand the thought process and provides context for any linked fixes via pull requests.&lt;/p&gt;
&lt;h1 id=&#34;new-labels&#34;&gt;New labels&lt;/h1&gt;
&lt;p&gt;If you would like to request a new label be created please raise an issue with as much context as possible.&lt;/p&gt;
&lt;h1 id=&#34;stale-issues&#34;&gt;Stale issues&lt;/h1&gt;
&lt;p&gt;As we encourrage a wide range of issue kinds like general ideas and thoughts the issue tracker can grow quite high.  We are going to be enabling the prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34;&gt;lifecycle&lt;/a&gt; plugin to help manage stale issues.  This is not meant to be intrusive but instead allow us to continually rethink problems and keep momentum across issues.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Builder Images</title>
      <link>https://jenkins-x.io/community/code/builder-images/</link>
      <pubDate>Fri, 06 Sep 2019 20:00:23 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/code/builder-images/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X relies on a set of Docker images to run the actual builds. You can find the list here: &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders&#34;&gt;https://github.com/jenkins-x/jenkins-x-builders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you don&amp;rsquo;t see the image you need, you have two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build your own custom image, host it in a repo somewhere and reference it in your builds&lt;/li&gt;
&lt;li&gt;Construct and contribute a new builder&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This article is only concerned with the second option.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;At a high level, adding a new builder image will look like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the necessary &lt;code&gt;Dockerfile&lt;/code&gt; &amp;amp; a test to validate that it&amp;rsquo;s working as expected&lt;/li&gt;
&lt;li&gt;Ensure the new builder is actually being built&lt;/li&gt;
&lt;li&gt;Update the updatebot to make sure your builder is updated when Jenkins X is&lt;/li&gt;
&lt;li&gt;Wait for things to get merge into master&lt;/li&gt;
&lt;li&gt;Add the new builder to &lt;code&gt;jenkins-x-platform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add yml file for the new builder to &lt;code&gt;jenkins-x-versions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll go over each step in the following.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Before you can get started, you&amp;rsquo;ll need to first fork &amp;amp; clone &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-builders&#34;&gt;https://github.com/jenkins-x/jenkins-x-builders&lt;/a&gt;. See &lt;a href=&#34;https://jenkins-x.io/community/code/&#34;&gt;Development&lt;/a&gt; section for more details on setting up your local environment, link to upstream, and branching out from your master.&lt;/p&gt;
&lt;h2 id=&#34;create-builder&#34;&gt;Create Builder&lt;/h2&gt;
&lt;p&gt;Each builder extends a base image that includes everything needed by Jenkins X, so your builder mainly needs to focus on what&amp;rsquo;s missing. Looking at the existing builders is a good way to get inspiration.&lt;/p&gt;
&lt;p&gt;First off though, create a new folder for your builder following the format of &lt;code&gt;builder-&amp;lt;language&amp;gt;&amp;lt;version&amp;gt;&lt;/code&gt; like &lt;code&gt;builder-nodejs10x&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s only a few things that you&amp;rsquo;ll need to include in your &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;always start with&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: gcr.io/jenkinsxio/builder-base:0.0.56&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;always end the file with&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# jx&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; JX_VERSION 2.0.693&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; curl -f -L https://github.com/jenkins-x/jx/releases/download/v&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JX_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/jx-linux-amd64.tar.gz | tar xzv &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;mv jx /usr/bin/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In between these two things is where you&amp;rsquo;ll add what your builder needs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To get the correct version of the &lt;code&gt;builder-base&lt;/code&gt; image, look at &lt;code&gt;Dockerfile.gobase&lt;/code&gt; in the root of the repo and use the base image version from that.&lt;/p&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;p&gt;To make sure that the image is built correctly, a test is run which usually just checks that the image can output something expected.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a test that check that the included CLI outputs the correct version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;schemaVersion&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.0.0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Make sure to test the latest schema version&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;commandTests&lt;/span&gt;:
- &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;]
  &lt;span style=&#34;color:#f92672&#34;&gt;excludedError&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.*FAIL.*&amp;#39;&lt;/span&gt;]
  &lt;span style=&#34;color:#f92672&#34;&gt;expectedOutput&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.*v10.*&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;file-structure&#34;&gt;File structure&lt;/h3&gt;
&lt;p&gt;The two files are placed in the following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dir&#34; data-lang=&#34;dir&#34;&gt;builder-&amp;lt;your builder name&amp;gt;
  |- Dockerfile
  |- test
  |  |- container-test.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once your files are in place, and you have verified locally that your image builds, you can commit, push, and raise a pull request as described in &lt;a href=&#34;https://jenkins-x.io/community/code/&#34;&gt;Development&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;inform-the-update-bot&#34;&gt;Inform the update bot&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;update-bot.sh&lt;/code&gt; script is used to create a PR that includes all the updated builder images. Edit the file (it&amp;rsquo;s in the root of the &lt;code&gt;jenkins-x-builders&lt;/code&gt; repo) and add the appropriate argument to this existing command
:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx step create pr chart --name gcr.io/jenkinsxio/builder-ruby --name gcr.io/jenkinsxio/builder-swift &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-dlang --name gcr.io/jenkinsxio/builder-go --name gcr.io/jenkinsxio/builder-go-maven &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-gradle --name gcr.io/jenkinsxio/builder-gradle4 --name gcr.io/jenkinsxio/builder-gradle5 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-jx --name gcr.io/jenkinsxio/builder-maven --name gcr.io/jenkinsxio/builder-maven-32 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-maven-java11 --name gcr.io/jenkinsxio/builder-maven-nodejs --name gcr.io/jenkinsxio/builder-newman &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-nodejs --name gcr.io/jenkinsxio/builder-nodejs8x --name gcr.io/jenkinsxio/builder-nodejs10x &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-nodejs12x --name gcr.io/jenkinsxio/builder-php5x --name gcr.io/jenkinsxio/builder-php7x &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-python --name gcr.io/jenkinsxio/builder-python2 --name gcr.io/jenkinsxio/builder-python37 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name gcr.io/jenkinsxio/builder-rust --name gcr.io/jenkinsxio/builder-scala --name gcr.io/jenkinsxio/builder-terraform &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --version &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --repo https://github.com/jenkins-x/jenkins-x-platform.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basically you&amp;rsquo;d want to add &lt;code&gt;--name gcr.io/jenkinsxio/builder-&amp;lt;your builder name&amp;gt;&lt;/code&gt; somewhere in there.&lt;/p&gt;
&lt;h2 id=&#34;now-we-wait&#34;&gt;Now we wait&amp;hellip;&lt;/h2&gt;
&lt;p&gt;At this point you&amp;rsquo;ll have to wait until your new builder has been approves, merged, built, etc.&lt;/p&gt;
&lt;p&gt;Once everything is merged you can continue to the next step.&lt;/p&gt;
&lt;h2 id=&#34;update-jenkins-x-platform&#34;&gt;Update Jenkins X Platform&lt;/h2&gt;
&lt;p&gt;Once everything is merged into &lt;code&gt;jenkins-x-builders&lt;/code&gt; and the merge has finished. We need to update the helm charts used by Jenkins X, to make it aware of the new builder.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork/setup/checkout &lt;code&gt;jenkins-x-platform&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;update the file &lt;code&gt;/jenkins-x-platform/values.yaml&lt;/code&gt; (see details below)&lt;/li&gt;
&lt;li&gt;commit/push/raise a PR&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;adding-values-for-new-builder&#34;&gt;Adding values for new builder&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;values.yaml&lt;/code&gt; file mentioned above, add the following section for each new builder you&amp;rsquo;re adding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;Nodejs10x&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;Name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nodejs10x&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;Label&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-nodejs10x&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;DevPodPorts&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9229&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;secretName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-docker-cfg&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins/.docker&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;EnvVars&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;JENKINS_URL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://jenkins:8080&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_COMMITTER_EMAIL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x@googlegroups.com&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_AUTHOR_EMAIL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x@googlegroups.com&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_AUTHOR_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x-bot&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;GIT_COMMITTER_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins-x-bot&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;XDG_CONFIG_HOME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;DOCKER_CONFIG&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/home/jenkins/.docker/&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ServiceAccount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkins&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;Containers&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;Jnlp&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jenkinsci/jnlp-slave:3.26-1-alpine&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;RequestCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100m&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;RequestMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;128Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;Args&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;${computer.jnlpmac} ${computer.name}&amp;#39;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;Nodejs&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gcr.io/jenkinsxio/builder-nodejs10x:0.1.755&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;Privileged&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;RequestCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;400m&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;RequestMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;512Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;LimitCpu&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;LimitMemory&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2048Mi&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# You may want to change this to true while testing a new image&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# AlwaysPullImage: true&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;Command&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh -c&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;Args&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;Tty&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can copy-paste from the above and just update the places where it mentions &lt;code&gt;nodejs10x&lt;/code&gt; to your builder name (assuming your builder doesn&amp;rsquo;t need more resources etc. than the example above)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: If you don&amp;rsquo;t know the exact image version, find your image on &lt;a href=&#34;https://gcr.io/jenkinsxio/&#34;&gt;gcr.io/jenkinsxio/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;update-jenkins-x-versions&#34;&gt;Update Jenkins X Versions&lt;/h2&gt;
&lt;p&gt;Finally, we need to tell Jenkins X which version of the new builder to use. This will make Jenkins X use the helm chart we defined above, which in tern pulls down the image we built in the first set of steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork/setup/checkout &lt;code&gt;jenkins-x-versions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add yaml file for each buidler (see below) to &lt;code&gt;/docker/gcr.io/jenkinsxio/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit/push/raise a PR&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;adding-builder-version-yml-file&#34;&gt;Adding builder version yml file&lt;/h3&gt;
&lt;p&gt;Each file should be named like the builder, e.g. &lt;code&gt;builder-nodejs12x.yml&lt;/code&gt; and should just contain one line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1.755&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; make sure to use the image version you specified in the previous step&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

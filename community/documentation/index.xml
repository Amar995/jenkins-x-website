<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – </title>
    <link>https://jenkins-x.io/community/documentation/</link>
    <description>Recent content on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/community/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Community: Suggest changes to documentation</title>
      <link>https://jenkins-x.io/community/documentation/changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/changes/</guid>
      <description>
        
        
        &lt;p&gt;Did you spot a typo or feel something&amp;rsquo;s missing from a certain page?
You can still contribute your suggestions without having to go through setting everything up locally as explained on &lt;a href=&#34;https://jenkins-x.io/community/documentation/&#34;&gt;Contribute to Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The process requires only three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the &amp;ldquo;Edit this page&amp;rdquo; link on the right&lt;/li&gt;
&lt;li&gt;Make your suggested changes&lt;/li&gt;
&lt;li&gt;Create a Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll go through each step here. Keep in mind though, that if you&amp;rsquo;re looking to contribute larger amounts of changes, pages, or sections, it&amp;rsquo;s best to test things out locally first (using the process described on &lt;a href=&#34;https://jenkins-x.io/community/documentation/&#34;&gt;Contribute to Documentation&lt;/a&gt;) instead of using this method.&lt;/p&gt;
&lt;h2 id=&#34;click-the-edit-this-page-link&#34;&gt;Click the &amp;ldquo;Edit this page&amp;rdquo; link&lt;/h2&gt;
&lt;p&gt;First off, make sure you&amp;rsquo;re viewing the page you want to make changes to.
The link you need to click is specific for the page, to make it easier to start making changes.&lt;/p&gt;
&lt;p&gt;On the right hand side of the page, you&amp;rsquo;ll find a column that will always have the following three links:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/page_links.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top one (&lt;code&gt;Edit this page&lt;/code&gt;) is the one we need here, as it will allow you to suggest changes to the page you&amp;rsquo;re currently on.
The second one (&lt;code&gt;Create documentation issue&lt;/code&gt;) is a link to create a documentation related issue, for others to look at and hopefully fix. This could be for missing sections, or maybe larger changes you&amp;rsquo;re not comfortable suggesting yourself.
The last one (&lt;code&gt;Create project issue&lt;/code&gt;) is a link to create an issue for the main Jenkins X project. This is for problems related to the code and to how Jenkins X works.&lt;/p&gt;
&lt;h2 id=&#34;make-suggested-changes&#34;&gt;Make suggested changes&lt;/h2&gt;
&lt;p&gt;Clicking the &amp;ldquo;Edit this page&amp;rdquo; link takes you to a page on GitHub that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/edit_page.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main part of this page is the text field which includes the text for page you came from. It is using &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub markdown&lt;/a&gt; to indicate when this should be bold, italic, etc., so if you haven&amp;rsquo;t come across markdown before it might be a good idea to have a look at that if you plan on making changes to/using text formatting.
There&amp;rsquo;s also a &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheat-sheet here&lt;/a&gt; with just the formatting.&lt;/p&gt;
&lt;p&gt;You can make any changes you see fit (it&amp;rsquo;s treated as a suggestion that will be reviewed by others before being applied to the live website).&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re finished:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Supply a summary of your changes (e.g. &amp;ldquo;fixed typos in documentation contribution page&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Select the option &amp;ldquo;Create a new branch&amp;hellip;&amp;rdquo; and give it a meaningful name&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Propose file change&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The page should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/commit_changes.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-pull-request&#34;&gt;Create a Pull Request&lt;/h2&gt;
&lt;p&gt;The next screen after you clicked &amp;ldquo;Propose file changes&amp;rdquo; should be &amp;ldquo;Open Pull Request&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;You can add more description if you wish, but at this point its fine to just click &amp;ldquo;Create pull request&amp;rdquo;.
If there are any questions about your changes, or suggestions for improvements, they will be added to the pull request, so in case you have opted out of notifications from GitHub it would be good to check back now and then until the change is applied.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Community: API Documentation</title>
      <link>https://jenkins-x.io/community/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/apidocs/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X has two types of API documentation: &lt;a href=&#34;https://jenkins-x.io/apidocs/&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34;&gt;Godoc&lt;/a&gt;.
Both types are generated from the &lt;code&gt;codegen&lt;/code&gt; binary which is part of the jx &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup-your-development-environment&#34;&gt;Setup your development environment&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s best to make changes to the Jenkins X code on your local machine. Follow the &lt;a href=&#34;https://jenkins-x.io/community/code/&#34;&gt;development&lt;/a&gt; guide
to get set up.&lt;/p&gt;
&lt;h2 id=&#34;writing-custom-resource-documentation&#34;&gt;Writing custom resource documentation&lt;/h2&gt;
&lt;p&gt;The custom resource documentation is mostly generated from the comments on the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;go structs&lt;/a&gt; that define the custom resources, with the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;introductory content&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;structure&lt;/a&gt; injected.&lt;/p&gt;
&lt;h3 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h3&gt;
&lt;p&gt;The custom resource documentation is generated using the &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34;&gt;same toolchain&lt;/a&gt; as Kubernetes, but wrapped up in a series of &lt;code&gt;codegen&lt;/code&gt; commands so that you don&amp;rsquo;t have to download and setup the different tools yourself.&lt;/p&gt;
&lt;p&gt;The HTML docs are generated via an &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34;&gt;OpenAPI specification&lt;/a&gt; which in turn is generated from &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34;&gt;Go Structs&lt;/a&gt; which are generated from the code comments.
To generate the structs and the OpenAPI specification run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-openapi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-openapi&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen openapi&lt;/code&gt;, passing in package to generate from, generate to, and the group (&lt;code&gt;jenkins.io&lt;/code&gt;) and version (&lt;code&gt;v1&lt;/code&gt;) to generate for.
You can run this command directly if you prefer.

&lt;/div&gt;

&lt;p&gt;and to generate the HTML run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make generate-docs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;code&gt;make generate-docs&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen docs&lt;/code&gt;. You can run this command directly if you prefer.

&lt;/div&gt;

&lt;p&gt;You should run &lt;code&gt;make generate-openapi&lt;/code&gt; whenever you change the custom resources, and check the generated changes into
source control. This means that there is always a tagged version of the OpenAPI spec available for others to use.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    You can also run &lt;code&gt;make generate&lt;/code&gt; which will do all the code generation needed by Jenkins X (mocks and client as well
as openapi)

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make generate-docs&lt;/code&gt; is run by the release build, and the changes are automatically uploaded to the Jenkins X
website on every release. They&amp;rsquo;ll be available a few minutes after the release build completes.&lt;/p&gt;
&lt;h3 id=&#34;making-changes-to-the-documentation&#34;&gt;Making changes to the documentation&lt;/h3&gt;
&lt;p&gt;Each file for which you want to generate docs must be located in the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;jenkins.io/v1&lt;/a&gt; directory, and must have a the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;comment at the top of the file.&lt;/p&gt;
&lt;p&gt;To exclude a type or member, add&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to it.&lt;/p&gt;
&lt;p&gt;Comments on types are ignored. Comments on struct fields are used as the description for each field.&lt;/p&gt;
&lt;p&gt;The left hand menu is generated from the &lt;code&gt;resource_categories&lt;/code&gt; in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;config.yaml&lt;/a&gt;. The introductory text for each category is authored as
&lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The styles can &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34;&gt;also be customized&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;
&lt;p&gt;The OpenAPI spec is generated from the code. The structure is generated from the structs and fields. The &lt;code&gt;json&lt;/code&gt;
&lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;tags&lt;/a&gt; are used to provide additional information including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is generated from the &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;omitempty&lt;/code&gt; is not set, the property will be &lt;code&gt;required&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt; the field will be skipped&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;inline&lt;/code&gt; is set, the properties will be inlined into the parent object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;comment can be used to prevent a property being &lt;code&gt;required&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;metav1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeMeta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;,inline&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    // +optional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metav1.ObjectMeta `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,1,opt,name=metadata&amp;#34;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Spec BuildPackSpec `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,2,opt,name=spec&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;openapi-extensions&#34;&gt;OpenAPI Extensions&lt;/h4&gt;
&lt;p&gt;OpenAPI spec can have extensions on types. To define one or more extensions on a type or its member
add &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt; to the comment lines before type/member. A type/member can
have multiple extensions. The rest of the line in the comment will be used as $VALUE so there is no need to
escape or quote the value string. Extensions can be used to pass more information to client generators or
documentation generators. For example a type might have a friendly name to be displayed in documentation or
being used in a client&amp;rsquo;s fluent interface.&lt;/p&gt;
&lt;h4 id=&#34;custom-openapi-type-definitions&#34;&gt;Custom OpenAPI type definitions&lt;/h4&gt;
&lt;p&gt;Custom types which otherwise don&amp;rsquo;t map directly to OpenAPI can override their
OpenAPI definition by implementing a function named &amp;ldquo;OpenAPIDefinition&amp;rdquo; with
the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k8s.io/kube-openapi/pkg/common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;:   []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, the type can avoid the &amp;ldquo;openapi&amp;rdquo; import by defining the following
methods. The following example produces the same OpenAPI definition as the
example above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaType&lt;/span&gt;() []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;} }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaFormat&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-godoc&#34;&gt;Write Godoc&lt;/h2&gt;
&lt;p&gt;Jenkins X uses the standard approach to Godoc, and it is automatically generated by &lt;a href=&#34;http://godoc.org&#34;&gt;godoc.org&lt;/a&gt;.
This &lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34;&gt;blog&lt;/a&gt; provides a good introduction to writing Godoc.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Step by Step setup</title>
      <link>https://jenkins-x.io/community/documentation/step-by-step/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/step-by-step/</guid>
      <description>
        
        
        &lt;p&gt;We&amp;rsquo;ll go through each step below, but here&amp;rsquo;s what you need to get started with Git:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://git-scm.com&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; command line interface installed locally&lt;/li&gt;
&lt;li&gt;a &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;a local working copy of the code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-git-on-your-system&#34;&gt;Install Git on your system&lt;/h2&gt;
&lt;p&gt;Git is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Version_control&#34;&gt;version control system&lt;/a&gt; to track the changes of source code.&lt;/p&gt;
&lt;p&gt;You will need to have Git installed on your computer to contribute to Jenkins X development.
Teaching Git is outside the scope of the Jenkins X docs, but if you&amp;rsquo;re looking for an excellent reference to learn the basics of Git, we recommend the &lt;a href=&#34;https://git-scm.com/book/&#34;&gt;Git book&lt;/a&gt; if you are not sure where to begin.&lt;/p&gt;
&lt;p&gt;Move back to the terminal and check if Git is already installed.
Type &lt;code&gt;git version&lt;/code&gt; and press enter.
If the command returned a version number, you can skip the rest of this section.&lt;/p&gt;
&lt;p&gt;Otherwise, &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;download&lt;/a&gt; the latest version and follow this &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, run &lt;code&gt;git version&lt;/code&gt; again to check if Git was installed successfully.&lt;/p&gt;
&lt;h3 id=&#34;git-graphical-front-ends&#34;&gt;Git Graphical Front Ends&lt;/h3&gt;
&lt;p&gt;There are several &lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;GUI clients&lt;/a&gt; that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, we will use the command line since the commands are everywhere the same.&lt;/p&gt;
&lt;h2 id=&#34;create-a-github-account&#34;&gt;Create a GitHub Account&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re going to contribute to the docs, you&amp;rsquo;ll need to have an account on GitHub.
Go to &lt;a href=&#34;https://github.com/join&#34;&gt;www.github.com/join&lt;/a&gt; and set up a personal account.&lt;/p&gt;
&lt;h2 id=&#34;set-up-your-working-copy&#34;&gt;Set up your working copy&lt;/h2&gt;
&lt;p&gt;The working copy is set up locally on your computer.
It&amp;rsquo;s what you&amp;rsquo;ll edit, compile, and end up pushing back to GitHub.
The main steps are cloning the repository and creating your fork as a remote.&lt;/p&gt;
&lt;h3 id=&#34;fork-the-repository&#34;&gt;Fork the repository&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re not familiar with this term, GitHub&amp;rsquo;s &lt;a href=&#34;https://help.github.com/articles/fork-a-repo/&#34;&gt;help pages&lt;/a&gt; provide a simple explanation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open the &lt;a href=&#34;https://github.com/jenkins-x/jx-docs&#34;&gt;Jenkins X docs repository&lt;/a&gt; on GitHub and click on the &amp;ldquo;Fork&amp;rdquo; button in the top right.&lt;/p&gt;
&lt;h3 id=&#34;clone-your-fork-locally&#34;&gt;Clone your fork locally&lt;/h3&gt;
&lt;p&gt;Now open your fork repository on GitHub and copy the remote url of your fork.
You can choose between HTTPS and SSH as protocol that Git should use for the following operations.
HTTPS works always &lt;a href=&#34;https://help.github.com/articles/which-remote-url-should-i-use/&#34;&gt;if you&amp;rsquo;re not sure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/copy-remote-url.png&#34; alt=&#34;Copy remote url&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then go back to your terminal, &lt;code&gt;cd&lt;/code&gt; to where you would like to place your local copy of the &lt;code&gt;jx-docs&lt;/code&gt; repo, and then clone your fork.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recurse-submodules --depth &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; git@github.com:&amp;lt;YOUR_USERNAME&amp;gt;/jx-docs.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd jx-docs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;In case you already have a git clone locally (from before the theme change) then run the following to pull the Docsy theme and dependencies&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule update --init --recursive
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Add the conventional upstream &lt;code&gt;git&lt;/code&gt; remote in order to fetch changes from the &lt;code&gt;jx-docs&lt;/code&gt; master
branch and to create pull requests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add upstream https://github.com/jenkins-x/jx-docs.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s check if everything went right by listing all known remotes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should look similar to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin    git@github.com:&amp;lt;YOUR_USERNAME&amp;gt;/jx-docs.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;origin    git@github.com:&amp;lt;YOUR_USERNAME&amp;gt;/jx-docs.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;upstream  https://github.com/jenkins-x/jx-docs.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;upstream  https://github.com/jenkins-x/jx-docs.git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;push&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Community: Documentation Style Guide</title>
      <link>https://jenkins-x.io/community/documentation/style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/style-guide/</guid>
      <description>
        
        
        &lt;h1 id=&#34;documentation-writer-style-guide&#34;&gt;Documentation writer style guide&lt;/h1&gt;
&lt;p&gt;The Jenkins X Documentation Special Interest Group (SIG) has established some guidelines for docs contribution.
The following are not meant to be exhaustive, but are simple style and technical tips to help conform to the existing voice and technical writing techniques used in our existing docs content.&lt;/p&gt;
&lt;h2 id=&#34;writer-voice-and-tone&#34;&gt;Writer voice and tone&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pages should have titles, and should be descriptive enough on its own that readers (and web search crawlers) can pick up the title without too much missing context.
Proper nouns should be capitalized in titles but nothing else (for example, write &amp;ldquo;Jenkins X tips and tricks&amp;rdquo; instead of &amp;ldquo;Jenkins X Tips And Tricks&amp;rdquo;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use commands as verbs.
For example write &amp;ldquo;Change to a new directory with &lt;code&gt;cd&lt;/code&gt;&amp;rdquo; instead of &amp;ldquo;cd to the new directory&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use active voice wherever possible instead of passive voice to make explanations and procedures clearer and more direct.
For example, write &amp;ldquo;Click the &lt;code&gt;TLS/SSL&lt;/code&gt; checkbox if you want to enable a secure connection&amp;rdquo; instead of &amp;ldquo;If you want a secure connection to be enabled, make sure the &lt;code&gt;TLS/SSL&lt;/code&gt; checkbox is clicked.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When introducing a new acronym to your content, write the full term first before using the acronym (for example, “User Interface (UI)”).
Then you can use the acronym in subsequent mentions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep content focus as narrow and prescriptive as possible; no long explanations for actions or drawn out introductions unless describing it in detail for an &lt;code&gt;/about&lt;/code&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;technical-guidelines&#34;&gt;Technical guidelines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write in one sentence per line, even if you are writing a multi-sentence paragraph.
That way when you or other writers are making changes to the content, it will be easier for reviewers to find what has changed in one sentence rather than finding it in a long paragraph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use multiples of 10 when assigning the &lt;code&gt;weight&lt;/code&gt; of a new page of content, as it will be easier to prioritize pages within a navigation menu.
Let&amp;rsquo;s say you have 3 existing pages with a &lt;code&gt;weight&lt;/code&gt; of &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;20&lt;/code&gt;, and &lt;code&gt;30&lt;/code&gt;, respectively.&lt;br&gt;
Using this method, a writer can create a page with a weight of &lt;code&gt;11&lt;/code&gt; that will appear between the page weighted &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt; in the navigation menu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use backticks when describing commands, directory paths, or filenames.
For example: &amp;ldquo;Open a terminal and type `cd /usr/local/bin` to find the `jx` command.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code blocks should use triple backticks plus the supported code descriptor for proper syntax highlights  (for example, &lt;code&gt;\&lt;/code&gt;``bash` for a command run at terminal shell prompt).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commands to be typed out by the user should not use prompts like &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; as they can introduce unintended errors when used with the command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use absolute paths when cross-linking content. For example, use &lt;code&gt;/docs/install-setup/installing/boot/foo.md&lt;/code&gt; instead of &lt;code&gt;../../install-setup/installing/boot/foo.md&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Place the title of your content in the header/metadata of the page under &lt;code&gt;Title:&lt;/code&gt;. Subsequent sections created in the content begin with section 2 header designation (&lt;code&gt;##&lt;/code&gt;) or more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Community: References</title>
      <link>https://jenkins-x.io/community/documentation/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/reference/</guid>
      <description>
        
        
        &lt;p&gt;The following sections contains other information that&amp;rsquo;s helpful when working with Hugo and the Jenkins X site; you don&amp;rsquo;t necessary need to go through this if this is your first time.&lt;/p&gt;
&lt;h2 id=&#34;search-by-algoliadocsearch&#34;&gt;Search by Algolia/DocSearch&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re using &lt;a href=&#34;https://community.algolia.com/docsearch/&#34;&gt;DocSearch&lt;/a&gt; by Algolia to power the internal search.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The script and local config are declared in &lt;code&gt;/layouts/partials/scripts.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Styling is included via &lt;code&gt;/layouts/partials/head-css.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The configuration is managed in the Algolia console.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;markdown-syntax-reference&#34;&gt;Markdown Syntax Reference&lt;/h2&gt;
&lt;h3 id=&#34;code-examples&#34;&gt;Code examples&lt;/h3&gt;
&lt;p&gt;Hugo uses &lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup#goldmark&#34;&gt;goldmark&lt;/a&gt; parser to handle markdown and markdown related configuration and &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/&#34;&gt;chroma&lt;/a&gt; to handle syntax highlighting.
Chroma supports the following &lt;a href=&#34;https://gohugo.io/content-management/syntax-highlighting/#list-of-chroma-highlighting-languages&#34;&gt;languages&lt;/a&gt;.
All pages on the Jenkins X docs use the typical triple-back-tick markdown syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CommandInterface defines the interface for a Command
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandInterface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DidError&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DidFail&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RunWithoutRetry&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetName&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetDir&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetArgs&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetExponentialBackOff&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;backoff&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ExponentialBackOff&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;becomes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CommandInterface defines the interface for a Command
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommandInterface&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DidError&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DidFail&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RunWithoutRetry&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetName&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetDir&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetArgs&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;[]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Duration&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;SetExponentialBackOff&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;backoff&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ExponentialBackOff&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h3&gt;
&lt;p&gt;Blockquotes can be added to the Jenkins X documentation using &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes&#34;&gt;typical Markdown blockquote syntax&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Without the threat of punishment, there is no joy in flight.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The preceding blockquote will render as follows in the Jenkins X docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without the threat of punishment, there is no joy in flight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, you can add a quick and easy &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element (added on the client via JavaScript) by separating your main blockquote and the citation with a hyphen with a single space on each side:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Without the threat of punishment, there is no joy in flight. - [Kobo Abe](https://en.wikipedia.org/wiki/Kobo_Abe)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which will render as follows in the Jenkins X docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without the threat of punishment, there is no joy in flight. - &lt;a href=&#34;https://en.wikipedia.org/wiki/Kobo_Abe&#34;&gt;Kobo Abe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Community: Contribution workflow</title>
      <link>https://jenkins-x.io/community/documentation/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/community/documentation/workflow/</guid>
      <description>
        
        
        &lt;p&gt;Once you&amp;rsquo;ve completed the initial steps to get started, you can begin to make changes and add new content.&lt;/p&gt;
&lt;p&gt;At a high level, your workflow will likely look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new branch for you work&lt;/li&gt;
&lt;li&gt;Start the Hugo server to preview your changes (updates the site live)&lt;/li&gt;
&lt;li&gt;Make changes/add new content&lt;/li&gt;
&lt;li&gt;Commit and push your changes to your fork of &lt;code&gt;jx-docs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Raise a Pull Request (PR) to have your changes merged into the main &lt;code&gt;jx-docs&lt;/code&gt; repo&lt;/li&gt;
&lt;li&gt;Wait for and then participate in a review of your changes
&lt;ul&gt;
&lt;li&gt;might involve making adjustments or adding a bit more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See your changes go live on the &lt;a href=&#34;https://jenkins-x.io&#34;&gt;Jenkins X site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll go though each of the steps below in more detail&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-branch&#34;&gt;Create a new branch&lt;/h2&gt;
&lt;p&gt;First, ensure that your local repository is up-to-date with the latest version of &lt;code&gt;jx-docs&lt;/code&gt;. More details on &lt;a href=&#34;https://help.github.com/articles/syncing-a-fork/&#34;&gt;GitHub help&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ve now updated your local copy of the repository. To update your fork on GitHub, push your changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a new branch for the changes you&amp;rsquo;d like to make:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout -b &amp;lt;BRANCH-NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can check on which branch your are with &lt;code&gt;git branch&lt;/code&gt;. You should see a list of all local branches. The current branch is indicated with a little asterisk.&lt;/p&gt;
&lt;h2 id=&#34;start-the-hugo-server&#34;&gt;Start the Hugo server&lt;/h2&gt;
&lt;p&gt;In case you don&amp;rsquo;t already have it running, this is a good time to &lt;a href=&#34;https://jenkins-x.io/community/documentation/#local-preview-environment&#34;&gt;start&lt;/a&gt; your local Hugo server.&lt;/p&gt;
&lt;p&gt;If you already have Hugo running, it&amp;rsquo;s usually best to double check that the site looks as you&amp;rsquo;d expect it (basically the same as the live site) and if something&amp;rsquo;s off, do a quick restart of Hugo.&lt;/p&gt;
&lt;h2 id=&#34;make-changes&#34;&gt;Make Changes&lt;/h2&gt;
&lt;p&gt;All pages are written in GitHub-flavored Markdown (see &lt;a href=&#34;https://jenkins-x.io/community/documentation/reference/#markdown-syntax-reference&#34;&gt;Markdown reference&lt;/a&gt; for details on syntax).&lt;/p&gt;
&lt;p&gt;Some things, like the footer etc. are in the &lt;code&gt;/themes/docsy&lt;/code&gt; structure, but most likely you&amp;rsquo;ll just be adding/changing things in the various page structures. If you do make changes that involve the theme, remember to copy-paste the theme file to the appropriate folder in the &lt;code&gt;/layouts&lt;/code&gt; structure, and make your changes there. If you make changes to files in the &lt;code&gt;/themes/docsy&lt;/code&gt; structure, they will likely be deleted when we update the theme.&lt;/p&gt;
&lt;h2 id=&#34;add-new-content&#34;&gt;Add new Content&lt;/h2&gt;
&lt;p&gt;The Jenkins X docs make heavy use of Jenkins X&amp;rsquo;s archetypes feature. All content sections in Jenkins X documentation have an assigned archetype.&lt;/p&gt;
&lt;p&gt;Adding new content to the Jenkins X docs follows the same pattern, regardless of the content section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose run server new &amp;lt;DOCS-SECTION&amp;gt;/&amp;lt;new-content-lowercase&amp;gt;.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commit-and-push-your-changes&#34;&gt;Commit and push your changes&lt;/h2&gt;
&lt;p&gt;When you&amp;rsquo;ve finished, and verified that everything looks good (using the Hugo server), you should run one last check to verify that you didn&amp;rsquo;t break anything.&lt;/p&gt;
&lt;h3 id=&#34;checking-references-and-links&#34;&gt;Checking References and Links&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re using a tool called &lt;a href=&#34;https://github.com/chabad360/htmlproofer&#34;&gt;htmlproofer&lt;/a&gt; to check that links are still valid etc. so you just need to run the following commands to build the site locally, and verify that everything looks good:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose run server sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd /src &amp;amp;&amp;amp; hugo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose up linkchecker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;checking-spelling&#34;&gt;Checking Spelling&lt;/h3&gt;
&lt;p&gt;For spell checking, we&amp;rsquo;re using &lt;a href=&#34;https://github.com/lukeapage/node-markdown-spellcheck&#34;&gt;node-markdown-spellcheck&lt;/a&gt; to run through all our markdown files and list any spelling issue or unknown word it can find.&lt;/p&gt;
&lt;p&gt;To make this as simple as possible, just run the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose up spellchecker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will output any issue the spell checker have found.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s likely that the report includes words that are spelled correctly, but that just means the spell checker is not aware of the correct spelling (happens a lot for technical terms, commands, etc.). Please edit the &lt;code&gt;.spelling&lt;/code&gt; file and add the unknown word.
Also, please try and keep the list alphabetically sorted; makes it easier to navigate when you&amp;rsquo;re looking for something&lt;/p&gt;
&lt;h3 id=&#34;commit--push&#34;&gt;Commit &amp;amp; Push&lt;/h3&gt;
&lt;p&gt;If everything is good, you can commit your changes, and push them to your fork:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --set-upstream origin &amp;lt;BRANCH-NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to push more commits to the same branch, you can just use &lt;code&gt;git push&lt;/code&gt; going forward; set-upstream is only needed once.&lt;/p&gt;
&lt;h3 id=&#34;open-a-pull-request-&#34;&gt;Open a pull request 🎉&lt;/h3&gt;
&lt;p&gt;In this step, you&amp;rsquo;ll open a pull request to submit your additions. Open either the &lt;a href=&#34;https://github.com/jenkins-x/jx-docs&#34;&gt;Jenkins X documentation master repository&lt;/a&gt; or your own fork of the respository on GitHub in your browser.&lt;/p&gt;
&lt;p&gt;You should find a green button labeled with &amp;ldquo;New pull request&amp;rdquo;. But GitHub is clever and probably suggests you a pull request like in the beige box below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jenkins-x.io/images/contribute/development/open-pull-request.png&#34; alt=&#34;Open a pull request&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on the green &amp;ldquo;Compare and pull request&amp;rdquo; button. A new page will open which summaries the most important information of your pull request. Scroll down and you&amp;rsquo;ll find the additions of all your commits. Make sure everything looks as expected and click on &amp;ldquo;Create pull request&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There are a number of automated checks that will run on your PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic Pull Request - validates that your commit messages meet the &lt;a href=&#34;https://github.com/probot/semantic-pull-requests#semantic-pull-requests&#34;&gt;Conventional Commit format&lt;/a&gt;.
Additionally your PR must also have a conventional message. The UX for this bot is a little odd as it doesn&amp;rsquo;t go red
if the messages are NOT correct, instead it goes yellow. You need it to go to a green tick!&lt;/li&gt;
&lt;li&gt;Tide - performs the merge when all the checks pass. Don&amp;rsquo;t worry about the state of this one, it doesn&amp;rsquo;t add much info.
Clicking on the details link is very helpful as it will take you to the dashboard where you can navigate to the &amp;ldquo;Tide&amp;rdquo;
screen and check the status of your PR in the merge queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;review-process&#34;&gt;Review Process&lt;/h3&gt;
&lt;p&gt;The final part of all of this, is letting others review your work and provide feedback. As a rule of thumb, the conversation should happen on the PR, but sometimes things will be sorted out via Slack or a video call.&lt;/p&gt;
&lt;p&gt;Sometimes it may take a few days for a review to happen. If you feel it&amp;rsquo;s an urgent change, jump on the &lt;a href=&#34;https://jenkins-x.io/community/#slack&#34;&gt;community slack channel&lt;/a&gt; &lt;code&gt;#jenkins-x-user&lt;/code&gt; and ask for someone to review your PR.&lt;/p&gt;
&lt;p&gt;Once the review is done, your changes will be merged into the master branch, and the site will be updated.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;In case you need to update your PR/branch because js-docs/master have been updated since you submitted your PR, run the followin &lt;code&gt;git&lt;/code&gt; command to pull all the changes to your local environment and then push them to your PR/branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you experience Merge Conflicts, there&amp;rsquo;s a good &lt;a href=&#34;https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line&#34;&gt;article on GitHub&lt;/a&gt; that helps explain what to do&lt;/p&gt;


&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
